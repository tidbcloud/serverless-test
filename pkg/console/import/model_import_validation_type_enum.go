/*
Import APIs for TiDB Cloud Serverless

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package consoleimportapi

import (
	"encoding/json"
	"fmt"
)

// ImportValidationTypeEnum  - SOURCE_ACCESS_CHECK: The validation ensures that the source is accessible.  - TABLE_EMPTY_CHECK: The validation ensures that the target table is empty.
type ImportValidationTypeEnum string

// List of ImportValidationType.Enum
const (
	IMPORTVALIDATIONTYPEENUM_SOURCE_ACCESS_CHECK ImportValidationTypeEnum = "SOURCE_ACCESS_CHECK"
	IMPORTVALIDATIONTYPEENUM_TABLE_EMPTY_CHECK   ImportValidationTypeEnum = "TABLE_EMPTY_CHECK"
)

// All allowed values of ImportValidationTypeEnum enum
var AllowedImportValidationTypeEnumEnumValues = []ImportValidationTypeEnum{
	"SOURCE_ACCESS_CHECK",
	"TABLE_EMPTY_CHECK",
}

func (v *ImportValidationTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ImportValidationTypeEnum(value)
	for _, existing := range AllowedImportValidationTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ImportValidationTypeEnum", value)
}

// NewImportValidationTypeEnumFromValue returns a pointer to a valid ImportValidationTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewImportValidationTypeEnumFromValue(v string) (*ImportValidationTypeEnum, error) {
	ev := ImportValidationTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ImportValidationTypeEnum: valid values are %v", v, AllowedImportValidationTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ImportValidationTypeEnum) IsValid() bool {
	for _, existing := range AllowedImportValidationTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ImportValidationType.Enum value
func (v ImportValidationTypeEnum) Ptr() *ImportValidationTypeEnum {
	return &v
}

type NullableImportValidationTypeEnum struct {
	value *ImportValidationTypeEnum
	isSet bool
}

func (v NullableImportValidationTypeEnum) Get() *ImportValidationTypeEnum {
	return v.value
}

func (v *NullableImportValidationTypeEnum) Set(val *ImportValidationTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableImportValidationTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableImportValidationTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportValidationTypeEnum(val *ImportValidationTypeEnum) *NullableImportValidationTypeEnum {
	return &NullableImportValidationTypeEnum{value: val, isSet: true}
}

func (v NullableImportValidationTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportValidationTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
