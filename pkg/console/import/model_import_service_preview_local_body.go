/*
Import APIs for TiDB Cloud Serverless

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package consoleimportapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ImportServicePreviewLocalBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportServicePreviewLocalBody{}

// ImportServicePreviewLocalBody struct for ImportServicePreviewLocalBody
type ImportServicePreviewLocalBody struct {
	// Required. The source of the import.
	UploadId  string             `json:"upload_id"`
	FileType  ImportFileTypeEnum `json:"file_type"`
	CsvFormat *CSVFormat         `json:"csv_format,omitempty"`
}

type _ImportServicePreviewLocalBody ImportServicePreviewLocalBody

// NewImportServicePreviewLocalBody instantiates a new ImportServicePreviewLocalBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportServicePreviewLocalBody(uploadId string, fileType ImportFileTypeEnum) *ImportServicePreviewLocalBody {
	this := ImportServicePreviewLocalBody{}
	this.UploadId = uploadId
	this.FileType = fileType
	return &this
}

// NewImportServicePreviewLocalBodyWithDefaults instantiates a new ImportServicePreviewLocalBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportServicePreviewLocalBodyWithDefaults() *ImportServicePreviewLocalBody {
	this := ImportServicePreviewLocalBody{}
	return &this
}

// GetUploadId returns the UploadId field value
func (o *ImportServicePreviewLocalBody) GetUploadId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UploadId
}

// GetUploadIdOk returns a tuple with the UploadId field value
// and a boolean to check if the value has been set.
func (o *ImportServicePreviewLocalBody) GetUploadIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UploadId, true
}

// SetUploadId sets field value
func (o *ImportServicePreviewLocalBody) SetUploadId(v string) {
	o.UploadId = v
}

// GetFileType returns the FileType field value
func (o *ImportServicePreviewLocalBody) GetFileType() ImportFileTypeEnum {
	if o == nil {
		var ret ImportFileTypeEnum
		return ret
	}

	return o.FileType
}

// GetFileTypeOk returns a tuple with the FileType field value
// and a boolean to check if the value has been set.
func (o *ImportServicePreviewLocalBody) GetFileTypeOk() (*ImportFileTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileType, true
}

// SetFileType sets field value
func (o *ImportServicePreviewLocalBody) SetFileType(v ImportFileTypeEnum) {
	o.FileType = v
}

// GetCsvFormat returns the CsvFormat field value if set, zero value otherwise.
func (o *ImportServicePreviewLocalBody) GetCsvFormat() CSVFormat {
	if o == nil || IsNil(o.CsvFormat) {
		var ret CSVFormat
		return ret
	}
	return *o.CsvFormat
}

// GetCsvFormatOk returns a tuple with the CsvFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportServicePreviewLocalBody) GetCsvFormatOk() (*CSVFormat, bool) {
	if o == nil || IsNil(o.CsvFormat) {
		return nil, false
	}
	return o.CsvFormat, true
}

// HasCsvFormat returns a boolean if a field has been set.
func (o *ImportServicePreviewLocalBody) HasCsvFormat() bool {
	if o != nil && !IsNil(o.CsvFormat) {
		return true
	}

	return false
}

// SetCsvFormat gets a reference to the given CSVFormat and assigns it to the CsvFormat field.
func (o *ImportServicePreviewLocalBody) SetCsvFormat(v CSVFormat) {
	o.CsvFormat = &v
}

func (o ImportServicePreviewLocalBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportServicePreviewLocalBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["upload_id"] = o.UploadId
	toSerialize["file_type"] = o.FileType
	if !IsNil(o.CsvFormat) {
		toSerialize["csv_format"] = o.CsvFormat
	}
	return toSerialize, nil
}

func (o *ImportServicePreviewLocalBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"upload_id",
		"file_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImportServicePreviewLocalBody := _ImportServicePreviewLocalBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImportServicePreviewLocalBody)

	if err != nil {
		return err
	}

	*o = ImportServicePreviewLocalBody(varImportServicePreviewLocalBody)

	return err
}

type NullableImportServicePreviewLocalBody struct {
	value *ImportServicePreviewLocalBody
	isSet bool
}

func (v NullableImportServicePreviewLocalBody) Get() *ImportServicePreviewLocalBody {
	return v.value
}

func (v *NullableImportServicePreviewLocalBody) Set(val *ImportServicePreviewLocalBody) {
	v.value = val
	v.isSet = true
}

func (v NullableImportServicePreviewLocalBody) IsSet() bool {
	return v.isSet
}

func (v *NullableImportServicePreviewLocalBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportServicePreviewLocalBody(val *ImportServicePreviewLocalBody) *NullableImportServicePreviewLocalBody {
	return &NullableImportServicePreviewLocalBody{value: val, isSet: true}
}

func (v NullableImportServicePreviewLocalBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportServicePreviewLocalBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
