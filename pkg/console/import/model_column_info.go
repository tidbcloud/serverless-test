/*
Import APIs for TiDB Cloud Serverless

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package consoleimportapi

import (
	"encoding/json"
)

// checks if the ColumnInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ColumnInfo{}

// ColumnInfo struct for ColumnInfo
type ColumnInfo struct {
	// The name of the column.
	ColumnName *string `json:"column_name,omitempty"`
	// The type of the column.
	ColumnType *string `json:"column_type,omitempty"`
}

// NewColumnInfo instantiates a new ColumnInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewColumnInfo() *ColumnInfo {
	this := ColumnInfo{}
	return &this
}

// NewColumnInfoWithDefaults instantiates a new ColumnInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewColumnInfoWithDefaults() *ColumnInfo {
	this := ColumnInfo{}
	return &this
}

// GetColumnName returns the ColumnName field value if set, zero value otherwise.
func (o *ColumnInfo) GetColumnName() string {
	if o == nil || IsNil(o.ColumnName) {
		var ret string
		return ret
	}
	return *o.ColumnName
}

// GetColumnNameOk returns a tuple with the ColumnName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColumnInfo) GetColumnNameOk() (*string, bool) {
	if o == nil || IsNil(o.ColumnName) {
		return nil, false
	}
	return o.ColumnName, true
}

// HasColumnName returns a boolean if a field has been set.
func (o *ColumnInfo) HasColumnName() bool {
	if o != nil && !IsNil(o.ColumnName) {
		return true
	}

	return false
}

// SetColumnName gets a reference to the given string and assigns it to the ColumnName field.
func (o *ColumnInfo) SetColumnName(v string) {
	o.ColumnName = &v
}

// GetColumnType returns the ColumnType field value if set, zero value otherwise.
func (o *ColumnInfo) GetColumnType() string {
	if o == nil || IsNil(o.ColumnType) {
		var ret string
		return ret
	}
	return *o.ColumnType
}

// GetColumnTypeOk returns a tuple with the ColumnType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColumnInfo) GetColumnTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ColumnType) {
		return nil, false
	}
	return o.ColumnType, true
}

// HasColumnType returns a boolean if a field has been set.
func (o *ColumnInfo) HasColumnType() bool {
	if o != nil && !IsNil(o.ColumnType) {
		return true
	}

	return false
}

// SetColumnType gets a reference to the given string and assigns it to the ColumnType field.
func (o *ColumnInfo) SetColumnType(v string) {
	o.ColumnType = &v
}

func (o ColumnInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ColumnInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ColumnName) {
		toSerialize["column_name"] = o.ColumnName
	}
	if !IsNil(o.ColumnType) {
		toSerialize["column_type"] = o.ColumnType
	}
	return toSerialize, nil
}

type NullableColumnInfo struct {
	value *ColumnInfo
	isSet bool
}

func (v NullableColumnInfo) Get() *ColumnInfo {
	return v.value
}

func (v *NullableColumnInfo) Set(val *ColumnInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableColumnInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableColumnInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableColumnInfo(val *ColumnInfo) *NullableColumnInfo {
	return &NullableColumnInfo{value: val, isSet: true}
}

func (v NullableColumnInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableColumnInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
