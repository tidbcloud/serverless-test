/*
Import APIs for TiDB Cloud Serverless

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package consoleimportapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ImportServiceUploadBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportServiceUploadBody{}

// ImportServiceUploadBody struct for ImportServiceUploadBody
type ImportServiceUploadBody struct {
	// Required. The name of the file to import.
	FileName string `json:"file_name"`
}

type _ImportServiceUploadBody ImportServiceUploadBody

// NewImportServiceUploadBody instantiates a new ImportServiceUploadBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportServiceUploadBody(fileName string) *ImportServiceUploadBody {
	this := ImportServiceUploadBody{}
	this.FileName = fileName
	return &this
}

// NewImportServiceUploadBodyWithDefaults instantiates a new ImportServiceUploadBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportServiceUploadBodyWithDefaults() *ImportServiceUploadBody {
	this := ImportServiceUploadBody{}
	return &this
}

// GetFileName returns the FileName field value
func (o *ImportServiceUploadBody) GetFileName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value
// and a boolean to check if the value has been set.
func (o *ImportServiceUploadBody) GetFileNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileName, true
}

// SetFileName sets field value
func (o *ImportServiceUploadBody) SetFileName(v string) {
	o.FileName = v
}

func (o ImportServiceUploadBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportServiceUploadBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["file_name"] = o.FileName
	return toSerialize, nil
}

func (o *ImportServiceUploadBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"file_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImportServiceUploadBody := _ImportServiceUploadBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImportServiceUploadBody)

	if err != nil {
		return err
	}

	*o = ImportServiceUploadBody(varImportServiceUploadBody)

	return err
}

type NullableImportServiceUploadBody struct {
	value *ImportServiceUploadBody
	isSet bool
}

func (v NullableImportServiceUploadBody) Get() *ImportServiceUploadBody {
	return v.value
}

func (v *NullableImportServiceUploadBody) Set(val *ImportServiceUploadBody) {
	v.value = val
	v.isSet = true
}

func (v NullableImportServiceUploadBody) IsSet() bool {
	return v.isSet
}

func (v *NullableImportServiceUploadBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportServiceUploadBody(val *ImportServiceUploadBody) *NullableImportServiceUploadBody {
	return &NullableImportServiceUploadBody{value: val, isSet: true}
}

func (v NullableImportServiceUploadBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportServiceUploadBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
