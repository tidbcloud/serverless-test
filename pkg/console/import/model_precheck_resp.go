/*
Import APIs for TiDB Cloud Serverless

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package consoleimportapi

import (
	"encoding/json"
)

// checks if the PrecheckResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrecheckResp{}

// PrecheckResp struct for PrecheckResp
type PrecheckResp struct {
	// The list of tables which has matched data files.
	TargetTables []TableResult `json:"target_tables,omitempty"`
	// The error message consists of the unmatched tables.
	ErrorMessage *string `json:"error_message,omitempty"`
	// The total data files count.
	TotalDataFilesCount *string `json:"total_data_files_count,omitempty"`
	// The total tables count.
	TotalTablesCount *string `json:"total_tables_count,omitempty"`
	// If the result is truncated.
	IsTruncated *bool     `json:"is_truncated,omitempty"`
	BaseResp    *BaseResp `json:"base_resp,omitempty"`
}

// NewPrecheckResp instantiates a new PrecheckResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrecheckResp() *PrecheckResp {
	this := PrecheckResp{}
	return &this
}

// NewPrecheckRespWithDefaults instantiates a new PrecheckResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrecheckRespWithDefaults() *PrecheckResp {
	this := PrecheckResp{}
	return &this
}

// GetTargetTables returns the TargetTables field value if set, zero value otherwise.
func (o *PrecheckResp) GetTargetTables() []TableResult {
	if o == nil || IsNil(o.TargetTables) {
		var ret []TableResult
		return ret
	}
	return o.TargetTables
}

// GetTargetTablesOk returns a tuple with the TargetTables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrecheckResp) GetTargetTablesOk() ([]TableResult, bool) {
	if o == nil || IsNil(o.TargetTables) {
		return nil, false
	}
	return o.TargetTables, true
}

// HasTargetTables returns a boolean if a field has been set.
func (o *PrecheckResp) HasTargetTables() bool {
	if o != nil && !IsNil(o.TargetTables) {
		return true
	}

	return false
}

// SetTargetTables gets a reference to the given []TableResult and assigns it to the TargetTables field.
func (o *PrecheckResp) SetTargetTables(v []TableResult) {
	o.TargetTables = v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *PrecheckResp) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage) {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrecheckResp) GetErrorMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorMessage) {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *PrecheckResp) HasErrorMessage() bool {
	if o != nil && !IsNil(o.ErrorMessage) {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *PrecheckResp) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

// GetTotalDataFilesCount returns the TotalDataFilesCount field value if set, zero value otherwise.
func (o *PrecheckResp) GetTotalDataFilesCount() string {
	if o == nil || IsNil(o.TotalDataFilesCount) {
		var ret string
		return ret
	}
	return *o.TotalDataFilesCount
}

// GetTotalDataFilesCountOk returns a tuple with the TotalDataFilesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrecheckResp) GetTotalDataFilesCountOk() (*string, bool) {
	if o == nil || IsNil(o.TotalDataFilesCount) {
		return nil, false
	}
	return o.TotalDataFilesCount, true
}

// HasTotalDataFilesCount returns a boolean if a field has been set.
func (o *PrecheckResp) HasTotalDataFilesCount() bool {
	if o != nil && !IsNil(o.TotalDataFilesCount) {
		return true
	}

	return false
}

// SetTotalDataFilesCount gets a reference to the given string and assigns it to the TotalDataFilesCount field.
func (o *PrecheckResp) SetTotalDataFilesCount(v string) {
	o.TotalDataFilesCount = &v
}

// GetTotalTablesCount returns the TotalTablesCount field value if set, zero value otherwise.
func (o *PrecheckResp) GetTotalTablesCount() string {
	if o == nil || IsNil(o.TotalTablesCount) {
		var ret string
		return ret
	}
	return *o.TotalTablesCount
}

// GetTotalTablesCountOk returns a tuple with the TotalTablesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrecheckResp) GetTotalTablesCountOk() (*string, bool) {
	if o == nil || IsNil(o.TotalTablesCount) {
		return nil, false
	}
	return o.TotalTablesCount, true
}

// HasTotalTablesCount returns a boolean if a field has been set.
func (o *PrecheckResp) HasTotalTablesCount() bool {
	if o != nil && !IsNil(o.TotalTablesCount) {
		return true
	}

	return false
}

// SetTotalTablesCount gets a reference to the given string and assigns it to the TotalTablesCount field.
func (o *PrecheckResp) SetTotalTablesCount(v string) {
	o.TotalTablesCount = &v
}

// GetIsTruncated returns the IsTruncated field value if set, zero value otherwise.
func (o *PrecheckResp) GetIsTruncated() bool {
	if o == nil || IsNil(o.IsTruncated) {
		var ret bool
		return ret
	}
	return *o.IsTruncated
}

// GetIsTruncatedOk returns a tuple with the IsTruncated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrecheckResp) GetIsTruncatedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsTruncated) {
		return nil, false
	}
	return o.IsTruncated, true
}

// HasIsTruncated returns a boolean if a field has been set.
func (o *PrecheckResp) HasIsTruncated() bool {
	if o != nil && !IsNil(o.IsTruncated) {
		return true
	}

	return false
}

// SetIsTruncated gets a reference to the given bool and assigns it to the IsTruncated field.
func (o *PrecheckResp) SetIsTruncated(v bool) {
	o.IsTruncated = &v
}

// GetBaseResp returns the BaseResp field value if set, zero value otherwise.
func (o *PrecheckResp) GetBaseResp() BaseResp {
	if o == nil || IsNil(o.BaseResp) {
		var ret BaseResp
		return ret
	}
	return *o.BaseResp
}

// GetBaseRespOk returns a tuple with the BaseResp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrecheckResp) GetBaseRespOk() (*BaseResp, bool) {
	if o == nil || IsNil(o.BaseResp) {
		return nil, false
	}
	return o.BaseResp, true
}

// HasBaseResp returns a boolean if a field has been set.
func (o *PrecheckResp) HasBaseResp() bool {
	if o != nil && !IsNil(o.BaseResp) {
		return true
	}

	return false
}

// SetBaseResp gets a reference to the given BaseResp and assigns it to the BaseResp field.
func (o *PrecheckResp) SetBaseResp(v BaseResp) {
	o.BaseResp = &v
}

func (o PrecheckResp) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrecheckResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TargetTables) {
		toSerialize["target_tables"] = o.TargetTables
	}
	if !IsNil(o.ErrorMessage) {
		toSerialize["error_message"] = o.ErrorMessage
	}
	if !IsNil(o.TotalDataFilesCount) {
		toSerialize["total_data_files_count"] = o.TotalDataFilesCount
	}
	if !IsNil(o.TotalTablesCount) {
		toSerialize["total_tables_count"] = o.TotalTablesCount
	}
	if !IsNil(o.IsTruncated) {
		toSerialize["is_truncated"] = o.IsTruncated
	}
	if !IsNil(o.BaseResp) {
		toSerialize["base_resp"] = o.BaseResp
	}
	return toSerialize, nil
}

type NullablePrecheckResp struct {
	value *PrecheckResp
	isSet bool
}

func (v NullablePrecheckResp) Get() *PrecheckResp {
	return v.value
}

func (v *NullablePrecheckResp) Set(val *PrecheckResp) {
	v.value = val
	v.isSet = true
}

func (v NullablePrecheckResp) IsSet() bool {
	return v.isSet
}

func (v *NullablePrecheckResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrecheckResp(val *PrecheckResp) *NullablePrecheckResp {
	return &NullablePrecheckResp{value: val, isSet: true}
}

func (v NullablePrecheckResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrecheckResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
