/*
Import APIs for TiDB Cloud Serverless

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package consoleimportapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the S3CompatibleSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &S3CompatibleSource{}

// S3CompatibleSource struct for S3CompatibleSource
type S3CompatibleSource struct {
	// The S3 compatible URI of the import source.
	Uri       string                         `json:"uri"`
	AuthType  ImportS3CompatibleAuthTypeEnum `json:"auth_type"`
	AccessKey *S3CompatibleSourceAccessKey   `json:"access_key,omitempty"`
	// The target table information of the import.
	TargetTableInfos []ImportTargetTableInfo `json:"target_table_infos,omitempty"`
	// The custom S3 endpoint (HTTPS only). Used for connecting to non-AWS S3-compatible storage, such as Cloudflare or other cloud providers. Ensure the endpoint is a valid HTTPS URL (e.g., \"https://custom-s3.example.com\").
	Endpoint *string `json:"endpoint,omitempty"`
}

type _S3CompatibleSource S3CompatibleSource

// NewS3CompatibleSource instantiates a new S3CompatibleSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3CompatibleSource(uri string, authType ImportS3CompatibleAuthTypeEnum) *S3CompatibleSource {
	this := S3CompatibleSource{}
	this.Uri = uri
	this.AuthType = authType
	return &this
}

// NewS3CompatibleSourceWithDefaults instantiates a new S3CompatibleSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3CompatibleSourceWithDefaults() *S3CompatibleSource {
	this := S3CompatibleSource{}
	return &this
}

// GetUri returns the Uri field value
func (o *S3CompatibleSource) GetUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uri
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *S3CompatibleSource) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uri, true
}

// SetUri sets field value
func (o *S3CompatibleSource) SetUri(v string) {
	o.Uri = v
}

// GetAuthType returns the AuthType field value
func (o *S3CompatibleSource) GetAuthType() ImportS3CompatibleAuthTypeEnum {
	if o == nil {
		var ret ImportS3CompatibleAuthTypeEnum
		return ret
	}

	return o.AuthType
}

// GetAuthTypeOk returns a tuple with the AuthType field value
// and a boolean to check if the value has been set.
func (o *S3CompatibleSource) GetAuthTypeOk() (*ImportS3CompatibleAuthTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthType, true
}

// SetAuthType sets field value
func (o *S3CompatibleSource) SetAuthType(v ImportS3CompatibleAuthTypeEnum) {
	o.AuthType = v
}

// GetAccessKey returns the AccessKey field value if set, zero value otherwise.
func (o *S3CompatibleSource) GetAccessKey() S3CompatibleSourceAccessKey {
	if o == nil || IsNil(o.AccessKey) {
		var ret S3CompatibleSourceAccessKey
		return ret
	}
	return *o.AccessKey
}

// GetAccessKeyOk returns a tuple with the AccessKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3CompatibleSource) GetAccessKeyOk() (*S3CompatibleSourceAccessKey, bool) {
	if o == nil || IsNil(o.AccessKey) {
		return nil, false
	}
	return o.AccessKey, true
}

// HasAccessKey returns a boolean if a field has been set.
func (o *S3CompatibleSource) HasAccessKey() bool {
	if o != nil && !IsNil(o.AccessKey) {
		return true
	}

	return false
}

// SetAccessKey gets a reference to the given S3CompatibleSourceAccessKey and assigns it to the AccessKey field.
func (o *S3CompatibleSource) SetAccessKey(v S3CompatibleSourceAccessKey) {
	o.AccessKey = &v
}

// GetTargetTableInfos returns the TargetTableInfos field value if set, zero value otherwise.
func (o *S3CompatibleSource) GetTargetTableInfos() []ImportTargetTableInfo {
	if o == nil || IsNil(o.TargetTableInfos) {
		var ret []ImportTargetTableInfo
		return ret
	}
	return o.TargetTableInfos
}

// GetTargetTableInfosOk returns a tuple with the TargetTableInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3CompatibleSource) GetTargetTableInfosOk() ([]ImportTargetTableInfo, bool) {
	if o == nil || IsNil(o.TargetTableInfos) {
		return nil, false
	}
	return o.TargetTableInfos, true
}

// HasTargetTableInfos returns a boolean if a field has been set.
func (o *S3CompatibleSource) HasTargetTableInfos() bool {
	if o != nil && !IsNil(o.TargetTableInfos) {
		return true
	}

	return false
}

// SetTargetTableInfos gets a reference to the given []ImportTargetTableInfo and assigns it to the TargetTableInfos field.
func (o *S3CompatibleSource) SetTargetTableInfos(v []ImportTargetTableInfo) {
	o.TargetTableInfos = v
}

// GetEndpoint returns the Endpoint field value if set, zero value otherwise.
func (o *S3CompatibleSource) GetEndpoint() string {
	if o == nil || IsNil(o.Endpoint) {
		var ret string
		return ret
	}
	return *o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3CompatibleSource) GetEndpointOk() (*string, bool) {
	if o == nil || IsNil(o.Endpoint) {
		return nil, false
	}
	return o.Endpoint, true
}

// HasEndpoint returns a boolean if a field has been set.
func (o *S3CompatibleSource) HasEndpoint() bool {
	if o != nil && !IsNil(o.Endpoint) {
		return true
	}

	return false
}

// SetEndpoint gets a reference to the given string and assigns it to the Endpoint field.
func (o *S3CompatibleSource) SetEndpoint(v string) {
	o.Endpoint = &v
}

func (o S3CompatibleSource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o S3CompatibleSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uri"] = o.Uri
	toSerialize["auth_type"] = o.AuthType
	if !IsNil(o.AccessKey) {
		toSerialize["access_key"] = o.AccessKey
	}
	if !IsNil(o.TargetTableInfos) {
		toSerialize["target_table_infos"] = o.TargetTableInfos
	}
	if !IsNil(o.Endpoint) {
		toSerialize["endpoint"] = o.Endpoint
	}
	return toSerialize, nil
}

func (o *S3CompatibleSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uri",
		"auth_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varS3CompatibleSource := _S3CompatibleSource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varS3CompatibleSource)

	if err != nil {
		return err
	}

	*o = S3CompatibleSource(varS3CompatibleSource)

	return err
}

type NullableS3CompatibleSource struct {
	value *S3CompatibleSource
	isSet bool
}

func (v NullableS3CompatibleSource) Get() *S3CompatibleSource {
	return v.value
}

func (v *NullableS3CompatibleSource) Set(val *S3CompatibleSource) {
	v.value = val
	v.isSet = true
}

func (v NullableS3CompatibleSource) IsSet() bool {
	return v.isSet
}

func (v *NullableS3CompatibleSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3CompatibleSource(val *S3CompatibleSource) *NullableS3CompatibleSource {
	return &NullableS3CompatibleSource{value: val, isSet: true}
}

func (v NullableS3CompatibleSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3CompatibleSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
