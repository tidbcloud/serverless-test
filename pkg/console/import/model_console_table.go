/*
Import APIs for TiDB Cloud Serverless

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package consoleimportapi

import (
	"encoding/json"
)

// checks if the ConsoleTable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConsoleTable{}

// ConsoleTable struct for ConsoleTable
type ConsoleTable struct {
	// The database name.
	Database *string `json:"database,omitempty"`
	// The table name.
	Table *string `json:"table,omitempty"`
}

// NewConsoleTable instantiates a new ConsoleTable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsoleTable() *ConsoleTable {
	this := ConsoleTable{}
	return &this
}

// NewConsoleTableWithDefaults instantiates a new ConsoleTable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsoleTableWithDefaults() *ConsoleTable {
	this := ConsoleTable{}
	return &this
}

// GetDatabase returns the Database field value if set, zero value otherwise.
func (o *ConsoleTable) GetDatabase() string {
	if o == nil || IsNil(o.Database) {
		var ret string
		return ret
	}
	return *o.Database
}

// GetDatabaseOk returns a tuple with the Database field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsoleTable) GetDatabaseOk() (*string, bool) {
	if o == nil || IsNil(o.Database) {
		return nil, false
	}
	return o.Database, true
}

// HasDatabase returns a boolean if a field has been set.
func (o *ConsoleTable) HasDatabase() bool {
	if o != nil && !IsNil(o.Database) {
		return true
	}

	return false
}

// SetDatabase gets a reference to the given string and assigns it to the Database field.
func (o *ConsoleTable) SetDatabase(v string) {
	o.Database = &v
}

// GetTable returns the Table field value if set, zero value otherwise.
func (o *ConsoleTable) GetTable() string {
	if o == nil || IsNil(o.Table) {
		var ret string
		return ret
	}
	return *o.Table
}

// GetTableOk returns a tuple with the Table field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsoleTable) GetTableOk() (*string, bool) {
	if o == nil || IsNil(o.Table) {
		return nil, false
	}
	return o.Table, true
}

// HasTable returns a boolean if a field has been set.
func (o *ConsoleTable) HasTable() bool {
	if o != nil && !IsNil(o.Table) {
		return true
	}

	return false
}

// SetTable gets a reference to the given string and assigns it to the Table field.
func (o *ConsoleTable) SetTable(v string) {
	o.Table = &v
}

func (o ConsoleTable) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConsoleTable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Database) {
		toSerialize["database"] = o.Database
	}
	if !IsNil(o.Table) {
		toSerialize["table"] = o.Table
	}
	return toSerialize, nil
}

type NullableConsoleTable struct {
	value *ConsoleTable
	isSet bool
}

func (v NullableConsoleTable) Get() *ConsoleTable {
	return v.value
}

func (v *NullableConsoleTable) Set(val *ConsoleTable) {
	v.value = val
	v.isSet = true
}

func (v NullableConsoleTable) IsSet() bool {
	return v.isSet
}

func (v *NullableConsoleTable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsoleTable(val *ConsoleTable) *NullableConsoleTable {
	return &NullableConsoleTable{value: val, isSet: true}
}

func (v NullableConsoleTable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsoleTable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
