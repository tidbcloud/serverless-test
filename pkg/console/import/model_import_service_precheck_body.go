/*
Import APIs for TiDB Cloud Serverless

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package consoleimportapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ImportServicePrecheckBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportServicePrecheckBody{}

// ImportServicePrecheckBody struct for ImportServicePrecheckBody
type ImportServicePrecheckBody struct {
	ImportOptions ImportOptions `json:"import_options"`
	Source        ImportSource  `json:"source"`
}

type _ImportServicePrecheckBody ImportServicePrecheckBody

// NewImportServicePrecheckBody instantiates a new ImportServicePrecheckBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportServicePrecheckBody(importOptions ImportOptions, source ImportSource) *ImportServicePrecheckBody {
	this := ImportServicePrecheckBody{}
	this.ImportOptions = importOptions
	this.Source = source
	return &this
}

// NewImportServicePrecheckBodyWithDefaults instantiates a new ImportServicePrecheckBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportServicePrecheckBodyWithDefaults() *ImportServicePrecheckBody {
	this := ImportServicePrecheckBody{}
	return &this
}

// GetImportOptions returns the ImportOptions field value
func (o *ImportServicePrecheckBody) GetImportOptions() ImportOptions {
	if o == nil {
		var ret ImportOptions
		return ret
	}

	return o.ImportOptions
}

// GetImportOptionsOk returns a tuple with the ImportOptions field value
// and a boolean to check if the value has been set.
func (o *ImportServicePrecheckBody) GetImportOptionsOk() (*ImportOptions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImportOptions, true
}

// SetImportOptions sets field value
func (o *ImportServicePrecheckBody) SetImportOptions(v ImportOptions) {
	o.ImportOptions = v
}

// GetSource returns the Source field value
func (o *ImportServicePrecheckBody) GetSource() ImportSource {
	if o == nil {
		var ret ImportSource
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *ImportServicePrecheckBody) GetSourceOk() (*ImportSource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *ImportServicePrecheckBody) SetSource(v ImportSource) {
	o.Source = v
}

func (o ImportServicePrecheckBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportServicePrecheckBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["import_options"] = o.ImportOptions
	toSerialize["source"] = o.Source
	return toSerialize, nil
}

func (o *ImportServicePrecheckBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"import_options",
		"source",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImportServicePrecheckBody := _ImportServicePrecheckBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImportServicePrecheckBody)

	if err != nil {
		return err
	}

	*o = ImportServicePrecheckBody(varImportServicePrecheckBody)

	return err
}

type NullableImportServicePrecheckBody struct {
	value *ImportServicePrecheckBody
	isSet bool
}

func (v NullableImportServicePrecheckBody) Get() *ImportServicePrecheckBody {
	return v.value
}

func (v *NullableImportServicePrecheckBody) Set(val *ImportServicePrecheckBody) {
	v.value = val
	v.isSet = true
}

func (v NullableImportServicePrecheckBody) IsSet() bool {
	return v.isSet
}

func (v *NullableImportServicePrecheckBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportServicePrecheckBody(val *ImportServicePrecheckBody) *NullableImportServicePrecheckBody {
	return &NullableImportServicePrecheckBody{value: val, isSet: true}
}

func (v NullableImportServicePrecheckBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportServicePrecheckBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
