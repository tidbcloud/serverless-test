/*
Import APIs for TiDB Cloud Serverless

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package consoleimportapi

import (
	"encoding/json"
)

// checks if the ImportsSupportedDataTypesResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportsSupportedDataTypesResp{}

// ImportsSupportedDataTypesResp struct for ImportsSupportedDataTypesResp
type ImportsSupportedDataTypesResp struct {
	// The list of supported data types.
	DataTypes []string  `json:"data_types,omitempty"`
	BaseResp  *BaseResp `json:"base_resp,omitempty"`
}

// NewImportsSupportedDataTypesResp instantiates a new ImportsSupportedDataTypesResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportsSupportedDataTypesResp() *ImportsSupportedDataTypesResp {
	this := ImportsSupportedDataTypesResp{}
	return &this
}

// NewImportsSupportedDataTypesRespWithDefaults instantiates a new ImportsSupportedDataTypesResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportsSupportedDataTypesRespWithDefaults() *ImportsSupportedDataTypesResp {
	this := ImportsSupportedDataTypesResp{}
	return &this
}

// GetDataTypes returns the DataTypes field value if set, zero value otherwise.
func (o *ImportsSupportedDataTypesResp) GetDataTypes() []string {
	if o == nil || IsNil(o.DataTypes) {
		var ret []string
		return ret
	}
	return o.DataTypes
}

// GetDataTypesOk returns a tuple with the DataTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportsSupportedDataTypesResp) GetDataTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.DataTypes) {
		return nil, false
	}
	return o.DataTypes, true
}

// HasDataTypes returns a boolean if a field has been set.
func (o *ImportsSupportedDataTypesResp) HasDataTypes() bool {
	if o != nil && !IsNil(o.DataTypes) {
		return true
	}

	return false
}

// SetDataTypes gets a reference to the given []string and assigns it to the DataTypes field.
func (o *ImportsSupportedDataTypesResp) SetDataTypes(v []string) {
	o.DataTypes = v
}

// GetBaseResp returns the BaseResp field value if set, zero value otherwise.
func (o *ImportsSupportedDataTypesResp) GetBaseResp() BaseResp {
	if o == nil || IsNil(o.BaseResp) {
		var ret BaseResp
		return ret
	}
	return *o.BaseResp
}

// GetBaseRespOk returns a tuple with the BaseResp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportsSupportedDataTypesResp) GetBaseRespOk() (*BaseResp, bool) {
	if o == nil || IsNil(o.BaseResp) {
		return nil, false
	}
	return o.BaseResp, true
}

// HasBaseResp returns a boolean if a field has been set.
func (o *ImportsSupportedDataTypesResp) HasBaseResp() bool {
	if o != nil && !IsNil(o.BaseResp) {
		return true
	}

	return false
}

// SetBaseResp gets a reference to the given BaseResp and assigns it to the BaseResp field.
func (o *ImportsSupportedDataTypesResp) SetBaseResp(v BaseResp) {
	o.BaseResp = &v
}

func (o ImportsSupportedDataTypesResp) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportsSupportedDataTypesResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DataTypes) {
		toSerialize["data_types"] = o.DataTypes
	}
	if !IsNil(o.BaseResp) {
		toSerialize["base_resp"] = o.BaseResp
	}
	return toSerialize, nil
}

type NullableImportsSupportedDataTypesResp struct {
	value *ImportsSupportedDataTypesResp
	isSet bool
}

func (v NullableImportsSupportedDataTypesResp) Get() *ImportsSupportedDataTypesResp {
	return v.value
}

func (v *NullableImportsSupportedDataTypesResp) Set(val *ImportsSupportedDataTypesResp) {
	v.value = val
	v.isSet = true
}

func (v NullableImportsSupportedDataTypesResp) IsSet() bool {
	return v.isSet
}

func (v *NullableImportsSupportedDataTypesResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportsSupportedDataTypesResp(val *ImportsSupportedDataTypesResp) *NullableImportsSupportedDataTypesResp {
	return &NullableImportsSupportedDataTypesResp{value: val, isSet: true}
}

func (v NullableImportsSupportedDataTypesResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportsSupportedDataTypesResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
