/*
Import APIs for TiDB Cloud Serverless

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package consoleimportapi

import (
	"encoding/json"
)

// checks if the CSVFormat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CSVFormat{}

// CSVFormat struct for CSVFormat
type CSVFormat struct {
	// Separator of each value in CSV files. Default is ','.
	Separator *string `json:"separator,omitempty"`
	// Delimiter of string type variables in CSV files. Default is '\"'.
	Delimiter *string `json:"delimiter,omitempty"`
	// Import CSV files of the tables with header. Default is true.
	Header *bool `json:"header,omitempty"`
	// Whether the columns in CSV files can be null. Default is false.
	NotNull *bool `json:"not_null,omitempty"`
	// Representation of null values in CSV files. Default is \"\\N\".
	Null *string `json:"null,omitempty"`
	// Whether to escape backslashes in CSV files. Default is true.
	BackslashEscape *bool `json:"backslash_escape,omitempty"`
	// Whether to trim the last separator in CSV files. Default is false.
	TrimLastSeparator *bool `json:"trim_last_separator,omitempty"`
}

// NewCSVFormat instantiates a new CSVFormat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCSVFormat() *CSVFormat {
	this := CSVFormat{}
	return &this
}

// NewCSVFormatWithDefaults instantiates a new CSVFormat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCSVFormatWithDefaults() *CSVFormat {
	this := CSVFormat{}
	return &this
}

// GetSeparator returns the Separator field value if set, zero value otherwise.
func (o *CSVFormat) GetSeparator() string {
	if o == nil || IsNil(o.Separator) {
		var ret string
		return ret
	}
	return *o.Separator
}

// GetSeparatorOk returns a tuple with the Separator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSVFormat) GetSeparatorOk() (*string, bool) {
	if o == nil || IsNil(o.Separator) {
		return nil, false
	}
	return o.Separator, true
}

// HasSeparator returns a boolean if a field has been set.
func (o *CSVFormat) HasSeparator() bool {
	if o != nil && !IsNil(o.Separator) {
		return true
	}

	return false
}

// SetSeparator gets a reference to the given string and assigns it to the Separator field.
func (o *CSVFormat) SetSeparator(v string) {
	o.Separator = &v
}

// GetDelimiter returns the Delimiter field value if set, zero value otherwise.
func (o *CSVFormat) GetDelimiter() string {
	if o == nil || IsNil(o.Delimiter) {
		var ret string
		return ret
	}
	return *o.Delimiter
}

// GetDelimiterOk returns a tuple with the Delimiter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSVFormat) GetDelimiterOk() (*string, bool) {
	if o == nil || IsNil(o.Delimiter) {
		return nil, false
	}
	return o.Delimiter, true
}

// HasDelimiter returns a boolean if a field has been set.
func (o *CSVFormat) HasDelimiter() bool {
	if o != nil && !IsNil(o.Delimiter) {
		return true
	}

	return false
}

// SetDelimiter gets a reference to the given string and assigns it to the Delimiter field.
func (o *CSVFormat) SetDelimiter(v string) {
	o.Delimiter = &v
}

// GetHeader returns the Header field value if set, zero value otherwise.
func (o *CSVFormat) GetHeader() bool {
	if o == nil || IsNil(o.Header) {
		var ret bool
		return ret
	}
	return *o.Header
}

// GetHeaderOk returns a tuple with the Header field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSVFormat) GetHeaderOk() (*bool, bool) {
	if o == nil || IsNil(o.Header) {
		return nil, false
	}
	return o.Header, true
}

// HasHeader returns a boolean if a field has been set.
func (o *CSVFormat) HasHeader() bool {
	if o != nil && !IsNil(o.Header) {
		return true
	}

	return false
}

// SetHeader gets a reference to the given bool and assigns it to the Header field.
func (o *CSVFormat) SetHeader(v bool) {
	o.Header = &v
}

// GetNotNull returns the NotNull field value if set, zero value otherwise.
func (o *CSVFormat) GetNotNull() bool {
	if o == nil || IsNil(o.NotNull) {
		var ret bool
		return ret
	}
	return *o.NotNull
}

// GetNotNullOk returns a tuple with the NotNull field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSVFormat) GetNotNullOk() (*bool, bool) {
	if o == nil || IsNil(o.NotNull) {
		return nil, false
	}
	return o.NotNull, true
}

// HasNotNull returns a boolean if a field has been set.
func (o *CSVFormat) HasNotNull() bool {
	if o != nil && !IsNil(o.NotNull) {
		return true
	}

	return false
}

// SetNotNull gets a reference to the given bool and assigns it to the NotNull field.
func (o *CSVFormat) SetNotNull(v bool) {
	o.NotNull = &v
}

// GetNull returns the Null field value if set, zero value otherwise.
func (o *CSVFormat) GetNull() string {
	if o == nil || IsNil(o.Null) {
		var ret string
		return ret
	}
	return *o.Null
}

// GetNullOk returns a tuple with the Null field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSVFormat) GetNullOk() (*string, bool) {
	if o == nil || IsNil(o.Null) {
		return nil, false
	}
	return o.Null, true
}

// HasNull returns a boolean if a field has been set.
func (o *CSVFormat) HasNull() bool {
	if o != nil && !IsNil(o.Null) {
		return true
	}

	return false
}

// SetNull gets a reference to the given string and assigns it to the Null field.
func (o *CSVFormat) SetNull(v string) {
	o.Null = &v
}

// GetBackslashEscape returns the BackslashEscape field value if set, zero value otherwise.
func (o *CSVFormat) GetBackslashEscape() bool {
	if o == nil || IsNil(o.BackslashEscape) {
		var ret bool
		return ret
	}
	return *o.BackslashEscape
}

// GetBackslashEscapeOk returns a tuple with the BackslashEscape field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSVFormat) GetBackslashEscapeOk() (*bool, bool) {
	if o == nil || IsNil(o.BackslashEscape) {
		return nil, false
	}
	return o.BackslashEscape, true
}

// HasBackslashEscape returns a boolean if a field has been set.
func (o *CSVFormat) HasBackslashEscape() bool {
	if o != nil && !IsNil(o.BackslashEscape) {
		return true
	}

	return false
}

// SetBackslashEscape gets a reference to the given bool and assigns it to the BackslashEscape field.
func (o *CSVFormat) SetBackslashEscape(v bool) {
	o.BackslashEscape = &v
}

// GetTrimLastSeparator returns the TrimLastSeparator field value if set, zero value otherwise.
func (o *CSVFormat) GetTrimLastSeparator() bool {
	if o == nil || IsNil(o.TrimLastSeparator) {
		var ret bool
		return ret
	}
	return *o.TrimLastSeparator
}

// GetTrimLastSeparatorOk returns a tuple with the TrimLastSeparator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSVFormat) GetTrimLastSeparatorOk() (*bool, bool) {
	if o == nil || IsNil(o.TrimLastSeparator) {
		return nil, false
	}
	return o.TrimLastSeparator, true
}

// HasTrimLastSeparator returns a boolean if a field has been set.
func (o *CSVFormat) HasTrimLastSeparator() bool {
	if o != nil && !IsNil(o.TrimLastSeparator) {
		return true
	}

	return false
}

// SetTrimLastSeparator gets a reference to the given bool and assigns it to the TrimLastSeparator field.
func (o *CSVFormat) SetTrimLastSeparator(v bool) {
	o.TrimLastSeparator = &v
}

func (o CSVFormat) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CSVFormat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Separator) {
		toSerialize["separator"] = o.Separator
	}
	if !IsNil(o.Delimiter) {
		toSerialize["delimiter"] = o.Delimiter
	}
	if !IsNil(o.Header) {
		toSerialize["header"] = o.Header
	}
	if !IsNil(o.NotNull) {
		toSerialize["not_null"] = o.NotNull
	}
	if !IsNil(o.Null) {
		toSerialize["null"] = o.Null
	}
	if !IsNil(o.BackslashEscape) {
		toSerialize["backslash_escape"] = o.BackslashEscape
	}
	if !IsNil(o.TrimLastSeparator) {
		toSerialize["trim_last_separator"] = o.TrimLastSeparator
	}
	return toSerialize, nil
}

type NullableCSVFormat struct {
	value *CSVFormat
	isSet bool
}

func (v NullableCSVFormat) Get() *CSVFormat {
	return v.value
}

func (v *NullableCSVFormat) Set(val *CSVFormat) {
	v.value = val
	v.isSet = true
}

func (v NullableCSVFormat) IsSet() bool {
	return v.isSet
}

func (v *NullableCSVFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCSVFormat(val *CSVFormat) *NullableCSVFormat {
	return &NullableCSVFormat{value: val, isSet: true}
}

func (v NullableCSVFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCSVFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
