/*
Import APIs for TiDB Cloud Serverless

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package consoleimportapi

import (
	"encoding/json"
)

// checks if the BaseResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseResp{}

// BaseResp struct for BaseResp
type BaseResp struct {
	Tags    *map[string]string `json:"tags,omitempty"`
	ErrCode *string            `json:"err_code,omitempty"`
	ErrMsg  *string            `json:"err_msg,omitempty"`
}

// NewBaseResp instantiates a new BaseResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseResp() *BaseResp {
	this := BaseResp{}
	return &this
}

// NewBaseRespWithDefaults instantiates a new BaseResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseRespWithDefaults() *BaseResp {
	this := BaseResp{}
	return &this
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *BaseResp) GetTags() map[string]string {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseResp) GetTagsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *BaseResp) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]string and assigns it to the Tags field.
func (o *BaseResp) SetTags(v map[string]string) {
	o.Tags = &v
}

// GetErrCode returns the ErrCode field value if set, zero value otherwise.
func (o *BaseResp) GetErrCode() string {
	if o == nil || IsNil(o.ErrCode) {
		var ret string
		return ret
	}
	return *o.ErrCode
}

// GetErrCodeOk returns a tuple with the ErrCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseResp) GetErrCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ErrCode) {
		return nil, false
	}
	return o.ErrCode, true
}

// HasErrCode returns a boolean if a field has been set.
func (o *BaseResp) HasErrCode() bool {
	if o != nil && !IsNil(o.ErrCode) {
		return true
	}

	return false
}

// SetErrCode gets a reference to the given string and assigns it to the ErrCode field.
func (o *BaseResp) SetErrCode(v string) {
	o.ErrCode = &v
}

// GetErrMsg returns the ErrMsg field value if set, zero value otherwise.
func (o *BaseResp) GetErrMsg() string {
	if o == nil || IsNil(o.ErrMsg) {
		var ret string
		return ret
	}
	return *o.ErrMsg
}

// GetErrMsgOk returns a tuple with the ErrMsg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseResp) GetErrMsgOk() (*string, bool) {
	if o == nil || IsNil(o.ErrMsg) {
		return nil, false
	}
	return o.ErrMsg, true
}

// HasErrMsg returns a boolean if a field has been set.
func (o *BaseResp) HasErrMsg() bool {
	if o != nil && !IsNil(o.ErrMsg) {
		return true
	}

	return false
}

// SetErrMsg gets a reference to the given string and assigns it to the ErrMsg field.
func (o *BaseResp) SetErrMsg(v string) {
	o.ErrMsg = &v
}

func (o BaseResp) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.ErrCode) {
		toSerialize["err_code"] = o.ErrCode
	}
	if !IsNil(o.ErrMsg) {
		toSerialize["err_msg"] = o.ErrMsg
	}
	return toSerialize, nil
}

type NullableBaseResp struct {
	value *BaseResp
	isSet bool
}

func (v NullableBaseResp) Get() *BaseResp {
	return v.value
}

func (v *NullableBaseResp) Set(val *BaseResp) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseResp) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseResp(val *BaseResp) *NullableBaseResp {
	return &NullableBaseResp{value: val, isSet: true}
}

func (v NullableBaseResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
