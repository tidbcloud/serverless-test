/*
Import APIs for TiDB Cloud Serverless

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package consoleimportapi

import (
	"encoding/json"
)

// checks if the ImportTargetTableInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportTargetTableInfo{}

// ImportTargetTableInfo struct for ImportTargetTableInfo
type ImportTargetTableInfo struct {
	TargetTable *ConsoleTable `json:"target_table,omitempty"`
	// If the custom_file is empty, will use the default rule to import data.
	CustomFile *string `json:"custom_file,omitempty"`
}

// NewImportTargetTableInfo instantiates a new ImportTargetTableInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportTargetTableInfo() *ImportTargetTableInfo {
	this := ImportTargetTableInfo{}
	return &this
}

// NewImportTargetTableInfoWithDefaults instantiates a new ImportTargetTableInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportTargetTableInfoWithDefaults() *ImportTargetTableInfo {
	this := ImportTargetTableInfo{}
	return &this
}

// GetTargetTable returns the TargetTable field value if set, zero value otherwise.
func (o *ImportTargetTableInfo) GetTargetTable() ConsoleTable {
	if o == nil || IsNil(o.TargetTable) {
		var ret ConsoleTable
		return ret
	}
	return *o.TargetTable
}

// GetTargetTableOk returns a tuple with the TargetTable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportTargetTableInfo) GetTargetTableOk() (*ConsoleTable, bool) {
	if o == nil || IsNil(o.TargetTable) {
		return nil, false
	}
	return o.TargetTable, true
}

// HasTargetTable returns a boolean if a field has been set.
func (o *ImportTargetTableInfo) HasTargetTable() bool {
	if o != nil && !IsNil(o.TargetTable) {
		return true
	}

	return false
}

// SetTargetTable gets a reference to the given ConsoleTable and assigns it to the TargetTable field.
func (o *ImportTargetTableInfo) SetTargetTable(v ConsoleTable) {
	o.TargetTable = &v
}

// GetCustomFile returns the CustomFile field value if set, zero value otherwise.
func (o *ImportTargetTableInfo) GetCustomFile() string {
	if o == nil || IsNil(o.CustomFile) {
		var ret string
		return ret
	}
	return *o.CustomFile
}

// GetCustomFileOk returns a tuple with the CustomFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportTargetTableInfo) GetCustomFileOk() (*string, bool) {
	if o == nil || IsNil(o.CustomFile) {
		return nil, false
	}
	return o.CustomFile, true
}

// HasCustomFile returns a boolean if a field has been set.
func (o *ImportTargetTableInfo) HasCustomFile() bool {
	if o != nil && !IsNil(o.CustomFile) {
		return true
	}

	return false
}

// SetCustomFile gets a reference to the given string and assigns it to the CustomFile field.
func (o *ImportTargetTableInfo) SetCustomFile(v string) {
	o.CustomFile = &v
}

func (o ImportTargetTableInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportTargetTableInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TargetTable) {
		toSerialize["target_table"] = o.TargetTable
	}
	if !IsNil(o.CustomFile) {
		toSerialize["custom_file"] = o.CustomFile
	}
	return toSerialize, nil
}

type NullableImportTargetTableInfo struct {
	value *ImportTargetTableInfo
	isSet bool
}

func (v NullableImportTargetTableInfo) Get() *ImportTargetTableInfo {
	return v.value
}

func (v *NullableImportTargetTableInfo) Set(val *ImportTargetTableInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableImportTargetTableInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableImportTargetTableInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportTargetTableInfo(val *ImportTargetTableInfo) *NullableImportTargetTableInfo {
	return &NullableImportTargetTableInfo{value: val, isSet: true}
}

func (v NullableImportTargetTableInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportTargetTableInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
