/*
Import APIs for TiDB Cloud Serverless

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package consoleimportapi

import (
	"encoding/json"
)

// checks if the ConsoleImportTableCompletionInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConsoleImportTableCompletionInfo{}

// ConsoleImportTableCompletionInfo struct for ConsoleImportTableCompletionInfo
type ConsoleImportTableCompletionInfo struct {
	// The table name.
	TableName *string                                 `json:"table_name,omitempty"`
	Result    *ConsoleImportTableCompletionInfoResult `json:"result,omitempty"`
	// The message of the table import.
	Message *string `json:"message,omitempty"`
	// The data file pattern.
	DataFilePattern *string `json:"data_file_pattern,omitempty"`
}

// NewConsoleImportTableCompletionInfo instantiates a new ConsoleImportTableCompletionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsoleImportTableCompletionInfo() *ConsoleImportTableCompletionInfo {
	this := ConsoleImportTableCompletionInfo{}
	return &this
}

// NewConsoleImportTableCompletionInfoWithDefaults instantiates a new ConsoleImportTableCompletionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsoleImportTableCompletionInfoWithDefaults() *ConsoleImportTableCompletionInfo {
	this := ConsoleImportTableCompletionInfo{}
	return &this
}

// GetTableName returns the TableName field value if set, zero value otherwise.
func (o *ConsoleImportTableCompletionInfo) GetTableName() string {
	if o == nil || IsNil(o.TableName) {
		var ret string
		return ret
	}
	return *o.TableName
}

// GetTableNameOk returns a tuple with the TableName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsoleImportTableCompletionInfo) GetTableNameOk() (*string, bool) {
	if o == nil || IsNil(o.TableName) {
		return nil, false
	}
	return o.TableName, true
}

// HasTableName returns a boolean if a field has been set.
func (o *ConsoleImportTableCompletionInfo) HasTableName() bool {
	if o != nil && !IsNil(o.TableName) {
		return true
	}

	return false
}

// SetTableName gets a reference to the given string and assigns it to the TableName field.
func (o *ConsoleImportTableCompletionInfo) SetTableName(v string) {
	o.TableName = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *ConsoleImportTableCompletionInfo) GetResult() ConsoleImportTableCompletionInfoResult {
	if o == nil || IsNil(o.Result) {
		var ret ConsoleImportTableCompletionInfoResult
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsoleImportTableCompletionInfo) GetResultOk() (*ConsoleImportTableCompletionInfoResult, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *ConsoleImportTableCompletionInfo) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given ConsoleImportTableCompletionInfoResult and assigns it to the Result field.
func (o *ConsoleImportTableCompletionInfo) SetResult(v ConsoleImportTableCompletionInfoResult) {
	o.Result = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ConsoleImportTableCompletionInfo) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsoleImportTableCompletionInfo) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ConsoleImportTableCompletionInfo) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ConsoleImportTableCompletionInfo) SetMessage(v string) {
	o.Message = &v
}

// GetDataFilePattern returns the DataFilePattern field value if set, zero value otherwise.
func (o *ConsoleImportTableCompletionInfo) GetDataFilePattern() string {
	if o == nil || IsNil(o.DataFilePattern) {
		var ret string
		return ret
	}
	return *o.DataFilePattern
}

// GetDataFilePatternOk returns a tuple with the DataFilePattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsoleImportTableCompletionInfo) GetDataFilePatternOk() (*string, bool) {
	if o == nil || IsNil(o.DataFilePattern) {
		return nil, false
	}
	return o.DataFilePattern, true
}

// HasDataFilePattern returns a boolean if a field has been set.
func (o *ConsoleImportTableCompletionInfo) HasDataFilePattern() bool {
	if o != nil && !IsNil(o.DataFilePattern) {
		return true
	}

	return false
}

// SetDataFilePattern gets a reference to the given string and assigns it to the DataFilePattern field.
func (o *ConsoleImportTableCompletionInfo) SetDataFilePattern(v string) {
	o.DataFilePattern = &v
}

func (o ConsoleImportTableCompletionInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConsoleImportTableCompletionInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TableName) {
		toSerialize["table_name"] = o.TableName
	}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.DataFilePattern) {
		toSerialize["data_file_pattern"] = o.DataFilePattern
	}
	return toSerialize, nil
}

type NullableConsoleImportTableCompletionInfo struct {
	value *ConsoleImportTableCompletionInfo
	isSet bool
}

func (v NullableConsoleImportTableCompletionInfo) Get() *ConsoleImportTableCompletionInfo {
	return v.value
}

func (v *NullableConsoleImportTableCompletionInfo) Set(val *ConsoleImportTableCompletionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableConsoleImportTableCompletionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableConsoleImportTableCompletionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsoleImportTableCompletionInfo(val *ConsoleImportTableCompletionInfo) *NullableConsoleImportTableCompletionInfo {
	return &NullableConsoleImportTableCompletionInfo{value: val, isSet: true}
}

func (v NullableConsoleImportTableCompletionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsoleImportTableCompletionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
