/*
Import APIs for TiDB Cloud Serverless

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package consoleimportapi

import (
	"encoding/json"
)

// checks if the FullTable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FullTable{}

// FullTable struct for FullTable
type FullTable struct {
	// The database name.
	DatabaseName *string `json:"database_name,omitempty"`
	// The table name.
	TableName *string `json:"table_name,omitempty"`
	// The headers of the table.
	RowHeaders []string `json:"row_headers,omitempty"`
	// The columns of the table.
	RowValues []Row `json:"row_values,omitempty"`
	// The data types of the columns.
	RowDataTypes []string `json:"row_data_types,omitempty"`
	// A boolean flag indicating whether each column is part of the primary key. True if the column is a primary key; false otherwise.
	ColumnIsPk    []bool `json:"column_is_pk,omitempty"`
	ColumnAutoGen []bool `json:"column_auto_gen,omitempty"`
}

// NewFullTable instantiates a new FullTable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFullTable() *FullTable {
	this := FullTable{}
	return &this
}

// NewFullTableWithDefaults instantiates a new FullTable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFullTableWithDefaults() *FullTable {
	this := FullTable{}
	return &this
}

// GetDatabaseName returns the DatabaseName field value if set, zero value otherwise.
func (o *FullTable) GetDatabaseName() string {
	if o == nil || IsNil(o.DatabaseName) {
		var ret string
		return ret
	}
	return *o.DatabaseName
}

// GetDatabaseNameOk returns a tuple with the DatabaseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FullTable) GetDatabaseNameOk() (*string, bool) {
	if o == nil || IsNil(o.DatabaseName) {
		return nil, false
	}
	return o.DatabaseName, true
}

// HasDatabaseName returns a boolean if a field has been set.
func (o *FullTable) HasDatabaseName() bool {
	if o != nil && !IsNil(o.DatabaseName) {
		return true
	}

	return false
}

// SetDatabaseName gets a reference to the given string and assigns it to the DatabaseName field.
func (o *FullTable) SetDatabaseName(v string) {
	o.DatabaseName = &v
}

// GetTableName returns the TableName field value if set, zero value otherwise.
func (o *FullTable) GetTableName() string {
	if o == nil || IsNil(o.TableName) {
		var ret string
		return ret
	}
	return *o.TableName
}

// GetTableNameOk returns a tuple with the TableName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FullTable) GetTableNameOk() (*string, bool) {
	if o == nil || IsNil(o.TableName) {
		return nil, false
	}
	return o.TableName, true
}

// HasTableName returns a boolean if a field has been set.
func (o *FullTable) HasTableName() bool {
	if o != nil && !IsNil(o.TableName) {
		return true
	}

	return false
}

// SetTableName gets a reference to the given string and assigns it to the TableName field.
func (o *FullTable) SetTableName(v string) {
	o.TableName = &v
}

// GetRowHeaders returns the RowHeaders field value if set, zero value otherwise.
func (o *FullTable) GetRowHeaders() []string {
	if o == nil || IsNil(o.RowHeaders) {
		var ret []string
		return ret
	}
	return o.RowHeaders
}

// GetRowHeadersOk returns a tuple with the RowHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FullTable) GetRowHeadersOk() ([]string, bool) {
	if o == nil || IsNil(o.RowHeaders) {
		return nil, false
	}
	return o.RowHeaders, true
}

// HasRowHeaders returns a boolean if a field has been set.
func (o *FullTable) HasRowHeaders() bool {
	if o != nil && !IsNil(o.RowHeaders) {
		return true
	}

	return false
}

// SetRowHeaders gets a reference to the given []string and assigns it to the RowHeaders field.
func (o *FullTable) SetRowHeaders(v []string) {
	o.RowHeaders = v
}

// GetRowValues returns the RowValues field value if set, zero value otherwise.
func (o *FullTable) GetRowValues() []Row {
	if o == nil || IsNil(o.RowValues) {
		var ret []Row
		return ret
	}
	return o.RowValues
}

// GetRowValuesOk returns a tuple with the RowValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FullTable) GetRowValuesOk() ([]Row, bool) {
	if o == nil || IsNil(o.RowValues) {
		return nil, false
	}
	return o.RowValues, true
}

// HasRowValues returns a boolean if a field has been set.
func (o *FullTable) HasRowValues() bool {
	if o != nil && !IsNil(o.RowValues) {
		return true
	}

	return false
}

// SetRowValues gets a reference to the given []Row and assigns it to the RowValues field.
func (o *FullTable) SetRowValues(v []Row) {
	o.RowValues = v
}

// GetRowDataTypes returns the RowDataTypes field value if set, zero value otherwise.
func (o *FullTable) GetRowDataTypes() []string {
	if o == nil || IsNil(o.RowDataTypes) {
		var ret []string
		return ret
	}
	return o.RowDataTypes
}

// GetRowDataTypesOk returns a tuple with the RowDataTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FullTable) GetRowDataTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.RowDataTypes) {
		return nil, false
	}
	return o.RowDataTypes, true
}

// HasRowDataTypes returns a boolean if a field has been set.
func (o *FullTable) HasRowDataTypes() bool {
	if o != nil && !IsNil(o.RowDataTypes) {
		return true
	}

	return false
}

// SetRowDataTypes gets a reference to the given []string and assigns it to the RowDataTypes field.
func (o *FullTable) SetRowDataTypes(v []string) {
	o.RowDataTypes = v
}

// GetColumnIsPk returns the ColumnIsPk field value if set, zero value otherwise.
func (o *FullTable) GetColumnIsPk() []bool {
	if o == nil || IsNil(o.ColumnIsPk) {
		var ret []bool
		return ret
	}
	return o.ColumnIsPk
}

// GetColumnIsPkOk returns a tuple with the ColumnIsPk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FullTable) GetColumnIsPkOk() ([]bool, bool) {
	if o == nil || IsNil(o.ColumnIsPk) {
		return nil, false
	}
	return o.ColumnIsPk, true
}

// HasColumnIsPk returns a boolean if a field has been set.
func (o *FullTable) HasColumnIsPk() bool {
	if o != nil && !IsNil(o.ColumnIsPk) {
		return true
	}

	return false
}

// SetColumnIsPk gets a reference to the given []bool and assigns it to the ColumnIsPk field.
func (o *FullTable) SetColumnIsPk(v []bool) {
	o.ColumnIsPk = v
}

// GetColumnAutoGen returns the ColumnAutoGen field value if set, zero value otherwise.
func (o *FullTable) GetColumnAutoGen() []bool {
	if o == nil || IsNil(o.ColumnAutoGen) {
		var ret []bool
		return ret
	}
	return o.ColumnAutoGen
}

// GetColumnAutoGenOk returns a tuple with the ColumnAutoGen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FullTable) GetColumnAutoGenOk() ([]bool, bool) {
	if o == nil || IsNil(o.ColumnAutoGen) {
		return nil, false
	}
	return o.ColumnAutoGen, true
}

// HasColumnAutoGen returns a boolean if a field has been set.
func (o *FullTable) HasColumnAutoGen() bool {
	if o != nil && !IsNil(o.ColumnAutoGen) {
		return true
	}

	return false
}

// SetColumnAutoGen gets a reference to the given []bool and assigns it to the ColumnAutoGen field.
func (o *FullTable) SetColumnAutoGen(v []bool) {
	o.ColumnAutoGen = v
}

func (o FullTable) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FullTable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DatabaseName) {
		toSerialize["database_name"] = o.DatabaseName
	}
	if !IsNil(o.TableName) {
		toSerialize["table_name"] = o.TableName
	}
	if !IsNil(o.RowHeaders) {
		toSerialize["row_headers"] = o.RowHeaders
	}
	if !IsNil(o.RowValues) {
		toSerialize["row_values"] = o.RowValues
	}
	if !IsNil(o.RowDataTypes) {
		toSerialize["row_data_types"] = o.RowDataTypes
	}
	if !IsNil(o.ColumnIsPk) {
		toSerialize["column_is_pk"] = o.ColumnIsPk
	}
	if !IsNil(o.ColumnAutoGen) {
		toSerialize["column_auto_gen"] = o.ColumnAutoGen
	}
	return toSerialize, nil
}

type NullableFullTable struct {
	value *FullTable
	isSet bool
}

func (v NullableFullTable) Get() *FullTable {
	return v.value
}

func (v *NullableFullTable) Set(val *FullTable) {
	v.value = val
	v.isSet = true
}

func (v NullableFullTable) IsSet() bool {
	return v.isSet
}

func (v *NullableFullTable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFullTable(val *FullTable) *NullableFullTable {
	return &NullableFullTable{value: val, isSet: true}
}

func (v NullableFullTable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFullTable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
