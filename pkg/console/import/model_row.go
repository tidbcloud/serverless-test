/*
Import APIs for TiDB Cloud Serverless

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package consoleimportapi

import (
	"encoding/json"
)

// checks if the Row type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Row{}

// Row struct for Row
type Row struct {
	// The values of the row.
	ColumnValues []string `json:"column_values,omitempty"`
}

// NewRow instantiates a new Row object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRow() *Row {
	this := Row{}
	return &this
}

// NewRowWithDefaults instantiates a new Row object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRowWithDefaults() *Row {
	this := Row{}
	return &this
}

// GetColumnValues returns the ColumnValues field value if set, zero value otherwise.
func (o *Row) GetColumnValues() []string {
	if o == nil || IsNil(o.ColumnValues) {
		var ret []string
		return ret
	}
	return o.ColumnValues
}

// GetColumnValuesOk returns a tuple with the ColumnValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Row) GetColumnValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.ColumnValues) {
		return nil, false
	}
	return o.ColumnValues, true
}

// HasColumnValues returns a boolean if a field has been set.
func (o *Row) HasColumnValues() bool {
	if o != nil && !IsNil(o.ColumnValues) {
		return true
	}

	return false
}

// SetColumnValues gets a reference to the given []string and assigns it to the ColumnValues field.
func (o *Row) SetColumnValues(v []string) {
	o.ColumnValues = v
}

func (o Row) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Row) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ColumnValues) {
		toSerialize["column_values"] = o.ColumnValues
	}
	return toSerialize, nil
}

type NullableRow struct {
	value *Row
	isSet bool
}

func (v NullableRow) Get() *Row {
	return v.value
}

func (v *NullableRow) Set(val *Row) {
	v.value = val
	v.isSet = true
}

func (v NullableRow) IsSet() bool {
	return v.isSet
}

func (v *NullableRow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRow(val *Row) *NullableRow {
	return &NullableRow{value: val, isSet: true}
}

func (v NullableRow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
