/*
Import APIs for TiDB Cloud Serverless

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package consoleimportapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ConsoleImportServiceCreateImportBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConsoleImportServiceCreateImportBody{}

// ConsoleImportServiceCreateImportBody struct for ConsoleImportServiceCreateImportBody
type ConsoleImportServiceCreateImportBody struct {
	ImportOptions ImportOptions `json:"import_options"`
	Source        ImportSource  `json:"source"`
	// Optional. The creator identity. Only use with the RPC call from the dataflow-svc v1beta OPENAPI.
	Creator *string `json:"creator,omitempty"`
}

type _ConsoleImportServiceCreateImportBody ConsoleImportServiceCreateImportBody

// NewConsoleImportServiceCreateImportBody instantiates a new ConsoleImportServiceCreateImportBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsoleImportServiceCreateImportBody(importOptions ImportOptions, source ImportSource) *ConsoleImportServiceCreateImportBody {
	this := ConsoleImportServiceCreateImportBody{}
	this.ImportOptions = importOptions
	this.Source = source
	return &this
}

// NewConsoleImportServiceCreateImportBodyWithDefaults instantiates a new ConsoleImportServiceCreateImportBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsoleImportServiceCreateImportBodyWithDefaults() *ConsoleImportServiceCreateImportBody {
	this := ConsoleImportServiceCreateImportBody{}
	return &this
}

// GetImportOptions returns the ImportOptions field value
func (o *ConsoleImportServiceCreateImportBody) GetImportOptions() ImportOptions {
	if o == nil {
		var ret ImportOptions
		return ret
	}

	return o.ImportOptions
}

// GetImportOptionsOk returns a tuple with the ImportOptions field value
// and a boolean to check if the value has been set.
func (o *ConsoleImportServiceCreateImportBody) GetImportOptionsOk() (*ImportOptions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImportOptions, true
}

// SetImportOptions sets field value
func (o *ConsoleImportServiceCreateImportBody) SetImportOptions(v ImportOptions) {
	o.ImportOptions = v
}

// GetSource returns the Source field value
func (o *ConsoleImportServiceCreateImportBody) GetSource() ImportSource {
	if o == nil {
		var ret ImportSource
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *ConsoleImportServiceCreateImportBody) GetSourceOk() (*ImportSource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *ConsoleImportServiceCreateImportBody) SetSource(v ImportSource) {
	o.Source = v
}

// GetCreator returns the Creator field value if set, zero value otherwise.
func (o *ConsoleImportServiceCreateImportBody) GetCreator() string {
	if o == nil || IsNil(o.Creator) {
		var ret string
		return ret
	}
	return *o.Creator
}

// GetCreatorOk returns a tuple with the Creator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsoleImportServiceCreateImportBody) GetCreatorOk() (*string, bool) {
	if o == nil || IsNil(o.Creator) {
		return nil, false
	}
	return o.Creator, true
}

// HasCreator returns a boolean if a field has been set.
func (o *ConsoleImportServiceCreateImportBody) HasCreator() bool {
	if o != nil && !IsNil(o.Creator) {
		return true
	}

	return false
}

// SetCreator gets a reference to the given string and assigns it to the Creator field.
func (o *ConsoleImportServiceCreateImportBody) SetCreator(v string) {
	o.Creator = &v
}

func (o ConsoleImportServiceCreateImportBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConsoleImportServiceCreateImportBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["import_options"] = o.ImportOptions
	toSerialize["source"] = o.Source
	if !IsNil(o.Creator) {
		toSerialize["creator"] = o.Creator
	}
	return toSerialize, nil
}

func (o *ConsoleImportServiceCreateImportBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"import_options",
		"source",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConsoleImportServiceCreateImportBody := _ConsoleImportServiceCreateImportBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConsoleImportServiceCreateImportBody)

	if err != nil {
		return err
	}

	*o = ConsoleImportServiceCreateImportBody(varConsoleImportServiceCreateImportBody)

	return err
}

type NullableConsoleImportServiceCreateImportBody struct {
	value *ConsoleImportServiceCreateImportBody
	isSet bool
}

func (v NullableConsoleImportServiceCreateImportBody) Get() *ConsoleImportServiceCreateImportBody {
	return v.value
}

func (v *NullableConsoleImportServiceCreateImportBody) Set(val *ConsoleImportServiceCreateImportBody) {
	v.value = val
	v.isSet = true
}

func (v NullableConsoleImportServiceCreateImportBody) IsSet() bool {
	return v.isSet
}

func (v *NullableConsoleImportServiceCreateImportBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsoleImportServiceCreateImportBody(val *ConsoleImportServiceCreateImportBody) *NullableConsoleImportServiceCreateImportBody {
	return &NullableConsoleImportServiceCreateImportBody{value: val, isSet: true}
}

func (v NullableConsoleImportServiceCreateImportBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsoleImportServiceCreateImportBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
