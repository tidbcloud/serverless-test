/*
Import APIs for TiDB Cloud Serverless

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package consoleimportapi

import (
	"encoding/json"
	"fmt"
)

// ImportPrecheckStatusTypeEnum  - COMPLETED: The precheck is completed.  - TIMEOUT: The precheck is timeout and return partial result.  - TRUNCATED: The precheck result is truncated.
type ImportPrecheckStatusTypeEnum string

// List of ImportPrecheckStatusType.Enum
const (
	IMPORTPRECHECKSTATUSTYPEENUM_COMPLETED ImportPrecheckStatusTypeEnum = "COMPLETED"
	IMPORTPRECHECKSTATUSTYPEENUM_TIMEOUT   ImportPrecheckStatusTypeEnum = "TIMEOUT"
	IMPORTPRECHECKSTATUSTYPEENUM_TRUNCATED ImportPrecheckStatusTypeEnum = "TRUNCATED"
)

// All allowed values of ImportPrecheckStatusTypeEnum enum
var AllowedImportPrecheckStatusTypeEnumEnumValues = []ImportPrecheckStatusTypeEnum{
	"COMPLETED",
	"TIMEOUT",
	"TRUNCATED",
}

func (v *ImportPrecheckStatusTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ImportPrecheckStatusTypeEnum(value)
	for _, existing := range AllowedImportPrecheckStatusTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ImportPrecheckStatusTypeEnum", value)
}

// NewImportPrecheckStatusTypeEnumFromValue returns a pointer to a valid ImportPrecheckStatusTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewImportPrecheckStatusTypeEnumFromValue(v string) (*ImportPrecheckStatusTypeEnum, error) {
	ev := ImportPrecheckStatusTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ImportPrecheckStatusTypeEnum: valid values are %v", v, AllowedImportPrecheckStatusTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ImportPrecheckStatusTypeEnum) IsValid() bool {
	for _, existing := range AllowedImportPrecheckStatusTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ImportPrecheckStatusType.Enum value
func (v ImportPrecheckStatusTypeEnum) Ptr() *ImportPrecheckStatusTypeEnum {
	return &v
}

type NullableImportPrecheckStatusTypeEnum struct {
	value *ImportPrecheckStatusTypeEnum
	isSet bool
}

func (v NullableImportPrecheckStatusTypeEnum) Get() *ImportPrecheckStatusTypeEnum {
	return v.value
}

func (v *NullableImportPrecheckStatusTypeEnum) Set(val *ImportPrecheckStatusTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableImportPrecheckStatusTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableImportPrecheckStatusTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportPrecheckStatusTypeEnum(val *ImportPrecheckStatusTypeEnum) *NullableImportPrecheckStatusTypeEnum {
	return &NullableImportPrecheckStatusTypeEnum{value: val, isSet: true}
}

func (v NullableImportPrecheckStatusTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportPrecheckStatusTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
