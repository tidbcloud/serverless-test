/*
Import APIs for TiDB Cloud Serverless

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package consoleimportapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ImportOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportOptions{}

// ImportOptions struct for ImportOptions
type ImportOptions struct {
	FileType  ImportFileTypeEnum `json:"file_type"`
	CsvFormat *CSVFormat         `json:"csv_format,omitempty"`
	// Optional. Only used in tutorial.
	NeedDropTable *bool `json:"need_drop_table,omitempty"`
	// Optional. The display name of the import.
	DisplayName *string `json:"display_name,omitempty"`
}

type _ImportOptions ImportOptions

// NewImportOptions instantiates a new ImportOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportOptions(fileType ImportFileTypeEnum) *ImportOptions {
	this := ImportOptions{}
	this.FileType = fileType
	return &this
}

// NewImportOptionsWithDefaults instantiates a new ImportOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportOptionsWithDefaults() *ImportOptions {
	this := ImportOptions{}
	return &this
}

// GetFileType returns the FileType field value
func (o *ImportOptions) GetFileType() ImportFileTypeEnum {
	if o == nil {
		var ret ImportFileTypeEnum
		return ret
	}

	return o.FileType
}

// GetFileTypeOk returns a tuple with the FileType field value
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetFileTypeOk() (*ImportFileTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileType, true
}

// SetFileType sets field value
func (o *ImportOptions) SetFileType(v ImportFileTypeEnum) {
	o.FileType = v
}

// GetCsvFormat returns the CsvFormat field value if set, zero value otherwise.
func (o *ImportOptions) GetCsvFormat() CSVFormat {
	if o == nil || IsNil(o.CsvFormat) {
		var ret CSVFormat
		return ret
	}
	return *o.CsvFormat
}

// GetCsvFormatOk returns a tuple with the CsvFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetCsvFormatOk() (*CSVFormat, bool) {
	if o == nil || IsNil(o.CsvFormat) {
		return nil, false
	}
	return o.CsvFormat, true
}

// HasCsvFormat returns a boolean if a field has been set.
func (o *ImportOptions) HasCsvFormat() bool {
	if o != nil && !IsNil(o.CsvFormat) {
		return true
	}

	return false
}

// SetCsvFormat gets a reference to the given CSVFormat and assigns it to the CsvFormat field.
func (o *ImportOptions) SetCsvFormat(v CSVFormat) {
	o.CsvFormat = &v
}

// GetNeedDropTable returns the NeedDropTable field value if set, zero value otherwise.
func (o *ImportOptions) GetNeedDropTable() bool {
	if o == nil || IsNil(o.NeedDropTable) {
		var ret bool
		return ret
	}
	return *o.NeedDropTable
}

// GetNeedDropTableOk returns a tuple with the NeedDropTable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetNeedDropTableOk() (*bool, bool) {
	if o == nil || IsNil(o.NeedDropTable) {
		return nil, false
	}
	return o.NeedDropTable, true
}

// HasNeedDropTable returns a boolean if a field has been set.
func (o *ImportOptions) HasNeedDropTable() bool {
	if o != nil && !IsNil(o.NeedDropTable) {
		return true
	}

	return false
}

// SetNeedDropTable gets a reference to the given bool and assigns it to the NeedDropTable field.
func (o *ImportOptions) SetNeedDropTable(v bool) {
	o.NeedDropTable = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ImportOptions) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ImportOptions) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *ImportOptions) SetDisplayName(v string) {
	o.DisplayName = &v
}

func (o ImportOptions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["file_type"] = o.FileType
	if !IsNil(o.CsvFormat) {
		toSerialize["csv_format"] = o.CsvFormat
	}
	if !IsNil(o.NeedDropTable) {
		toSerialize["need_drop_table"] = o.NeedDropTable
	}
	if !IsNil(o.DisplayName) {
		toSerialize["display_name"] = o.DisplayName
	}
	return toSerialize, nil
}

func (o *ImportOptions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"file_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImportOptions := _ImportOptions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImportOptions)

	if err != nil {
		return err
	}

	*o = ImportOptions(varImportOptions)

	return err
}

type NullableImportOptions struct {
	value *ImportOptions
	isSet bool
}

func (v NullableImportOptions) Get() *ImportOptions {
	return v.value
}

func (v *NullableImportOptions) Set(val *ImportOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableImportOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableImportOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportOptions(val *ImportOptions) *NullableImportOptions {
	return &NullableImportOptions{value: val, isSet: true}
}

func (v NullableImportOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
