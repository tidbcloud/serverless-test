/*
Import APIs for TiDB Cloud Serverless

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package consoleimportapi

import (
	"encoding/json"
)

// checks if the UploadResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UploadResponse{}

// UploadResponse struct for UploadResponse
type UploadResponse struct {
	// The URL to upload the file to.
	UploadUrl *string `json:"upload_url,omitempty"`
	// The ID of the upload.
	UploadId *string `json:"upload_id,omitempty"`
	// The `uint64` identifier for the upload, provided to ensure compatibility with the RPC call from the dataflow-svc v1beta OPENAPI.
	CompatibleId *string   `json:"compatible_id,omitempty"`
	BaseResp     *BaseResp `json:"base_resp,omitempty"`
}

// NewUploadResponse instantiates a new UploadResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadResponse() *UploadResponse {
	this := UploadResponse{}
	return &this
}

// NewUploadResponseWithDefaults instantiates a new UploadResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadResponseWithDefaults() *UploadResponse {
	this := UploadResponse{}
	return &this
}

// GetUploadUrl returns the UploadUrl field value if set, zero value otherwise.
func (o *UploadResponse) GetUploadUrl() string {
	if o == nil || IsNil(o.UploadUrl) {
		var ret string
		return ret
	}
	return *o.UploadUrl
}

// GetUploadUrlOk returns a tuple with the UploadUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadResponse) GetUploadUrlOk() (*string, bool) {
	if o == nil || IsNil(o.UploadUrl) {
		return nil, false
	}
	return o.UploadUrl, true
}

// HasUploadUrl returns a boolean if a field has been set.
func (o *UploadResponse) HasUploadUrl() bool {
	if o != nil && !IsNil(o.UploadUrl) {
		return true
	}

	return false
}

// SetUploadUrl gets a reference to the given string and assigns it to the UploadUrl field.
func (o *UploadResponse) SetUploadUrl(v string) {
	o.UploadUrl = &v
}

// GetUploadId returns the UploadId field value if set, zero value otherwise.
func (o *UploadResponse) GetUploadId() string {
	if o == nil || IsNil(o.UploadId) {
		var ret string
		return ret
	}
	return *o.UploadId
}

// GetUploadIdOk returns a tuple with the UploadId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadResponse) GetUploadIdOk() (*string, bool) {
	if o == nil || IsNil(o.UploadId) {
		return nil, false
	}
	return o.UploadId, true
}

// HasUploadId returns a boolean if a field has been set.
func (o *UploadResponse) HasUploadId() bool {
	if o != nil && !IsNil(o.UploadId) {
		return true
	}

	return false
}

// SetUploadId gets a reference to the given string and assigns it to the UploadId field.
func (o *UploadResponse) SetUploadId(v string) {
	o.UploadId = &v
}

// GetCompatibleId returns the CompatibleId field value if set, zero value otherwise.
func (o *UploadResponse) GetCompatibleId() string {
	if o == nil || IsNil(o.CompatibleId) {
		var ret string
		return ret
	}
	return *o.CompatibleId
}

// GetCompatibleIdOk returns a tuple with the CompatibleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadResponse) GetCompatibleIdOk() (*string, bool) {
	if o == nil || IsNil(o.CompatibleId) {
		return nil, false
	}
	return o.CompatibleId, true
}

// HasCompatibleId returns a boolean if a field has been set.
func (o *UploadResponse) HasCompatibleId() bool {
	if o != nil && !IsNil(o.CompatibleId) {
		return true
	}

	return false
}

// SetCompatibleId gets a reference to the given string and assigns it to the CompatibleId field.
func (o *UploadResponse) SetCompatibleId(v string) {
	o.CompatibleId = &v
}

// GetBaseResp returns the BaseResp field value if set, zero value otherwise.
func (o *UploadResponse) GetBaseResp() BaseResp {
	if o == nil || IsNil(o.BaseResp) {
		var ret BaseResp
		return ret
	}
	return *o.BaseResp
}

// GetBaseRespOk returns a tuple with the BaseResp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadResponse) GetBaseRespOk() (*BaseResp, bool) {
	if o == nil || IsNil(o.BaseResp) {
		return nil, false
	}
	return o.BaseResp, true
}

// HasBaseResp returns a boolean if a field has been set.
func (o *UploadResponse) HasBaseResp() bool {
	if o != nil && !IsNil(o.BaseResp) {
		return true
	}

	return false
}

// SetBaseResp gets a reference to the given BaseResp and assigns it to the BaseResp field.
func (o *UploadResponse) SetBaseResp(v BaseResp) {
	o.BaseResp = &v
}

func (o UploadResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UploadResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UploadUrl) {
		toSerialize["upload_url"] = o.UploadUrl
	}
	if !IsNil(o.UploadId) {
		toSerialize["upload_id"] = o.UploadId
	}
	if !IsNil(o.CompatibleId) {
		toSerialize["compatible_id"] = o.CompatibleId
	}
	if !IsNil(o.BaseResp) {
		toSerialize["base_resp"] = o.BaseResp
	}
	return toSerialize, nil
}

type NullableUploadResponse struct {
	value *UploadResponse
	isSet bool
}

func (v NullableUploadResponse) Get() *UploadResponse {
	return v.value
}

func (v *NullableUploadResponse) Set(val *UploadResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadResponse(val *UploadResponse) *NullableUploadResponse {
	return &NullableUploadResponse{value: val, isSet: true}
}

func (v NullableUploadResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
