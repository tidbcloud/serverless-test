/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CentralUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CentralUser{}

// CentralUser struct for CentralUser
type CentralUser struct {
	Id    string `json:"id"`
	Email string `json:"email"`
	Name  string `json:"name"`
}

type _CentralUser CentralUser

// NewCentralUser instantiates a new CentralUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCentralUser(id string, email string, name string) *CentralUser {
	this := CentralUser{}
	this.Id = id
	this.Email = email
	this.Name = name
	return &this
}

// NewCentralUserWithDefaults instantiates a new CentralUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCentralUserWithDefaults() *CentralUser {
	this := CentralUser{}
	return &this
}

// GetId returns the Id field value
func (o *CentralUser) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CentralUser) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CentralUser) SetId(v string) {
	o.Id = v
}

// GetEmail returns the Email field value
func (o *CentralUser) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *CentralUser) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *CentralUser) SetEmail(v string) {
	o.Email = v
}

// GetName returns the Name field value
func (o *CentralUser) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CentralUser) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CentralUser) SetName(v string) {
	o.Name = v
}

func (o CentralUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CentralUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["email"] = o.Email
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *CentralUser) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"email",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCentralUser := _CentralUser{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCentralUser)

	if err != nil {
		return err
	}

	*o = CentralUser(varCentralUser)

	return err
}

type NullableCentralUser struct {
	value *CentralUser
	isSet bool
}

func (v NullableCentralUser) Get() *CentralUser {
	return v.value
}

func (v *NullableCentralUser) Set(val *CentralUser) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralUser) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralUser(val *CentralUser) *NullableCentralUser {
	return &NullableCentralUser{value: val, isSet: true}
}

func (v NullableCentralUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
