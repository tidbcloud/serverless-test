/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CentralClusters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CentralClusters{}

// CentralClusters struct for CentralClusters
type CentralClusters struct {
	Total    int32            `json:"total"`
	Items    []CentralCluster `json:"items"`
	BaseResp *CentralBaseResp `json:"base_resp,omitempty"`
}

type _CentralClusters CentralClusters

// NewCentralClusters instantiates a new CentralClusters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCentralClusters(total int32, items []CentralCluster) *CentralClusters {
	this := CentralClusters{}
	this.Total = total
	this.Items = items
	return &this
}

// NewCentralClustersWithDefaults instantiates a new CentralClusters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCentralClustersWithDefaults() *CentralClusters {
	this := CentralClusters{}
	return &this
}

// GetTotal returns the Total field value
func (o *CentralClusters) GetTotal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *CentralClusters) GetTotalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *CentralClusters) SetTotal(v int32) {
	o.Total = v
}

// GetItems returns the Items field value
func (o *CentralClusters) GetItems() []CentralCluster {
	if o == nil {
		var ret []CentralCluster
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *CentralClusters) GetItemsOk() ([]CentralCluster, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *CentralClusters) SetItems(v []CentralCluster) {
	o.Items = v
}

// GetBaseResp returns the BaseResp field value if set, zero value otherwise.
func (o *CentralClusters) GetBaseResp() CentralBaseResp {
	if o == nil || IsNil(o.BaseResp) {
		var ret CentralBaseResp
		return ret
	}
	return *o.BaseResp
}

// GetBaseRespOk returns a tuple with the BaseResp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CentralClusters) GetBaseRespOk() (*CentralBaseResp, bool) {
	if o == nil || IsNil(o.BaseResp) {
		return nil, false
	}
	return o.BaseResp, true
}

// HasBaseResp returns a boolean if a field has been set.
func (o *CentralClusters) HasBaseResp() bool {
	if o != nil && !IsNil(o.BaseResp) {
		return true
	}

	return false
}

// SetBaseResp gets a reference to the given CentralBaseResp and assigns it to the BaseResp field.
func (o *CentralClusters) SetBaseResp(v CentralBaseResp) {
	o.BaseResp = &v
}

func (o CentralClusters) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CentralClusters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["total"] = o.Total
	toSerialize["items"] = o.Items
	if !IsNil(o.BaseResp) {
		toSerialize["base_resp"] = o.BaseResp
	}
	return toSerialize, nil
}

func (o *CentralClusters) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"total",
		"items",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCentralClusters := _CentralClusters{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCentralClusters)

	if err != nil {
		return err
	}

	*o = CentralClusters(varCentralClusters)

	return err
}

type NullableCentralClusters struct {
	value *CentralClusters
	isSet bool
}

func (v NullableCentralClusters) Get() *CentralClusters {
	return v.value
}

func (v *NullableCentralClusters) Set(val *CentralClusters) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralClusters) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralClusters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralClusters(val *CentralClusters) *NullableCentralClusters {
	return &NullableCentralClusters{value: val, isSet: true}
}

func (v NullableCentralClusters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralClusters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
