/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CentralTrafficFilterList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CentralTrafficFilterList{}

// CentralTrafficFilterList struct for CentralTrafficFilterList
type CentralTrafficFilterList struct {
	Cidrs []CentralTrafficFilter `json:"cidrs"`
	// disable public endpoint for accessing TiDB. set it to true if don't want to expose public endpoint.
	DisablePublicLb bool `json:"disable_public_lb"`
}

type _CentralTrafficFilterList CentralTrafficFilterList

// NewCentralTrafficFilterList instantiates a new CentralTrafficFilterList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCentralTrafficFilterList(cidrs []CentralTrafficFilter, disablePublicLb bool) *CentralTrafficFilterList {
	this := CentralTrafficFilterList{}
	this.Cidrs = cidrs
	this.DisablePublicLb = disablePublicLb
	return &this
}

// NewCentralTrafficFilterListWithDefaults instantiates a new CentralTrafficFilterList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCentralTrafficFilterListWithDefaults() *CentralTrafficFilterList {
	this := CentralTrafficFilterList{}
	return &this
}

// GetCidrs returns the Cidrs field value
func (o *CentralTrafficFilterList) GetCidrs() []CentralTrafficFilter {
	if o == nil {
		var ret []CentralTrafficFilter
		return ret
	}

	return o.Cidrs
}

// GetCidrsOk returns a tuple with the Cidrs field value
// and a boolean to check if the value has been set.
func (o *CentralTrafficFilterList) GetCidrsOk() ([]CentralTrafficFilter, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cidrs, true
}

// SetCidrs sets field value
func (o *CentralTrafficFilterList) SetCidrs(v []CentralTrafficFilter) {
	o.Cidrs = v
}

// GetDisablePublicLb returns the DisablePublicLb field value
func (o *CentralTrafficFilterList) GetDisablePublicLb() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DisablePublicLb
}

// GetDisablePublicLbOk returns a tuple with the DisablePublicLb field value
// and a boolean to check if the value has been set.
func (o *CentralTrafficFilterList) GetDisablePublicLbOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisablePublicLb, true
}

// SetDisablePublicLb sets field value
func (o *CentralTrafficFilterList) SetDisablePublicLb(v bool) {
	o.DisablePublicLb = v
}

func (o CentralTrafficFilterList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CentralTrafficFilterList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cidrs"] = o.Cidrs
	toSerialize["disable_public_lb"] = o.DisablePublicLb
	return toSerialize, nil
}

func (o *CentralTrafficFilterList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cidrs",
		"disable_public_lb",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCentralTrafficFilterList := _CentralTrafficFilterList{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCentralTrafficFilterList)

	if err != nil {
		return err
	}

	*o = CentralTrafficFilterList(varCentralTrafficFilterList)

	return err
}

type NullableCentralTrafficFilterList struct {
	value *CentralTrafficFilterList
	isSet bool
}

func (v NullableCentralTrafficFilterList) Get() *CentralTrafficFilterList {
	return v.value
}

func (v *NullableCentralTrafficFilterList) Set(val *CentralTrafficFilterList) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralTrafficFilterList) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralTrafficFilterList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralTrafficFilterList(val *CentralTrafficFilterList) *NullableCentralTrafficFilterList {
	return &NullableCentralTrafficFilterList{value: val, isSet: true}
}

func (v NullableCentralTrafficFilterList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralTrafficFilterList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
