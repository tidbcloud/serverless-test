/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CentralGcpVpcPeering type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CentralGcpVpcPeering{}

// CentralGcpVpcPeering struct for CentralGcpVpcPeering
type CentralGcpVpcPeering struct {
	Region            string  `json:"region"`
	NetworkName       string  `json:"network_name"`
	ProjectId         string  `json:"project_id"`
	TenantProjectId   string  `json:"tenant_project_id"`
	TenantNetworkName string  `json:"tenant_network_name"`
	Status            string  `json:"status"`
	VpcCidr           string  `json:"vpc_cidr"`
	Id                string  `json:"id"`
	TenantVpcCidr     *string `json:"tenant_vpc_cidr,omitempty"`
	RegionName        string  `json:"region_name"`
}

type _CentralGcpVpcPeering CentralGcpVpcPeering

// NewCentralGcpVpcPeering instantiates a new CentralGcpVpcPeering object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCentralGcpVpcPeering(region string, networkName string, projectId string, tenantProjectId string, tenantNetworkName string, status string, vpcCidr string, id string, regionName string) *CentralGcpVpcPeering {
	this := CentralGcpVpcPeering{}
	this.Region = region
	this.NetworkName = networkName
	this.ProjectId = projectId
	this.TenantProjectId = tenantProjectId
	this.TenantNetworkName = tenantNetworkName
	this.Status = status
	this.VpcCidr = vpcCidr
	this.Id = id
	this.RegionName = regionName
	return &this
}

// NewCentralGcpVpcPeeringWithDefaults instantiates a new CentralGcpVpcPeering object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCentralGcpVpcPeeringWithDefaults() *CentralGcpVpcPeering {
	this := CentralGcpVpcPeering{}
	return &this
}

// GetRegion returns the Region field value
func (o *CentralGcpVpcPeering) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *CentralGcpVpcPeering) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *CentralGcpVpcPeering) SetRegion(v string) {
	o.Region = v
}

// GetNetworkName returns the NetworkName field value
func (o *CentralGcpVpcPeering) GetNetworkName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NetworkName
}

// GetNetworkNameOk returns a tuple with the NetworkName field value
// and a boolean to check if the value has been set.
func (o *CentralGcpVpcPeering) GetNetworkNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkName, true
}

// SetNetworkName sets field value
func (o *CentralGcpVpcPeering) SetNetworkName(v string) {
	o.NetworkName = v
}

// GetProjectId returns the ProjectId field value
func (o *CentralGcpVpcPeering) GetProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *CentralGcpVpcPeering) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *CentralGcpVpcPeering) SetProjectId(v string) {
	o.ProjectId = v
}

// GetTenantProjectId returns the TenantProjectId field value
func (o *CentralGcpVpcPeering) GetTenantProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TenantProjectId
}

// GetTenantProjectIdOk returns a tuple with the TenantProjectId field value
// and a boolean to check if the value has been set.
func (o *CentralGcpVpcPeering) GetTenantProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TenantProjectId, true
}

// SetTenantProjectId sets field value
func (o *CentralGcpVpcPeering) SetTenantProjectId(v string) {
	o.TenantProjectId = v
}

// GetTenantNetworkName returns the TenantNetworkName field value
func (o *CentralGcpVpcPeering) GetTenantNetworkName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TenantNetworkName
}

// GetTenantNetworkNameOk returns a tuple with the TenantNetworkName field value
// and a boolean to check if the value has been set.
func (o *CentralGcpVpcPeering) GetTenantNetworkNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TenantNetworkName, true
}

// SetTenantNetworkName sets field value
func (o *CentralGcpVpcPeering) SetTenantNetworkName(v string) {
	o.TenantNetworkName = v
}

// GetStatus returns the Status field value
func (o *CentralGcpVpcPeering) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *CentralGcpVpcPeering) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *CentralGcpVpcPeering) SetStatus(v string) {
	o.Status = v
}

// GetVpcCidr returns the VpcCidr field value
func (o *CentralGcpVpcPeering) GetVpcCidr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VpcCidr
}

// GetVpcCidrOk returns a tuple with the VpcCidr field value
// and a boolean to check if the value has been set.
func (o *CentralGcpVpcPeering) GetVpcCidrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VpcCidr, true
}

// SetVpcCidr sets field value
func (o *CentralGcpVpcPeering) SetVpcCidr(v string) {
	o.VpcCidr = v
}

// GetId returns the Id field value
func (o *CentralGcpVpcPeering) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CentralGcpVpcPeering) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CentralGcpVpcPeering) SetId(v string) {
	o.Id = v
}

// GetTenantVpcCidr returns the TenantVpcCidr field value if set, zero value otherwise.
func (o *CentralGcpVpcPeering) GetTenantVpcCidr() string {
	if o == nil || IsNil(o.TenantVpcCidr) {
		var ret string
		return ret
	}
	return *o.TenantVpcCidr
}

// GetTenantVpcCidrOk returns a tuple with the TenantVpcCidr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CentralGcpVpcPeering) GetTenantVpcCidrOk() (*string, bool) {
	if o == nil || IsNil(o.TenantVpcCidr) {
		return nil, false
	}
	return o.TenantVpcCidr, true
}

// HasTenantVpcCidr returns a boolean if a field has been set.
func (o *CentralGcpVpcPeering) HasTenantVpcCidr() bool {
	if o != nil && !IsNil(o.TenantVpcCidr) {
		return true
	}

	return false
}

// SetTenantVpcCidr gets a reference to the given string and assigns it to the TenantVpcCidr field.
func (o *CentralGcpVpcPeering) SetTenantVpcCidr(v string) {
	o.TenantVpcCidr = &v
}

// GetRegionName returns the RegionName field value
func (o *CentralGcpVpcPeering) GetRegionName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegionName
}

// GetRegionNameOk returns a tuple with the RegionName field value
// and a boolean to check if the value has been set.
func (o *CentralGcpVpcPeering) GetRegionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegionName, true
}

// SetRegionName sets field value
func (o *CentralGcpVpcPeering) SetRegionName(v string) {
	o.RegionName = v
}

func (o CentralGcpVpcPeering) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CentralGcpVpcPeering) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["region"] = o.Region
	toSerialize["network_name"] = o.NetworkName
	toSerialize["project_id"] = o.ProjectId
	toSerialize["tenant_project_id"] = o.TenantProjectId
	toSerialize["tenant_network_name"] = o.TenantNetworkName
	toSerialize["status"] = o.Status
	toSerialize["vpc_cidr"] = o.VpcCidr
	toSerialize["id"] = o.Id
	if !IsNil(o.TenantVpcCidr) {
		toSerialize["tenant_vpc_cidr"] = o.TenantVpcCidr
	}
	toSerialize["region_name"] = o.RegionName
	return toSerialize, nil
}

func (o *CentralGcpVpcPeering) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"region",
		"network_name",
		"project_id",
		"tenant_project_id",
		"tenant_network_name",
		"status",
		"vpc_cidr",
		"id",
		"region_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCentralGcpVpcPeering := _CentralGcpVpcPeering{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCentralGcpVpcPeering)

	if err != nil {
		return err
	}

	*o = CentralGcpVpcPeering(varCentralGcpVpcPeering)

	return err
}

type NullableCentralGcpVpcPeering struct {
	value *CentralGcpVpcPeering
	isSet bool
}

func (v NullableCentralGcpVpcPeering) Get() *CentralGcpVpcPeering {
	return v.value
}

func (v *NullableCentralGcpVpcPeering) Set(val *CentralGcpVpcPeering) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralGcpVpcPeering) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralGcpVpcPeering) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralGcpVpcPeering(val *CentralGcpVpcPeering) *NullableCentralGcpVpcPeering {
	return &NullableCentralGcpVpcPeering{value: val, isSet: true}
}

func (v NullableCentralGcpVpcPeering) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralGcpVpcPeering) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
