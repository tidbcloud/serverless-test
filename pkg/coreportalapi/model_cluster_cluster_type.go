/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"encoding/json"
	"fmt"
)

// ClusterClusterType the model 'ClusterClusterType'
type ClusterClusterType string

// List of ClusterClusterType
const (
	CLUSTERCLUSTERTYPE_COMMON    ClusterClusterType = "COMMON"
	CLUSTERCLUSTERTYPE_PRIMARY   ClusterClusterType = "PRIMARY"
	CLUSTERCLUSTERTYPE_SECONDARY ClusterClusterType = "SECONDARY"
)

// All allowed values of ClusterClusterType enum
var AllowedClusterClusterTypeEnumValues = []ClusterClusterType{
	"COMMON",
	"PRIMARY",
	"SECONDARY",
}

func (v *ClusterClusterType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ClusterClusterType(value)
	for _, existing := range AllowedClusterClusterTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ClusterClusterType", value)
}

// NewClusterClusterTypeFromValue returns a pointer to a valid ClusterClusterType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewClusterClusterTypeFromValue(v string) (*ClusterClusterType, error) {
	ev := ClusterClusterType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ClusterClusterType: valid values are %v", v, AllowedClusterClusterTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ClusterClusterType) IsValid() bool {
	for _, existing := range AllowedClusterClusterTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ClusterClusterType value
func (v ClusterClusterType) Ptr() *ClusterClusterType {
	return &v
}

type NullableClusterClusterType struct {
	value *ClusterClusterType
	isSet bool
}

func (v NullableClusterClusterType) Get() *ClusterClusterType {
	return v.value
}

func (v *NullableClusterClusterType) Set(val *ClusterClusterType) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterClusterType) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterClusterType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterClusterType(val *ClusterClusterType) *NullableClusterClusterType {
	return &NullableClusterClusterType{value: val, isSet: true}
}

func (v NullableClusterClusterType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterClusterType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
