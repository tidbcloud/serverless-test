/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"encoding/json"
	"fmt"
)

// CentralComponentType the model 'CentralComponentType'
type CentralComponentType string

// List of centralComponentType
const (
	CENTRALCOMPONENTTYPE_COMPONENT_TYPE_UNSPECIFIED CentralComponentType = "COMPONENT_TYPE_UNSPECIFIED"
	CENTRALCOMPONENTTYPE_COMPONENT_TYPE_TIDB        CentralComponentType = "COMPONENT_TYPE_TIDB"
	CENTRALCOMPONENTTYPE_COMPONENT_TYPE_TIKV        CentralComponentType = "COMPONENT_TYPE_TIKV"
	CENTRALCOMPONENTTYPE_COMPONENT_TYPE_TIFLASH     CentralComponentType = "COMPONENT_TYPE_TIFLASH"
	CENTRALCOMPONENTTYPE_COMPONENT_TYPE_PD          CentralComponentType = "COMPONENT_TYPE_PD"
	CENTRALCOMPONENTTYPE_COMPONENT_TYPE_TICDC       CentralComponentType = "COMPONENT_TYPE_TICDC"
)

// All allowed values of CentralComponentType enum
var AllowedCentralComponentTypeEnumValues = []CentralComponentType{
	"COMPONENT_TYPE_UNSPECIFIED",
	"COMPONENT_TYPE_TIDB",
	"COMPONENT_TYPE_TIKV",
	"COMPONENT_TYPE_TIFLASH",
	"COMPONENT_TYPE_PD",
	"COMPONENT_TYPE_TICDC",
}

func (v *CentralComponentType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CentralComponentType(value)
	for _, existing := range AllowedCentralComponentTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CentralComponentType", value)
}

// NewCentralComponentTypeFromValue returns a pointer to a valid CentralComponentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCentralComponentTypeFromValue(v string) (*CentralComponentType, error) {
	ev := CentralComponentType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CentralComponentType: valid values are %v", v, AllowedCentralComponentTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CentralComponentType) IsValid() bool {
	for _, existing := range AllowedCentralComponentTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to centralComponentType value
func (v CentralComponentType) Ptr() *CentralComponentType {
	return &v
}

type NullableCentralComponentType struct {
	value *CentralComponentType
	isSet bool
}

func (v NullableCentralComponentType) Get() *CentralComponentType {
	return v.value
}

func (v *NullableCentralComponentType) Set(val *CentralComponentType) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralComponentType) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralComponentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralComponentType(val *CentralComponentType) *NullableCentralComponentType {
	return &NullableCentralComponentType{value: val, isSet: true}
}

func (v NullableCentralComponentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralComponentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
