/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"encoding/json"
	"fmt"
)

// CentralGetClusterCACertificateReqType the model 'CentralGetClusterCACertificateReqType'
type CentralGetClusterCACertificateReqType string

// List of centralGetClusterCACertificateReqType
const (
	CENTRALGETCLUSTERCACERTIFICATEREQTYPE_DOWNLOAD_URL CentralGetClusterCACertificateReqType = "DOWNLOAD_URL"
	CENTRALGETCLUSTERCACERTIFICATEREQTYPE_PEM          CentralGetClusterCACertificateReqType = "PEM"
)

// All allowed values of CentralGetClusterCACertificateReqType enum
var AllowedCentralGetClusterCACertificateReqTypeEnumValues = []CentralGetClusterCACertificateReqType{
	"DOWNLOAD_URL",
	"PEM",
}

func (v *CentralGetClusterCACertificateReqType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CentralGetClusterCACertificateReqType(value)
	for _, existing := range AllowedCentralGetClusterCACertificateReqTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CentralGetClusterCACertificateReqType", value)
}

// NewCentralGetClusterCACertificateReqTypeFromValue returns a pointer to a valid CentralGetClusterCACertificateReqType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCentralGetClusterCACertificateReqTypeFromValue(v string) (*CentralGetClusterCACertificateReqType, error) {
	ev := CentralGetClusterCACertificateReqType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CentralGetClusterCACertificateReqType: valid values are %v", v, AllowedCentralGetClusterCACertificateReqTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CentralGetClusterCACertificateReqType) IsValid() bool {
	for _, existing := range AllowedCentralGetClusterCACertificateReqTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to centralGetClusterCACertificateReqType value
func (v CentralGetClusterCACertificateReqType) Ptr() *CentralGetClusterCACertificateReqType {
	return &v
}

type NullableCentralGetClusterCACertificateReqType struct {
	value *CentralGetClusterCACertificateReqType
	isSet bool
}

func (v NullableCentralGetClusterCACertificateReqType) Get() *CentralGetClusterCACertificateReqType {
	return v.value
}

func (v *NullableCentralGetClusterCACertificateReqType) Set(val *CentralGetClusterCACertificateReqType) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralGetClusterCACertificateReqType) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralGetClusterCACertificateReqType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralGetClusterCACertificateReqType(val *CentralGetClusterCACertificateReqType) *NullableCentralGetClusterCACertificateReqType {
	return &NullableCentralGetClusterCACertificateReqType{value: val, isSet: true}
}

func (v NullableCentralGetClusterCACertificateReqType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralGetClusterCACertificateReqType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
