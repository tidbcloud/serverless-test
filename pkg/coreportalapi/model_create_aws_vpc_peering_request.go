/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateAWSVpcPeeringRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateAWSVpcPeeringRequest{}

// CreateAWSVpcPeeringRequest struct for CreateAWSVpcPeeringRequest
type CreateAWSVpcPeeringRequest struct {
	TenantRegion    string `json:"tenant_region"`
	TenantVpcId     string `json:"tenant_vpc_id"`
	TenantAccountId string `json:"tenant_account_id"`
	TenantVpcCidr   string `json:"tenant_vpc_cidr"`
	Region          string `json:"region"`
}

type _CreateAWSVpcPeeringRequest CreateAWSVpcPeeringRequest

// NewCreateAWSVpcPeeringRequest instantiates a new CreateAWSVpcPeeringRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateAWSVpcPeeringRequest(tenantRegion string, tenantVpcId string, tenantAccountId string, tenantVpcCidr string, region string) *CreateAWSVpcPeeringRequest {
	this := CreateAWSVpcPeeringRequest{}
	this.TenantRegion = tenantRegion
	this.TenantVpcId = tenantVpcId
	this.TenantAccountId = tenantAccountId
	this.TenantVpcCidr = tenantVpcCidr
	this.Region = region
	return &this
}

// NewCreateAWSVpcPeeringRequestWithDefaults instantiates a new CreateAWSVpcPeeringRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateAWSVpcPeeringRequestWithDefaults() *CreateAWSVpcPeeringRequest {
	this := CreateAWSVpcPeeringRequest{}
	return &this
}

// GetTenantRegion returns the TenantRegion field value
func (o *CreateAWSVpcPeeringRequest) GetTenantRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TenantRegion
}

// GetTenantRegionOk returns a tuple with the TenantRegion field value
// and a boolean to check if the value has been set.
func (o *CreateAWSVpcPeeringRequest) GetTenantRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TenantRegion, true
}

// SetTenantRegion sets field value
func (o *CreateAWSVpcPeeringRequest) SetTenantRegion(v string) {
	o.TenantRegion = v
}

// GetTenantVpcId returns the TenantVpcId field value
func (o *CreateAWSVpcPeeringRequest) GetTenantVpcId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TenantVpcId
}

// GetTenantVpcIdOk returns a tuple with the TenantVpcId field value
// and a boolean to check if the value has been set.
func (o *CreateAWSVpcPeeringRequest) GetTenantVpcIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TenantVpcId, true
}

// SetTenantVpcId sets field value
func (o *CreateAWSVpcPeeringRequest) SetTenantVpcId(v string) {
	o.TenantVpcId = v
}

// GetTenantAccountId returns the TenantAccountId field value
func (o *CreateAWSVpcPeeringRequest) GetTenantAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TenantAccountId
}

// GetTenantAccountIdOk returns a tuple with the TenantAccountId field value
// and a boolean to check if the value has been set.
func (o *CreateAWSVpcPeeringRequest) GetTenantAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TenantAccountId, true
}

// SetTenantAccountId sets field value
func (o *CreateAWSVpcPeeringRequest) SetTenantAccountId(v string) {
	o.TenantAccountId = v
}

// GetTenantVpcCidr returns the TenantVpcCidr field value
func (o *CreateAWSVpcPeeringRequest) GetTenantVpcCidr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TenantVpcCidr
}

// GetTenantVpcCidrOk returns a tuple with the TenantVpcCidr field value
// and a boolean to check if the value has been set.
func (o *CreateAWSVpcPeeringRequest) GetTenantVpcCidrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TenantVpcCidr, true
}

// SetTenantVpcCidr sets field value
func (o *CreateAWSVpcPeeringRequest) SetTenantVpcCidr(v string) {
	o.TenantVpcCidr = v
}

// GetRegion returns the Region field value
func (o *CreateAWSVpcPeeringRequest) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *CreateAWSVpcPeeringRequest) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *CreateAWSVpcPeeringRequest) SetRegion(v string) {
	o.Region = v
}

func (o CreateAWSVpcPeeringRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateAWSVpcPeeringRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tenant_region"] = o.TenantRegion
	toSerialize["tenant_vpc_id"] = o.TenantVpcId
	toSerialize["tenant_account_id"] = o.TenantAccountId
	toSerialize["tenant_vpc_cidr"] = o.TenantVpcCidr
	toSerialize["region"] = o.Region
	return toSerialize, nil
}

func (o *CreateAWSVpcPeeringRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tenant_region",
		"tenant_vpc_id",
		"tenant_account_id",
		"tenant_vpc_cidr",
		"region",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateAWSVpcPeeringRequest := _CreateAWSVpcPeeringRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateAWSVpcPeeringRequest)

	if err != nil {
		return err
	}

	*o = CreateAWSVpcPeeringRequest(varCreateAWSVpcPeeringRequest)

	return err
}

type NullableCreateAWSVpcPeeringRequest struct {
	value *CreateAWSVpcPeeringRequest
	isSet bool
}

func (v NullableCreateAWSVpcPeeringRequest) Get() *CreateAWSVpcPeeringRequest {
	return v.value
}

func (v *NullableCreateAWSVpcPeeringRequest) Set(val *CreateAWSVpcPeeringRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateAWSVpcPeeringRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateAWSVpcPeeringRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateAWSVpcPeeringRequest(val *CreateAWSVpcPeeringRequest) *NullableCreateAWSVpcPeeringRequest {
	return &NullableCreateAWSVpcPeeringRequest{value: val, isSet: true}
}

func (v NullableCreateAWSVpcPeeringRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateAWSVpcPeeringRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
