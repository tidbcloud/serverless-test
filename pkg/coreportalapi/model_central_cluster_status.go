/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"encoding/json"
	"fmt"
)

// CentralClusterStatus the model 'CentralClusterStatus'
type CentralClusterStatus string

// List of centralClusterStatus
const (
	CENTRALCLUSTERSTATUS_NORMAL      CentralClusterStatus = "NORMAL"
	CENTRALCLUSTERSTATUS_CREATING    CentralClusterStatus = "CREATING"
	CENTRALCLUSTERSTATUS_SCALING     CentralClusterStatus = "SCALING"
	CENTRALCLUSTERSTATUS_UPGRADING   CentralClusterStatus = "UPGRADING"
	CENTRALCLUSTERSTATUS_UNAVAILABLE CentralClusterStatus = "UNAVAILABLE"
	CENTRALCLUSTERSTATUS_RECOVERING  CentralClusterStatus = "RECOVERING"
	CENTRALCLUSTERSTATUS_IMPORTING   CentralClusterStatus = "IMPORTING"
	CENTRALCLUSTERSTATUS_PAUSED      CentralClusterStatus = "PAUSED"
	CENTRALCLUSTERSTATUS_RESUMING    CentralClusterStatus = "RESUMING"
	CENTRALCLUSTERSTATUS_DELETED     CentralClusterStatus = "DELETED"
	CENTRALCLUSTERSTATUS_MAINTAINING CentralClusterStatus = "MAINTAINING"
	CENTRALCLUSTERSTATUS_PAUSING     CentralClusterStatus = "PAUSING"
)

// All allowed values of CentralClusterStatus enum
var AllowedCentralClusterStatusEnumValues = []CentralClusterStatus{
	"NORMAL",
	"CREATING",
	"SCALING",
	"UPGRADING",
	"UNAVAILABLE",
	"RECOVERING",
	"IMPORTING",
	"PAUSED",
	"RESUMING",
	"DELETED",
	"MAINTAINING",
	"PAUSING",
}

func (v *CentralClusterStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CentralClusterStatus(value)
	for _, existing := range AllowedCentralClusterStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CentralClusterStatus", value)
}

// NewCentralClusterStatusFromValue returns a pointer to a valid CentralClusterStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCentralClusterStatusFromValue(v string) (*CentralClusterStatus, error) {
	ev := CentralClusterStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CentralClusterStatus: valid values are %v", v, AllowedCentralClusterStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CentralClusterStatus) IsValid() bool {
	for _, existing := range AllowedCentralClusterStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to centralClusterStatus value
func (v CentralClusterStatus) Ptr() *CentralClusterStatus {
	return &v
}

type NullableCentralClusterStatus struct {
	value *CentralClusterStatus
	isSet bool
}

func (v NullableCentralClusterStatus) Get() *CentralClusterStatus {
	return v.value
}

func (v *NullableCentralClusterStatus) Set(val *CentralClusterStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralClusterStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralClusterStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralClusterStatus(val *CentralClusterStatus) *NullableCentralClusterStatus {
	return &NullableCentralClusterStatus{value: val, isSet: true}
}

func (v NullableCentralClusterStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralClusterStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
