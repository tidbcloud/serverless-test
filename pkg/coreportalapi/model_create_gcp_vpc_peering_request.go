/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateGcpVpcPeeringRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateGcpVpcPeeringRequest{}

// CreateGcpVpcPeeringRequest struct for CreateGcpVpcPeeringRequest
type CreateGcpVpcPeeringRequest struct {
	TenantProjectId   string `json:"tenant_project_id"`
	TenantVpcRegion   string `json:"tenant_vpc_region"`
	TenantNetworkName string `json:"tenant_network_name"`
	Region            string `json:"region"`
	TenantVpcCidr     string `json:"tenant_vpc_cidr"`
}

type _CreateGcpVpcPeeringRequest CreateGcpVpcPeeringRequest

// NewCreateGcpVpcPeeringRequest instantiates a new CreateGcpVpcPeeringRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateGcpVpcPeeringRequest(tenantProjectId string, tenantVpcRegion string, tenantNetworkName string, region string, tenantVpcCidr string) *CreateGcpVpcPeeringRequest {
	this := CreateGcpVpcPeeringRequest{}
	this.TenantProjectId = tenantProjectId
	this.TenantVpcRegion = tenantVpcRegion
	this.TenantNetworkName = tenantNetworkName
	this.Region = region
	this.TenantVpcCidr = tenantVpcCidr
	return &this
}

// NewCreateGcpVpcPeeringRequestWithDefaults instantiates a new CreateGcpVpcPeeringRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateGcpVpcPeeringRequestWithDefaults() *CreateGcpVpcPeeringRequest {
	this := CreateGcpVpcPeeringRequest{}
	return &this
}

// GetTenantProjectId returns the TenantProjectId field value
func (o *CreateGcpVpcPeeringRequest) GetTenantProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TenantProjectId
}

// GetTenantProjectIdOk returns a tuple with the TenantProjectId field value
// and a boolean to check if the value has been set.
func (o *CreateGcpVpcPeeringRequest) GetTenantProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TenantProjectId, true
}

// SetTenantProjectId sets field value
func (o *CreateGcpVpcPeeringRequest) SetTenantProjectId(v string) {
	o.TenantProjectId = v
}

// GetTenantVpcRegion returns the TenantVpcRegion field value
func (o *CreateGcpVpcPeeringRequest) GetTenantVpcRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TenantVpcRegion
}

// GetTenantVpcRegionOk returns a tuple with the TenantVpcRegion field value
// and a boolean to check if the value has been set.
func (o *CreateGcpVpcPeeringRequest) GetTenantVpcRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TenantVpcRegion, true
}

// SetTenantVpcRegion sets field value
func (o *CreateGcpVpcPeeringRequest) SetTenantVpcRegion(v string) {
	o.TenantVpcRegion = v
}

// GetTenantNetworkName returns the TenantNetworkName field value
func (o *CreateGcpVpcPeeringRequest) GetTenantNetworkName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TenantNetworkName
}

// GetTenantNetworkNameOk returns a tuple with the TenantNetworkName field value
// and a boolean to check if the value has been set.
func (o *CreateGcpVpcPeeringRequest) GetTenantNetworkNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TenantNetworkName, true
}

// SetTenantNetworkName sets field value
func (o *CreateGcpVpcPeeringRequest) SetTenantNetworkName(v string) {
	o.TenantNetworkName = v
}

// GetRegion returns the Region field value
func (o *CreateGcpVpcPeeringRequest) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *CreateGcpVpcPeeringRequest) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *CreateGcpVpcPeeringRequest) SetRegion(v string) {
	o.Region = v
}

// GetTenantVpcCidr returns the TenantVpcCidr field value
func (o *CreateGcpVpcPeeringRequest) GetTenantVpcCidr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TenantVpcCidr
}

// GetTenantVpcCidrOk returns a tuple with the TenantVpcCidr field value
// and a boolean to check if the value has been set.
func (o *CreateGcpVpcPeeringRequest) GetTenantVpcCidrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TenantVpcCidr, true
}

// SetTenantVpcCidr sets field value
func (o *CreateGcpVpcPeeringRequest) SetTenantVpcCidr(v string) {
	o.TenantVpcCidr = v
}

func (o CreateGcpVpcPeeringRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateGcpVpcPeeringRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tenant_project_id"] = o.TenantProjectId
	toSerialize["tenant_vpc_region"] = o.TenantVpcRegion
	toSerialize["tenant_network_name"] = o.TenantNetworkName
	toSerialize["region"] = o.Region
	toSerialize["tenant_vpc_cidr"] = o.TenantVpcCidr
	return toSerialize, nil
}

func (o *CreateGcpVpcPeeringRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tenant_project_id",
		"tenant_vpc_region",
		"tenant_network_name",
		"region",
		"tenant_vpc_cidr",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateGcpVpcPeeringRequest := _CreateGcpVpcPeeringRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateGcpVpcPeeringRequest)

	if err != nil {
		return err
	}

	*o = CreateGcpVpcPeeringRequest(varCreateGcpVpcPeeringRequest)

	return err
}

type NullableCreateGcpVpcPeeringRequest struct {
	value *CreateGcpVpcPeeringRequest
	isSet bool
}

func (v NullableCreateGcpVpcPeeringRequest) Get() *CreateGcpVpcPeeringRequest {
	return v.value
}

func (v *NullableCreateGcpVpcPeeringRequest) Set(val *CreateGcpVpcPeeringRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateGcpVpcPeeringRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateGcpVpcPeeringRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateGcpVpcPeeringRequest(val *CreateGcpVpcPeeringRequest) *NullableCreateGcpVpcPeeringRequest {
	return &NullableCreateGcpVpcPeeringRequest{value: val, isSet: true}
}

func (v NullableCreateGcpVpcPeeringRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateGcpVpcPeeringRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
