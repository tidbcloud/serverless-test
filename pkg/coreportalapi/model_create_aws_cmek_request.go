/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"encoding/json"
)

// checks if the CreateAwsCmekRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateAwsCmekRequest{}

// CreateAwsCmekRequest struct for CreateAwsCmekRequest
type CreateAwsCmekRequest struct {
	Specs []CentralAwsCmekSpec `json:"specs,omitempty"`
}

// NewCreateAwsCmekRequest instantiates a new CreateAwsCmekRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateAwsCmekRequest() *CreateAwsCmekRequest {
	this := CreateAwsCmekRequest{}
	return &this
}

// NewCreateAwsCmekRequestWithDefaults instantiates a new CreateAwsCmekRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateAwsCmekRequestWithDefaults() *CreateAwsCmekRequest {
	this := CreateAwsCmekRequest{}
	return &this
}

// GetSpecs returns the Specs field value if set, zero value otherwise.
func (o *CreateAwsCmekRequest) GetSpecs() []CentralAwsCmekSpec {
	if o == nil || IsNil(o.Specs) {
		var ret []CentralAwsCmekSpec
		return ret
	}
	return o.Specs
}

// GetSpecsOk returns a tuple with the Specs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAwsCmekRequest) GetSpecsOk() ([]CentralAwsCmekSpec, bool) {
	if o == nil || IsNil(o.Specs) {
		return nil, false
	}
	return o.Specs, true
}

// HasSpecs returns a boolean if a field has been set.
func (o *CreateAwsCmekRequest) HasSpecs() bool {
	if o != nil && !IsNil(o.Specs) {
		return true
	}

	return false
}

// SetSpecs gets a reference to the given []CentralAwsCmekSpec and assigns it to the Specs field.
func (o *CreateAwsCmekRequest) SetSpecs(v []CentralAwsCmekSpec) {
	o.Specs = v
}

func (o CreateAwsCmekRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateAwsCmekRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Specs) {
		toSerialize["specs"] = o.Specs
	}
	return toSerialize, nil
}

type NullableCreateAwsCmekRequest struct {
	value *CreateAwsCmekRequest
	isSet bool
}

func (v NullableCreateAwsCmekRequest) Get() *CreateAwsCmekRequest {
	return v.value
}

func (v *NullableCreateAwsCmekRequest) Set(val *CreateAwsCmekRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateAwsCmekRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateAwsCmekRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateAwsCmekRequest(val *CreateAwsCmekRequest) *NullableCreateAwsCmekRequest {
	return &NullableCreateAwsCmekRequest{value: val, isSet: true}
}

func (v NullableCreateAwsCmekRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateAwsCmekRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
