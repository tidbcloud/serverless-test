/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"encoding/json"
	"fmt"
)

// CentralClusterDevTierClusterType the model 'CentralClusterDevTierClusterType'
type CentralClusterDevTierClusterType string

// List of centralClusterDevTierClusterType
const (
	CENTRALCLUSTERDEVTIERCLUSTERTYPE_DEVTIER_UNSPECIFIED CentralClusterDevTierClusterType = "DEVTIER_UNSPECIFIED"
	CENTRALCLUSTERDEVTIERCLUSTERTYPE_DEVTIER_CLASSIC     CentralClusterDevTierClusterType = "DEVTIER_CLASSIC"
	CENTRALCLUSTERDEVTIERCLUSTERTYPE_DEVTIER_SERVERLESS  CentralClusterDevTierClusterType = "DEVTIER_SERVERLESS"
)

// All allowed values of CentralClusterDevTierClusterType enum
var AllowedCentralClusterDevTierClusterTypeEnumValues = []CentralClusterDevTierClusterType{
	"DEVTIER_UNSPECIFIED",
	"DEVTIER_CLASSIC",
	"DEVTIER_SERVERLESS",
}

func (v *CentralClusterDevTierClusterType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CentralClusterDevTierClusterType(value)
	for _, existing := range AllowedCentralClusterDevTierClusterTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CentralClusterDevTierClusterType", value)
}

// NewCentralClusterDevTierClusterTypeFromValue returns a pointer to a valid CentralClusterDevTierClusterType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCentralClusterDevTierClusterTypeFromValue(v string) (*CentralClusterDevTierClusterType, error) {
	ev := CentralClusterDevTierClusterType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CentralClusterDevTierClusterType: valid values are %v", v, AllowedCentralClusterDevTierClusterTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CentralClusterDevTierClusterType) IsValid() bool {
	for _, existing := range AllowedCentralClusterDevTierClusterTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to centralClusterDevTierClusterType value
func (v CentralClusterDevTierClusterType) Ptr() *CentralClusterDevTierClusterType {
	return &v
}

type NullableCentralClusterDevTierClusterType struct {
	value *CentralClusterDevTierClusterType
	isSet bool
}

func (v NullableCentralClusterDevTierClusterType) Get() *CentralClusterDevTierClusterType {
	return v.value
}

func (v *NullableCentralClusterDevTierClusterType) Set(val *CentralClusterDevTierClusterType) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralClusterDevTierClusterType) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralClusterDevTierClusterType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralClusterDevTierClusterType(val *CentralClusterDevTierClusterType) *NullableCentralClusterDevTierClusterType {
	return &NullableCentralClusterDevTierClusterType{value: val, isSet: true}
}

func (v NullableCentralClusterDevTierClusterType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralClusterDevTierClusterType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
