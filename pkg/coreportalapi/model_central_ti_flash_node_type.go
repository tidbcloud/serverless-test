/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"encoding/json"
	"fmt"
)

// CentralTiFlashNodeType the model 'CentralTiFlashNodeType'
type CentralTiFlashNodeType string

// List of centralTiFlashNodeType
const (
	CENTRALTIFLASHNODETYPE_STORAGE CentralTiFlashNodeType = "STORAGE"
)

// All allowed values of CentralTiFlashNodeType enum
var AllowedCentralTiFlashNodeTypeEnumValues = []CentralTiFlashNodeType{
	"STORAGE",
}

func (v *CentralTiFlashNodeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CentralTiFlashNodeType(value)
	for _, existing := range AllowedCentralTiFlashNodeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CentralTiFlashNodeType", value)
}

// NewCentralTiFlashNodeTypeFromValue returns a pointer to a valid CentralTiFlashNodeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCentralTiFlashNodeTypeFromValue(v string) (*CentralTiFlashNodeType, error) {
	ev := CentralTiFlashNodeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CentralTiFlashNodeType: valid values are %v", v, AllowedCentralTiFlashNodeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CentralTiFlashNodeType) IsValid() bool {
	for _, existing := range AllowedCentralTiFlashNodeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to centralTiFlashNodeType value
func (v CentralTiFlashNodeType) Ptr() *CentralTiFlashNodeType {
	return &v
}

type NullableCentralTiFlashNodeType struct {
	value *CentralTiFlashNodeType
	isSet bool
}

func (v NullableCentralTiFlashNodeType) Get() *CentralTiFlashNodeType {
	return v.value
}

func (v *NullableCentralTiFlashNodeType) Set(val *CentralTiFlashNodeType) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralTiFlashNodeType) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralTiFlashNodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralTiFlashNodeType(val *CentralTiFlashNodeType) *NullableCentralTiFlashNodeType {
	return &NullableCentralTiFlashNodeType{value: val, isSet: true}
}

func (v NullableCentralTiFlashNodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralTiFlashNodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
