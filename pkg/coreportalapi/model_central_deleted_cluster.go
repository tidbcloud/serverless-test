/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the CentralDeletedCluster type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CentralDeletedCluster{}

// CentralDeletedCluster struct for CentralDeletedCluster
type CentralDeletedCluster struct {
	Id                       string    `json:"id"`
	Name                     string    `json:"name"`
	Provider                 string    `json:"provider"`
	Region                   string    `json:"region"`
	RegionName               string    `json:"region_name"`
	DeleteTime               time.Time `json:"delete_time"`
	LatestBackupSize         string    `json:"latest_backup_size"`
	CrossAccountDeploymentId *string   `json:"cross_account_deployment_id,omitempty"`
}

type _CentralDeletedCluster CentralDeletedCluster

// NewCentralDeletedCluster instantiates a new CentralDeletedCluster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCentralDeletedCluster(id string, name string, provider string, region string, regionName string, deleteTime time.Time, latestBackupSize string) *CentralDeletedCluster {
	this := CentralDeletedCluster{}
	this.Id = id
	this.Name = name
	this.Provider = provider
	this.Region = region
	this.RegionName = regionName
	this.DeleteTime = deleteTime
	this.LatestBackupSize = latestBackupSize
	return &this
}

// NewCentralDeletedClusterWithDefaults instantiates a new CentralDeletedCluster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCentralDeletedClusterWithDefaults() *CentralDeletedCluster {
	this := CentralDeletedCluster{}
	return &this
}

// GetId returns the Id field value
func (o *CentralDeletedCluster) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CentralDeletedCluster) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CentralDeletedCluster) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *CentralDeletedCluster) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CentralDeletedCluster) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CentralDeletedCluster) SetName(v string) {
	o.Name = v
}

// GetProvider returns the Provider field value
func (o *CentralDeletedCluster) GetProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *CentralDeletedCluster) GetProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *CentralDeletedCluster) SetProvider(v string) {
	o.Provider = v
}

// GetRegion returns the Region field value
func (o *CentralDeletedCluster) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *CentralDeletedCluster) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *CentralDeletedCluster) SetRegion(v string) {
	o.Region = v
}

// GetRegionName returns the RegionName field value
func (o *CentralDeletedCluster) GetRegionName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegionName
}

// GetRegionNameOk returns a tuple with the RegionName field value
// and a boolean to check if the value has been set.
func (o *CentralDeletedCluster) GetRegionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegionName, true
}

// SetRegionName sets field value
func (o *CentralDeletedCluster) SetRegionName(v string) {
	o.RegionName = v
}

// GetDeleteTime returns the DeleteTime field value
func (o *CentralDeletedCluster) GetDeleteTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.DeleteTime
}

// GetDeleteTimeOk returns a tuple with the DeleteTime field value
// and a boolean to check if the value has been set.
func (o *CentralDeletedCluster) GetDeleteTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeleteTime, true
}

// SetDeleteTime sets field value
func (o *CentralDeletedCluster) SetDeleteTime(v time.Time) {
	o.DeleteTime = v
}

// GetLatestBackupSize returns the LatestBackupSize field value
func (o *CentralDeletedCluster) GetLatestBackupSize() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LatestBackupSize
}

// GetLatestBackupSizeOk returns a tuple with the LatestBackupSize field value
// and a boolean to check if the value has been set.
func (o *CentralDeletedCluster) GetLatestBackupSizeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LatestBackupSize, true
}

// SetLatestBackupSize sets field value
func (o *CentralDeletedCluster) SetLatestBackupSize(v string) {
	o.LatestBackupSize = v
}

// GetCrossAccountDeploymentId returns the CrossAccountDeploymentId field value if set, zero value otherwise.
func (o *CentralDeletedCluster) GetCrossAccountDeploymentId() string {
	if o == nil || IsNil(o.CrossAccountDeploymentId) {
		var ret string
		return ret
	}
	return *o.CrossAccountDeploymentId
}

// GetCrossAccountDeploymentIdOk returns a tuple with the CrossAccountDeploymentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CentralDeletedCluster) GetCrossAccountDeploymentIdOk() (*string, bool) {
	if o == nil || IsNil(o.CrossAccountDeploymentId) {
		return nil, false
	}
	return o.CrossAccountDeploymentId, true
}

// HasCrossAccountDeploymentId returns a boolean if a field has been set.
func (o *CentralDeletedCluster) HasCrossAccountDeploymentId() bool {
	if o != nil && !IsNil(o.CrossAccountDeploymentId) {
		return true
	}

	return false
}

// SetCrossAccountDeploymentId gets a reference to the given string and assigns it to the CrossAccountDeploymentId field.
func (o *CentralDeletedCluster) SetCrossAccountDeploymentId(v string) {
	o.CrossAccountDeploymentId = &v
}

func (o CentralDeletedCluster) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CentralDeletedCluster) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["provider"] = o.Provider
	toSerialize["region"] = o.Region
	toSerialize["region_name"] = o.RegionName
	toSerialize["delete_time"] = o.DeleteTime
	toSerialize["latest_backup_size"] = o.LatestBackupSize
	if !IsNil(o.CrossAccountDeploymentId) {
		toSerialize["cross_account_deployment_id"] = o.CrossAccountDeploymentId
	}
	return toSerialize, nil
}

func (o *CentralDeletedCluster) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"provider",
		"region",
		"region_name",
		"delete_time",
		"latest_backup_size",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCentralDeletedCluster := _CentralDeletedCluster{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCentralDeletedCluster)

	if err != nil {
		return err
	}

	*o = CentralDeletedCluster(varCentralDeletedCluster)

	return err
}

type NullableCentralDeletedCluster struct {
	value *CentralDeletedCluster
	isSet bool
}

func (v NullableCentralDeletedCluster) Get() *CentralDeletedCluster {
	return v.value
}

func (v *NullableCentralDeletedCluster) Set(val *CentralDeletedCluster) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralDeletedCluster) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralDeletedCluster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralDeletedCluster(val *CentralDeletedCluster) *NullableCentralDeletedCluster {
	return &NullableCentralDeletedCluster{value: val, isSet: true}
}

func (v NullableCentralDeletedCluster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralDeletedCluster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
