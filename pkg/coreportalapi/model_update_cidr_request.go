/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UpdateCidrRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateCidrRequest{}

// UpdateCidrRequest struct for UpdateCidrRequest
type UpdateCidrRequest struct {
	// Required. The CIDR setting by user.
	Cidr string `json:"cidr"`
	// Optional. If true, only validate the CIDR, do not update it.
	ValidateOnly *bool `json:"validate_only,omitempty"`
}

type _UpdateCidrRequest UpdateCidrRequest

// NewUpdateCidrRequest instantiates a new UpdateCidrRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateCidrRequest(cidr string) *UpdateCidrRequest {
	this := UpdateCidrRequest{}
	this.Cidr = cidr
	return &this
}

// NewUpdateCidrRequestWithDefaults instantiates a new UpdateCidrRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateCidrRequestWithDefaults() *UpdateCidrRequest {
	this := UpdateCidrRequest{}
	return &this
}

// GetCidr returns the Cidr field value
func (o *UpdateCidrRequest) GetCidr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value
// and a boolean to check if the value has been set.
func (o *UpdateCidrRequest) GetCidrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cidr, true
}

// SetCidr sets field value
func (o *UpdateCidrRequest) SetCidr(v string) {
	o.Cidr = v
}

// GetValidateOnly returns the ValidateOnly field value if set, zero value otherwise.
func (o *UpdateCidrRequest) GetValidateOnly() bool {
	if o == nil || IsNil(o.ValidateOnly) {
		var ret bool
		return ret
	}
	return *o.ValidateOnly
}

// GetValidateOnlyOk returns a tuple with the ValidateOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCidrRequest) GetValidateOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ValidateOnly) {
		return nil, false
	}
	return o.ValidateOnly, true
}

// HasValidateOnly returns a boolean if a field has been set.
func (o *UpdateCidrRequest) HasValidateOnly() bool {
	if o != nil && !IsNil(o.ValidateOnly) {
		return true
	}

	return false
}

// SetValidateOnly gets a reference to the given bool and assigns it to the ValidateOnly field.
func (o *UpdateCidrRequest) SetValidateOnly(v bool) {
	o.ValidateOnly = &v
}

func (o UpdateCidrRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateCidrRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cidr"] = o.Cidr
	if !IsNil(o.ValidateOnly) {
		toSerialize["validate_only"] = o.ValidateOnly
	}
	return toSerialize, nil
}

func (o *UpdateCidrRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cidr",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateCidrRequest := _UpdateCidrRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateCidrRequest)

	if err != nil {
		return err
	}

	*o = UpdateCidrRequest(varUpdateCidrRequest)

	return err
}

type NullableUpdateCidrRequest struct {
	value *UpdateCidrRequest
	isSet bool
}

func (v NullableUpdateCidrRequest) Get() *UpdateCidrRequest {
	return v.value
}

func (v *NullableUpdateCidrRequest) Set(val *UpdateCidrRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateCidrRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateCidrRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateCidrRequest(val *UpdateCidrRequest) *NullableUpdateCidrRequest {
	return &NullableUpdateCidrRequest{value: val, isSet: true}
}

func (v NullableUpdateCidrRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateCidrRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
