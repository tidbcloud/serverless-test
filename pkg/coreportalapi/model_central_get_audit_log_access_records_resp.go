/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CentralGetAuditLogAccessRecordsResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CentralGetAuditLogAccessRecordsResp{}

// CentralGetAuditLogAccessRecordsResp struct for CentralGetAuditLogAccessRecordsResp
type CentralGetAuditLogAccessRecordsResp struct {
	Records  []CentralAuditLogAccessRecord `json:"records"`
	BaseResp *CentralBaseResp              `json:"base_resp,omitempty"`
}

type _CentralGetAuditLogAccessRecordsResp CentralGetAuditLogAccessRecordsResp

// NewCentralGetAuditLogAccessRecordsResp instantiates a new CentralGetAuditLogAccessRecordsResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCentralGetAuditLogAccessRecordsResp(records []CentralAuditLogAccessRecord) *CentralGetAuditLogAccessRecordsResp {
	this := CentralGetAuditLogAccessRecordsResp{}
	this.Records = records
	return &this
}

// NewCentralGetAuditLogAccessRecordsRespWithDefaults instantiates a new CentralGetAuditLogAccessRecordsResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCentralGetAuditLogAccessRecordsRespWithDefaults() *CentralGetAuditLogAccessRecordsResp {
	this := CentralGetAuditLogAccessRecordsResp{}
	return &this
}

// GetRecords returns the Records field value
func (o *CentralGetAuditLogAccessRecordsResp) GetRecords() []CentralAuditLogAccessRecord {
	if o == nil {
		var ret []CentralAuditLogAccessRecord
		return ret
	}

	return o.Records
}

// GetRecordsOk returns a tuple with the Records field value
// and a boolean to check if the value has been set.
func (o *CentralGetAuditLogAccessRecordsResp) GetRecordsOk() ([]CentralAuditLogAccessRecord, bool) {
	if o == nil {
		return nil, false
	}
	return o.Records, true
}

// SetRecords sets field value
func (o *CentralGetAuditLogAccessRecordsResp) SetRecords(v []CentralAuditLogAccessRecord) {
	o.Records = v
}

// GetBaseResp returns the BaseResp field value if set, zero value otherwise.
func (o *CentralGetAuditLogAccessRecordsResp) GetBaseResp() CentralBaseResp {
	if o == nil || IsNil(o.BaseResp) {
		var ret CentralBaseResp
		return ret
	}
	return *o.BaseResp
}

// GetBaseRespOk returns a tuple with the BaseResp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CentralGetAuditLogAccessRecordsResp) GetBaseRespOk() (*CentralBaseResp, bool) {
	if o == nil || IsNil(o.BaseResp) {
		return nil, false
	}
	return o.BaseResp, true
}

// HasBaseResp returns a boolean if a field has been set.
func (o *CentralGetAuditLogAccessRecordsResp) HasBaseResp() bool {
	if o != nil && !IsNil(o.BaseResp) {
		return true
	}

	return false
}

// SetBaseResp gets a reference to the given CentralBaseResp and assigns it to the BaseResp field.
func (o *CentralGetAuditLogAccessRecordsResp) SetBaseResp(v CentralBaseResp) {
	o.BaseResp = &v
}

func (o CentralGetAuditLogAccessRecordsResp) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CentralGetAuditLogAccessRecordsResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["records"] = o.Records
	if !IsNil(o.BaseResp) {
		toSerialize["base_resp"] = o.BaseResp
	}
	return toSerialize, nil
}

func (o *CentralGetAuditLogAccessRecordsResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"records",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCentralGetAuditLogAccessRecordsResp := _CentralGetAuditLogAccessRecordsResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCentralGetAuditLogAccessRecordsResp)

	if err != nil {
		return err
	}

	*o = CentralGetAuditLogAccessRecordsResp(varCentralGetAuditLogAccessRecordsResp)

	return err
}

type NullableCentralGetAuditLogAccessRecordsResp struct {
	value *CentralGetAuditLogAccessRecordsResp
	isSet bool
}

func (v NullableCentralGetAuditLogAccessRecordsResp) Get() *CentralGetAuditLogAccessRecordsResp {
	return v.value
}

func (v *NullableCentralGetAuditLogAccessRecordsResp) Set(val *CentralGetAuditLogAccessRecordsResp) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralGetAuditLogAccessRecordsResp) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralGetAuditLogAccessRecordsResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralGetAuditLogAccessRecordsResp(val *CentralGetAuditLogAccessRecordsResp) *NullableCentralGetAuditLogAccessRecordsResp {
	return &NullableCentralGetAuditLogAccessRecordsResp{value: val, isSet: true}
}

func (v NullableCentralGetAuditLogAccessRecordsResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralGetAuditLogAccessRecordsResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
