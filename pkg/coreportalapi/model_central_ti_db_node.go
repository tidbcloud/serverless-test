/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CentralTiDBNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CentralTiDBNode{}

// CentralTiDBNode struct for CentralTiDBNode
type CentralTiDBNode struct {
	Name    string                `json:"name"`
	Status  CentralTiDBNodeStatus `json:"status"`
	Az      string                `json:"az"`
	Compute CentralCompute        `json:"compute"`
	Type    CentralTiDBNodeType   `json:"type"`
}

type _CentralTiDBNode CentralTiDBNode

// NewCentralTiDBNode instantiates a new CentralTiDBNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCentralTiDBNode(name string, status CentralTiDBNodeStatus, az string, compute CentralCompute, type_ CentralTiDBNodeType) *CentralTiDBNode {
	this := CentralTiDBNode{}
	this.Name = name
	this.Status = status
	this.Az = az
	this.Compute = compute
	this.Type = type_
	return &this
}

// NewCentralTiDBNodeWithDefaults instantiates a new CentralTiDBNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCentralTiDBNodeWithDefaults() *CentralTiDBNode {
	this := CentralTiDBNode{}
	var status CentralTiDBNodeStatus = CENTRALTIDBNODESTATUS_AVAILABLE
	this.Status = status
	var type_ CentralTiDBNodeType = CENTRALTIDBNODETYPE_COMPUTING
	this.Type = type_
	return &this
}

// GetName returns the Name field value
func (o *CentralTiDBNode) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CentralTiDBNode) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CentralTiDBNode) SetName(v string) {
	o.Name = v
}

// GetStatus returns the Status field value
func (o *CentralTiDBNode) GetStatus() CentralTiDBNodeStatus {
	if o == nil {
		var ret CentralTiDBNodeStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *CentralTiDBNode) GetStatusOk() (*CentralTiDBNodeStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *CentralTiDBNode) SetStatus(v CentralTiDBNodeStatus) {
	o.Status = v
}

// GetAz returns the Az field value
func (o *CentralTiDBNode) GetAz() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Az
}

// GetAzOk returns a tuple with the Az field value
// and a boolean to check if the value has been set.
func (o *CentralTiDBNode) GetAzOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Az, true
}

// SetAz sets field value
func (o *CentralTiDBNode) SetAz(v string) {
	o.Az = v
}

// GetCompute returns the Compute field value
func (o *CentralTiDBNode) GetCompute() CentralCompute {
	if o == nil {
		var ret CentralCompute
		return ret
	}

	return o.Compute
}

// GetComputeOk returns a tuple with the Compute field value
// and a boolean to check if the value has been set.
func (o *CentralTiDBNode) GetComputeOk() (*CentralCompute, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Compute, true
}

// SetCompute sets field value
func (o *CentralTiDBNode) SetCompute(v CentralCompute) {
	o.Compute = v
}

// GetType returns the Type field value
func (o *CentralTiDBNode) GetType() CentralTiDBNodeType {
	if o == nil {
		var ret CentralTiDBNodeType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CentralTiDBNode) GetTypeOk() (*CentralTiDBNodeType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CentralTiDBNode) SetType(v CentralTiDBNodeType) {
	o.Type = v
}

func (o CentralTiDBNode) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CentralTiDBNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["status"] = o.Status
	toSerialize["az"] = o.Az
	toSerialize["compute"] = o.Compute
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *CentralTiDBNode) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"status",
		"az",
		"compute",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCentralTiDBNode := _CentralTiDBNode{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCentralTiDBNode)

	if err != nil {
		return err
	}

	*o = CentralTiDBNode(varCentralTiDBNode)

	return err
}

type NullableCentralTiDBNode struct {
	value *CentralTiDBNode
	isSet bool
}

func (v NullableCentralTiDBNode) Get() *CentralTiDBNode {
	return v.value
}

func (v *NullableCentralTiDBNode) Set(val *CentralTiDBNode) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralTiDBNode) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralTiDBNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralTiDBNode(val *CentralTiDBNode) *NullableCentralTiDBNode {
	return &NullableCentralTiDBNode{value: val, isSet: true}
}

func (v NullableCentralTiDBNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralTiDBNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
