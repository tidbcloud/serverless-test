/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the CentralIamRole type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CentralIamRole{}

// CentralIamRole struct for CentralIamRole
type CentralIamRole struct {
	Id        string                `json:"id"`
	Arn       string                `json:"arn"`
	CreatedAt time.Time             `json:"created_at"`
	Usages    []CentralIamRoleUsage `json:"usages"`
}

type _CentralIamRole CentralIamRole

// NewCentralIamRole instantiates a new CentralIamRole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCentralIamRole(id string, arn string, createdAt time.Time, usages []CentralIamRoleUsage) *CentralIamRole {
	this := CentralIamRole{}
	this.Id = id
	this.Arn = arn
	this.CreatedAt = createdAt
	this.Usages = usages
	return &this
}

// NewCentralIamRoleWithDefaults instantiates a new CentralIamRole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCentralIamRoleWithDefaults() *CentralIamRole {
	this := CentralIamRole{}
	return &this
}

// GetId returns the Id field value
func (o *CentralIamRole) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CentralIamRole) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CentralIamRole) SetId(v string) {
	o.Id = v
}

// GetArn returns the Arn field value
func (o *CentralIamRole) GetArn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Arn
}

// GetArnOk returns a tuple with the Arn field value
// and a boolean to check if the value has been set.
func (o *CentralIamRole) GetArnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Arn, true
}

// SetArn sets field value
func (o *CentralIamRole) SetArn(v string) {
	o.Arn = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *CentralIamRole) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *CentralIamRole) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *CentralIamRole) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUsages returns the Usages field value
func (o *CentralIamRole) GetUsages() []CentralIamRoleUsage {
	if o == nil {
		var ret []CentralIamRoleUsage
		return ret
	}

	return o.Usages
}

// GetUsagesOk returns a tuple with the Usages field value
// and a boolean to check if the value has been set.
func (o *CentralIamRole) GetUsagesOk() ([]CentralIamRoleUsage, bool) {
	if o == nil {
		return nil, false
	}
	return o.Usages, true
}

// SetUsages sets field value
func (o *CentralIamRole) SetUsages(v []CentralIamRoleUsage) {
	o.Usages = v
}

func (o CentralIamRole) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CentralIamRole) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["arn"] = o.Arn
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["usages"] = o.Usages
	return toSerialize, nil
}

func (o *CentralIamRole) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"arn",
		"created_at",
		"usages",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCentralIamRole := _CentralIamRole{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCentralIamRole)

	if err != nil {
		return err
	}

	*o = CentralIamRole(varCentralIamRole)

	return err
}

type NullableCentralIamRole struct {
	value *CentralIamRole
	isSet bool
}

func (v NullableCentralIamRole) Get() *CentralIamRole {
	return v.value
}

func (v *NullableCentralIamRole) Set(val *CentralIamRole) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralIamRole) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralIamRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralIamRole(val *CentralIamRole) *NullableCentralIamRole {
	return &NullableCentralIamRole{value: val, isSet: true}
}

func (v NullableCentralIamRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralIamRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
