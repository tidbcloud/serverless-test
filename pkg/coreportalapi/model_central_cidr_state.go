/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"encoding/json"
	"fmt"
)

// CentralCidrState Enum for CIDR state.   - STATE_UNSPECIFIED: Unspecified state.  - STATE_ACTIVE: The CIDR is active.  - STATE_INACTIVE: The CIDR is inactive.
type CentralCidrState string

// List of centralCidrState
const (
	CENTRALCIDRSTATE_STATE_UNSPECIFIED CentralCidrState = "STATE_UNSPECIFIED"
	CENTRALCIDRSTATE_STATE_ACTIVE      CentralCidrState = "STATE_ACTIVE"
	CENTRALCIDRSTATE_STATE_INACTIVE    CentralCidrState = "STATE_INACTIVE"
)

// All allowed values of CentralCidrState enum
var AllowedCentralCidrStateEnumValues = []CentralCidrState{
	"STATE_UNSPECIFIED",
	"STATE_ACTIVE",
	"STATE_INACTIVE",
}

func (v *CentralCidrState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CentralCidrState(value)
	for _, existing := range AllowedCentralCidrStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CentralCidrState", value)
}

// NewCentralCidrStateFromValue returns a pointer to a valid CentralCidrState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCentralCidrStateFromValue(v string) (*CentralCidrState, error) {
	ev := CentralCidrState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CentralCidrState: valid values are %v", v, AllowedCentralCidrStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CentralCidrState) IsValid() bool {
	for _, existing := range AllowedCentralCidrStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to centralCidrState value
func (v CentralCidrState) Ptr() *CentralCidrState {
	return &v
}

type NullableCentralCidrState struct {
	value *CentralCidrState
	isSet bool
}

func (v NullableCentralCidrState) Get() *CentralCidrState {
	return v.value
}

func (v *NullableCentralCidrState) Set(val *CentralCidrState) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralCidrState) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralCidrState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralCidrState(val *CentralCidrState) *NullableCentralCidrState {
	return &NullableCentralCidrState{value: val, isSet: true}
}

func (v NullableCentralCidrState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralCidrState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
