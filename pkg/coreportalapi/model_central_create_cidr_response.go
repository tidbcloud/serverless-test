/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CentralCreateCidrResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CentralCreateCidrResponse{}

// CentralCreateCidrResponse struct for CentralCreateCidrResponse
type CentralCreateCidrResponse struct {
	Id       string               `json:"id"`
	Overlaps []CentralCidrOverlap `json:"overlaps,omitempty"`
	// The max node IP of the CIDR.
	MaxNodeIp *int64          `json:"max_node_ip,omitempty"`
	BaseResp  CentralBaseResp `json:"base_resp"`
}

type _CentralCreateCidrResponse CentralCreateCidrResponse

// NewCentralCreateCidrResponse instantiates a new CentralCreateCidrResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCentralCreateCidrResponse(id string, baseResp CentralBaseResp) *CentralCreateCidrResponse {
	this := CentralCreateCidrResponse{}
	this.Id = id
	this.BaseResp = baseResp
	return &this
}

// NewCentralCreateCidrResponseWithDefaults instantiates a new CentralCreateCidrResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCentralCreateCidrResponseWithDefaults() *CentralCreateCidrResponse {
	this := CentralCreateCidrResponse{}
	return &this
}

// GetId returns the Id field value
func (o *CentralCreateCidrResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CentralCreateCidrResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CentralCreateCidrResponse) SetId(v string) {
	o.Id = v
}

// GetOverlaps returns the Overlaps field value if set, zero value otherwise.
func (o *CentralCreateCidrResponse) GetOverlaps() []CentralCidrOverlap {
	if o == nil || IsNil(o.Overlaps) {
		var ret []CentralCidrOverlap
		return ret
	}
	return o.Overlaps
}

// GetOverlapsOk returns a tuple with the Overlaps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CentralCreateCidrResponse) GetOverlapsOk() ([]CentralCidrOverlap, bool) {
	if o == nil || IsNil(o.Overlaps) {
		return nil, false
	}
	return o.Overlaps, true
}

// HasOverlaps returns a boolean if a field has been set.
func (o *CentralCreateCidrResponse) HasOverlaps() bool {
	if o != nil && !IsNil(o.Overlaps) {
		return true
	}

	return false
}

// SetOverlaps gets a reference to the given []CentralCidrOverlap and assigns it to the Overlaps field.
func (o *CentralCreateCidrResponse) SetOverlaps(v []CentralCidrOverlap) {
	o.Overlaps = v
}

// GetMaxNodeIp returns the MaxNodeIp field value if set, zero value otherwise.
func (o *CentralCreateCidrResponse) GetMaxNodeIp() int64 {
	if o == nil || IsNil(o.MaxNodeIp) {
		var ret int64
		return ret
	}
	return *o.MaxNodeIp
}

// GetMaxNodeIpOk returns a tuple with the MaxNodeIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CentralCreateCidrResponse) GetMaxNodeIpOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxNodeIp) {
		return nil, false
	}
	return o.MaxNodeIp, true
}

// HasMaxNodeIp returns a boolean if a field has been set.
func (o *CentralCreateCidrResponse) HasMaxNodeIp() bool {
	if o != nil && !IsNil(o.MaxNodeIp) {
		return true
	}

	return false
}

// SetMaxNodeIp gets a reference to the given int64 and assigns it to the MaxNodeIp field.
func (o *CentralCreateCidrResponse) SetMaxNodeIp(v int64) {
	o.MaxNodeIp = &v
}

// GetBaseResp returns the BaseResp field value
func (o *CentralCreateCidrResponse) GetBaseResp() CentralBaseResp {
	if o == nil {
		var ret CentralBaseResp
		return ret
	}

	return o.BaseResp
}

// GetBaseRespOk returns a tuple with the BaseResp field value
// and a boolean to check if the value has been set.
func (o *CentralCreateCidrResponse) GetBaseRespOk() (*CentralBaseResp, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseResp, true
}

// SetBaseResp sets field value
func (o *CentralCreateCidrResponse) SetBaseResp(v CentralBaseResp) {
	o.BaseResp = v
}

func (o CentralCreateCidrResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CentralCreateCidrResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Overlaps) {
		toSerialize["overlaps"] = o.Overlaps
	}
	if !IsNil(o.MaxNodeIp) {
		toSerialize["max_node_ip"] = o.MaxNodeIp
	}
	toSerialize["base_resp"] = o.BaseResp
	return toSerialize, nil
}

func (o *CentralCreateCidrResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"base_resp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCentralCreateCidrResponse := _CentralCreateCidrResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCentralCreateCidrResponse)

	if err != nil {
		return err
	}

	*o = CentralCreateCidrResponse(varCentralCreateCidrResponse)

	return err
}

type NullableCentralCreateCidrResponse struct {
	value *CentralCreateCidrResponse
	isSet bool
}

func (v NullableCentralCreateCidrResponse) Get() *CentralCreateCidrResponse {
	return v.value
}

func (v *NullableCentralCreateCidrResponse) Set(val *CentralCreateCidrResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralCreateCidrResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralCreateCidrResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralCreateCidrResponse(val *CentralCreateCidrResponse) *NullableCentralCreateCidrResponse {
	return &NullableCentralCreateCidrResponse{value: val, isSet: true}
}

func (v NullableCentralCreateCidrResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralCreateCidrResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
