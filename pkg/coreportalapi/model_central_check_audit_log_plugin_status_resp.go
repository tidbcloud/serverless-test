/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CentralCheckAuditLogPluginStatusResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CentralCheckAuditLogPluginStatusResp{}

// CentralCheckAuditLogPluginStatusResp struct for CentralCheckAuditLogPluginStatusResp
type CentralCheckAuditLogPluginStatusResp struct {
	Enabled  bool             `json:"enabled"`
	BaseResp *CentralBaseResp `json:"base_resp,omitempty"`
}

type _CentralCheckAuditLogPluginStatusResp CentralCheckAuditLogPluginStatusResp

// NewCentralCheckAuditLogPluginStatusResp instantiates a new CentralCheckAuditLogPluginStatusResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCentralCheckAuditLogPluginStatusResp(enabled bool) *CentralCheckAuditLogPluginStatusResp {
	this := CentralCheckAuditLogPluginStatusResp{}
	this.Enabled = enabled
	return &this
}

// NewCentralCheckAuditLogPluginStatusRespWithDefaults instantiates a new CentralCheckAuditLogPluginStatusResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCentralCheckAuditLogPluginStatusRespWithDefaults() *CentralCheckAuditLogPluginStatusResp {
	this := CentralCheckAuditLogPluginStatusResp{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *CentralCheckAuditLogPluginStatusResp) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *CentralCheckAuditLogPluginStatusResp) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *CentralCheckAuditLogPluginStatusResp) SetEnabled(v bool) {
	o.Enabled = v
}

// GetBaseResp returns the BaseResp field value if set, zero value otherwise.
func (o *CentralCheckAuditLogPluginStatusResp) GetBaseResp() CentralBaseResp {
	if o == nil || IsNil(o.BaseResp) {
		var ret CentralBaseResp
		return ret
	}
	return *o.BaseResp
}

// GetBaseRespOk returns a tuple with the BaseResp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CentralCheckAuditLogPluginStatusResp) GetBaseRespOk() (*CentralBaseResp, bool) {
	if o == nil || IsNil(o.BaseResp) {
		return nil, false
	}
	return o.BaseResp, true
}

// HasBaseResp returns a boolean if a field has been set.
func (o *CentralCheckAuditLogPluginStatusResp) HasBaseResp() bool {
	if o != nil && !IsNil(o.BaseResp) {
		return true
	}

	return false
}

// SetBaseResp gets a reference to the given CentralBaseResp and assigns it to the BaseResp field.
func (o *CentralCheckAuditLogPluginStatusResp) SetBaseResp(v CentralBaseResp) {
	o.BaseResp = &v
}

func (o CentralCheckAuditLogPluginStatusResp) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CentralCheckAuditLogPluginStatusResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	if !IsNil(o.BaseResp) {
		toSerialize["base_resp"] = o.BaseResp
	}
	return toSerialize, nil
}

func (o *CentralCheckAuditLogPluginStatusResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCentralCheckAuditLogPluginStatusResp := _CentralCheckAuditLogPluginStatusResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCentralCheckAuditLogPluginStatusResp)

	if err != nil {
		return err
	}

	*o = CentralCheckAuditLogPluginStatusResp(varCentralCheckAuditLogPluginStatusResp)

	return err
}

type NullableCentralCheckAuditLogPluginStatusResp struct {
	value *CentralCheckAuditLogPluginStatusResp
	isSet bool
}

func (v NullableCentralCheckAuditLogPluginStatusResp) Get() *CentralCheckAuditLogPluginStatusResp {
	return v.value
}

func (v *NullableCentralCheckAuditLogPluginStatusResp) Set(val *CentralCheckAuditLogPluginStatusResp) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralCheckAuditLogPluginStatusResp) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralCheckAuditLogPluginStatusResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralCheckAuditLogPluginStatusResp(val *CentralCheckAuditLogPluginStatusResp) *NullableCentralCheckAuditLogPluginStatusResp {
	return &NullableCentralCheckAuditLogPluginStatusResp{value: val, isSet: true}
}

func (v NullableCentralCheckAuditLogPluginStatusResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralCheckAuditLogPluginStatusResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
