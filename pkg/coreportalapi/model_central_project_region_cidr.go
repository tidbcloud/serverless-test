/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CentralProjectRegionCIDR type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CentralProjectRegionCIDR{}

// CentralProjectRegionCIDR struct for CentralProjectRegionCIDR
type CentralProjectRegionCIDR struct {
	Provider string              `json:"provider"`
	Cidr     string              `json:"cidr"`
	Regions  []CentralRegionCIDR `json:"regions"`
}

type _CentralProjectRegionCIDR CentralProjectRegionCIDR

// NewCentralProjectRegionCIDR instantiates a new CentralProjectRegionCIDR object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCentralProjectRegionCIDR(provider string, cidr string, regions []CentralRegionCIDR) *CentralProjectRegionCIDR {
	this := CentralProjectRegionCIDR{}
	this.Provider = provider
	this.Cidr = cidr
	this.Regions = regions
	return &this
}

// NewCentralProjectRegionCIDRWithDefaults instantiates a new CentralProjectRegionCIDR object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCentralProjectRegionCIDRWithDefaults() *CentralProjectRegionCIDR {
	this := CentralProjectRegionCIDR{}
	return &this
}

// GetProvider returns the Provider field value
func (o *CentralProjectRegionCIDR) GetProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *CentralProjectRegionCIDR) GetProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *CentralProjectRegionCIDR) SetProvider(v string) {
	o.Provider = v
}

// GetCidr returns the Cidr field value
func (o *CentralProjectRegionCIDR) GetCidr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value
// and a boolean to check if the value has been set.
func (o *CentralProjectRegionCIDR) GetCidrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cidr, true
}

// SetCidr sets field value
func (o *CentralProjectRegionCIDR) SetCidr(v string) {
	o.Cidr = v
}

// GetRegions returns the Regions field value
func (o *CentralProjectRegionCIDR) GetRegions() []CentralRegionCIDR {
	if o == nil {
		var ret []CentralRegionCIDR
		return ret
	}

	return o.Regions
}

// GetRegionsOk returns a tuple with the Regions field value
// and a boolean to check if the value has been set.
func (o *CentralProjectRegionCIDR) GetRegionsOk() ([]CentralRegionCIDR, bool) {
	if o == nil {
		return nil, false
	}
	return o.Regions, true
}

// SetRegions sets field value
func (o *CentralProjectRegionCIDR) SetRegions(v []CentralRegionCIDR) {
	o.Regions = v
}

func (o CentralProjectRegionCIDR) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CentralProjectRegionCIDR) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["provider"] = o.Provider
	toSerialize["cidr"] = o.Cidr
	toSerialize["regions"] = o.Regions
	return toSerialize, nil
}

func (o *CentralProjectRegionCIDR) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"provider",
		"cidr",
		"regions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCentralProjectRegionCIDR := _CentralProjectRegionCIDR{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCentralProjectRegionCIDR)

	if err != nil {
		return err
	}

	*o = CentralProjectRegionCIDR(varCentralProjectRegionCIDR)

	return err
}

type NullableCentralProjectRegionCIDR struct {
	value *CentralProjectRegionCIDR
	isSet bool
}

func (v NullableCentralProjectRegionCIDR) Get() *CentralProjectRegionCIDR {
	return v.value
}

func (v *NullableCentralProjectRegionCIDR) Set(val *CentralProjectRegionCIDR) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralProjectRegionCIDR) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralProjectRegionCIDR) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralProjectRegionCIDR(val *CentralProjectRegionCIDR) *NullableCentralProjectRegionCIDR {
	return &NullableCentralProjectRegionCIDR{value: val, isSet: true}
}

func (v NullableCentralProjectRegionCIDR) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralProjectRegionCIDR) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
