/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"encoding/json"
	"fmt"
)

// CentralPrivateLinkServiceStatus the model 'CentralPrivateLinkServiceStatus'
type CentralPrivateLinkServiceStatus string

// List of centralPrivateLinkServiceStatus
const (
	CENTRALPRIVATELINKSERVICESTATUS_NOT_CONFIGURE CentralPrivateLinkServiceStatus = "NOT_CONFIGURE"
	CENTRALPRIVATELINKSERVICESTATUS_CREATING      CentralPrivateLinkServiceStatus = "CREATING"
	CENTRALPRIVATELINKSERVICESTATUS_ACTIVE        CentralPrivateLinkServiceStatus = "ACTIVE"
	CENTRALPRIVATELINKSERVICESTATUS_DELETING      CentralPrivateLinkServiceStatus = "DELETING"
)

// All allowed values of CentralPrivateLinkServiceStatus enum
var AllowedCentralPrivateLinkServiceStatusEnumValues = []CentralPrivateLinkServiceStatus{
	"NOT_CONFIGURE",
	"CREATING",
	"ACTIVE",
	"DELETING",
}

func (v *CentralPrivateLinkServiceStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CentralPrivateLinkServiceStatus(value)
	for _, existing := range AllowedCentralPrivateLinkServiceStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CentralPrivateLinkServiceStatus", value)
}

// NewCentralPrivateLinkServiceStatusFromValue returns a pointer to a valid CentralPrivateLinkServiceStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCentralPrivateLinkServiceStatusFromValue(v string) (*CentralPrivateLinkServiceStatus, error) {
	ev := CentralPrivateLinkServiceStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CentralPrivateLinkServiceStatus: valid values are %v", v, AllowedCentralPrivateLinkServiceStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CentralPrivateLinkServiceStatus) IsValid() bool {
	for _, existing := range AllowedCentralPrivateLinkServiceStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to centralPrivateLinkServiceStatus value
func (v CentralPrivateLinkServiceStatus) Ptr() *CentralPrivateLinkServiceStatus {
	return &v
}

type NullableCentralPrivateLinkServiceStatus struct {
	value *CentralPrivateLinkServiceStatus
	isSet bool
}

func (v NullableCentralPrivateLinkServiceStatus) Get() *CentralPrivateLinkServiceStatus {
	return v.value
}

func (v *NullableCentralPrivateLinkServiceStatus) Set(val *CentralPrivateLinkServiceStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralPrivateLinkServiceStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralPrivateLinkServiceStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralPrivateLinkServiceStatus(val *CentralPrivateLinkServiceStatus) *NullableCentralPrivateLinkServiceStatus {
	return &NullableCentralPrivateLinkServiceStatus{value: val, isSet: true}
}

func (v NullableCentralPrivateLinkServiceStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralPrivateLinkServiceStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
