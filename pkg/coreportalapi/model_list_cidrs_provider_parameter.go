/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"encoding/json"
	"fmt"
)

// ListCidrsProviderParameter the model 'ListCidrsProviderParameter'
type ListCidrsProviderParameter string

// List of ListCidrs_provider_parameter
const (
	LISTCIDRSPROVIDERPARAMETER_CLOUD_PROVIDER_UNSPECIFIED ListCidrsProviderParameter = "CLOUD_PROVIDER_UNSPECIFIED"
	LISTCIDRSPROVIDERPARAMETER_AWS                        ListCidrsProviderParameter = "AWS"
	LISTCIDRSPROVIDERPARAMETER_GCP                        ListCidrsProviderParameter = "GCP"
)

// All allowed values of ListCidrsProviderParameter enum
var AllowedListCidrsProviderParameterEnumValues = []ListCidrsProviderParameter{
	"CLOUD_PROVIDER_UNSPECIFIED",
	"AWS",
	"GCP",
}

func (v *ListCidrsProviderParameter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ListCidrsProviderParameter(value)
	for _, existing := range AllowedListCidrsProviderParameterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ListCidrsProviderParameter", value)
}

// NewListCidrsProviderParameterFromValue returns a pointer to a valid ListCidrsProviderParameter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewListCidrsProviderParameterFromValue(v string) (*ListCidrsProviderParameter, error) {
	ev := ListCidrsProviderParameter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ListCidrsProviderParameter: valid values are %v", v, AllowedListCidrsProviderParameterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ListCidrsProviderParameter) IsValid() bool {
	for _, existing := range AllowedListCidrsProviderParameterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ListCidrs_provider_parameter value
func (v ListCidrsProviderParameter) Ptr() *ListCidrsProviderParameter {
	return &v
}

type NullableListCidrsProviderParameter struct {
	value *ListCidrsProviderParameter
	isSet bool
}

func (v NullableListCidrsProviderParameter) Get() *ListCidrsProviderParameter {
	return v.value
}

func (v *NullableListCidrsProviderParameter) Set(val *ListCidrsProviderParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableListCidrsProviderParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableListCidrsProviderParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListCidrsProviderParameter(val *ListCidrsProviderParameter) *NullableListCidrsProviderParameter {
	return &NullableListCidrsProviderParameter{value: val, isSet: true}
}

func (v NullableListCidrsProviderParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListCidrsProviderParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
