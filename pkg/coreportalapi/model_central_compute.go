/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CentralCompute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CentralCompute{}

// CentralCompute struct for CentralCompute
type CentralCompute struct {
	Cpu      float32 `json:"cpu"`
	MemoryMi int64   `json:"memory_mi"`
}

type _CentralCompute CentralCompute

// NewCentralCompute instantiates a new CentralCompute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCentralCompute(cpu float32, memoryMi int64) *CentralCompute {
	this := CentralCompute{}
	this.Cpu = cpu
	this.MemoryMi = memoryMi
	return &this
}

// NewCentralComputeWithDefaults instantiates a new CentralCompute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCentralComputeWithDefaults() *CentralCompute {
	this := CentralCompute{}
	return &this
}

// GetCpu returns the Cpu field value
func (o *CentralCompute) GetCpu() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value
// and a boolean to check if the value has been set.
func (o *CentralCompute) GetCpuOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cpu, true
}

// SetCpu sets field value
func (o *CentralCompute) SetCpu(v float32) {
	o.Cpu = v
}

// GetMemoryMi returns the MemoryMi field value
func (o *CentralCompute) GetMemoryMi() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MemoryMi
}

// GetMemoryMiOk returns a tuple with the MemoryMi field value
// and a boolean to check if the value has been set.
func (o *CentralCompute) GetMemoryMiOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MemoryMi, true
}

// SetMemoryMi sets field value
func (o *CentralCompute) SetMemoryMi(v int64) {
	o.MemoryMi = v
}

func (o CentralCompute) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CentralCompute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cpu"] = o.Cpu
	toSerialize["memory_mi"] = o.MemoryMi
	return toSerialize, nil
}

func (o *CentralCompute) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cpu",
		"memory_mi",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCentralCompute := _CentralCompute{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCentralCompute)

	if err != nil {
		return err
	}

	*o = CentralCompute(varCentralCompute)

	return err
}

type NullableCentralCompute struct {
	value *CentralCompute
	isSet bool
}

func (v NullableCentralCompute) Get() *CentralCompute {
	return v.value
}

func (v *NullableCentralCompute) Set(val *CentralCompute) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralCompute) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralCompute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralCompute(val *CentralCompute) *NullableCentralCompute {
	return &NullableCentralCompute{value: val, isSet: true}
}

func (v NullableCentralCompute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralCompute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
