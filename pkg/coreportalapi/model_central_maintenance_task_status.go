/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"encoding/json"
	"fmt"
)

// CentralMaintenanceTaskStatus the model 'CentralMaintenanceTaskStatus'
type CentralMaintenanceTaskStatus string

// List of centralMaintenanceTaskStatus
const (
	CENTRALMAINTENANCETASKSTATUS_STATUS_UNSPECIFIED CentralMaintenanceTaskStatus = "STATUS_UNSPECIFIED"
	CENTRALMAINTENANCETASKSTATUS_STATUS_PENDING     CentralMaintenanceTaskStatus = "STATUS_PENDING"
	CENTRALMAINTENANCETASKSTATUS_STATUS_RUNNING     CentralMaintenanceTaskStatus = "STATUS_RUNNING"
	CENTRALMAINTENANCETASKSTATUS_STATUS_DONE        CentralMaintenanceTaskStatus = "STATUS_DONE"
)

// All allowed values of CentralMaintenanceTaskStatus enum
var AllowedCentralMaintenanceTaskStatusEnumValues = []CentralMaintenanceTaskStatus{
	"STATUS_UNSPECIFIED",
	"STATUS_PENDING",
	"STATUS_RUNNING",
	"STATUS_DONE",
}

func (v *CentralMaintenanceTaskStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CentralMaintenanceTaskStatus(value)
	for _, existing := range AllowedCentralMaintenanceTaskStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CentralMaintenanceTaskStatus", value)
}

// NewCentralMaintenanceTaskStatusFromValue returns a pointer to a valid CentralMaintenanceTaskStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCentralMaintenanceTaskStatusFromValue(v string) (*CentralMaintenanceTaskStatus, error) {
	ev := CentralMaintenanceTaskStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CentralMaintenanceTaskStatus: valid values are %v", v, AllowedCentralMaintenanceTaskStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CentralMaintenanceTaskStatus) IsValid() bool {
	for _, existing := range AllowedCentralMaintenanceTaskStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to centralMaintenanceTaskStatus value
func (v CentralMaintenanceTaskStatus) Ptr() *CentralMaintenanceTaskStatus {
	return &v
}

type NullableCentralMaintenanceTaskStatus struct {
	value *CentralMaintenanceTaskStatus
	isSet bool
}

func (v NullableCentralMaintenanceTaskStatus) Get() *CentralMaintenanceTaskStatus {
	return v.value
}

func (v *NullableCentralMaintenanceTaskStatus) Set(val *CentralMaintenanceTaskStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralMaintenanceTaskStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralMaintenanceTaskStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralMaintenanceTaskStatus(val *CentralMaintenanceTaskStatus) *NullableCentralMaintenanceTaskStatus {
	return &NullableCentralMaintenanceTaskStatus{value: val, isSet: true}
}

func (v NullableCentralMaintenanceTaskStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralMaintenanceTaskStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
