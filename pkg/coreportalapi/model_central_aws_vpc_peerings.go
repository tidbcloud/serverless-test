/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CentralAwsVpcPeerings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CentralAwsVpcPeerings{}

// CentralAwsVpcPeerings struct for CentralAwsVpcPeerings
type CentralAwsVpcPeerings struct {
	Total int32                  `json:"total"`
	Items []CentralAwsVpcPeering `json:"items"`
}

type _CentralAwsVpcPeerings CentralAwsVpcPeerings

// NewCentralAwsVpcPeerings instantiates a new CentralAwsVpcPeerings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCentralAwsVpcPeerings(total int32, items []CentralAwsVpcPeering) *CentralAwsVpcPeerings {
	this := CentralAwsVpcPeerings{}
	this.Total = total
	this.Items = items
	return &this
}

// NewCentralAwsVpcPeeringsWithDefaults instantiates a new CentralAwsVpcPeerings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCentralAwsVpcPeeringsWithDefaults() *CentralAwsVpcPeerings {
	this := CentralAwsVpcPeerings{}
	return &this
}

// GetTotal returns the Total field value
func (o *CentralAwsVpcPeerings) GetTotal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *CentralAwsVpcPeerings) GetTotalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *CentralAwsVpcPeerings) SetTotal(v int32) {
	o.Total = v
}

// GetItems returns the Items field value
func (o *CentralAwsVpcPeerings) GetItems() []CentralAwsVpcPeering {
	if o == nil {
		var ret []CentralAwsVpcPeering
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *CentralAwsVpcPeerings) GetItemsOk() ([]CentralAwsVpcPeering, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *CentralAwsVpcPeerings) SetItems(v []CentralAwsVpcPeering) {
	o.Items = v
}

func (o CentralAwsVpcPeerings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CentralAwsVpcPeerings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["total"] = o.Total
	toSerialize["items"] = o.Items
	return toSerialize, nil
}

func (o *CentralAwsVpcPeerings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"total",
		"items",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCentralAwsVpcPeerings := _CentralAwsVpcPeerings{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCentralAwsVpcPeerings)

	if err != nil {
		return err
	}

	*o = CentralAwsVpcPeerings(varCentralAwsVpcPeerings)

	return err
}

type NullableCentralAwsVpcPeerings struct {
	value *CentralAwsVpcPeerings
	isSet bool
}

func (v NullableCentralAwsVpcPeerings) Get() *CentralAwsVpcPeerings {
	return v.value
}

func (v *NullableCentralAwsVpcPeerings) Set(val *CentralAwsVpcPeerings) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralAwsVpcPeerings) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralAwsVpcPeerings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralAwsVpcPeerings(val *CentralAwsVpcPeerings) *NullableCentralAwsVpcPeerings {
	return &NullableCentralAwsVpcPeerings{value: val, isSet: true}
}

func (v NullableCentralAwsVpcPeerings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralAwsVpcPeerings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
