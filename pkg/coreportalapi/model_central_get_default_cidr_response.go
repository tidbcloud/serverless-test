/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CentralGetDefaultCidrResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CentralGetDefaultCidrResponse{}

// CentralGetDefaultCidrResponse struct for CentralGetDefaultCidrResponse
type CentralGetDefaultCidrResponse struct {
	Name      string                          `json:"name"`
	Provider  CentralCloudRegionCloudProvider `json:"provider"`
	Region    CentralCloudRegion              `json:"region"`
	Cidr      string                          `json:"cidr"`
	ProjectId *string                         `json:"project_id,omitempty"`
	BaseResp  CentralBaseResp                 `json:"base_resp"`
}

type _CentralGetDefaultCidrResponse CentralGetDefaultCidrResponse

// NewCentralGetDefaultCidrResponse instantiates a new CentralGetDefaultCidrResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCentralGetDefaultCidrResponse(name string, provider CentralCloudRegionCloudProvider, region CentralCloudRegion, cidr string, baseResp CentralBaseResp) *CentralGetDefaultCidrResponse {
	this := CentralGetDefaultCidrResponse{}
	this.Name = name
	this.Provider = provider
	this.Region = region
	this.Cidr = cidr
	this.BaseResp = baseResp
	return &this
}

// NewCentralGetDefaultCidrResponseWithDefaults instantiates a new CentralGetDefaultCidrResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCentralGetDefaultCidrResponseWithDefaults() *CentralGetDefaultCidrResponse {
	this := CentralGetDefaultCidrResponse{}
	var provider CentralCloudRegionCloudProvider = CENTRALCLOUDREGIONCLOUDPROVIDER_CLOUD_PROVIDER_UNSPECIFIED
	this.Provider = provider
	return &this
}

// GetName returns the Name field value
func (o *CentralGetDefaultCidrResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CentralGetDefaultCidrResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CentralGetDefaultCidrResponse) SetName(v string) {
	o.Name = v
}

// GetProvider returns the Provider field value
func (o *CentralGetDefaultCidrResponse) GetProvider() CentralCloudRegionCloudProvider {
	if o == nil {
		var ret CentralCloudRegionCloudProvider
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *CentralGetDefaultCidrResponse) GetProviderOk() (*CentralCloudRegionCloudProvider, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *CentralGetDefaultCidrResponse) SetProvider(v CentralCloudRegionCloudProvider) {
	o.Provider = v
}

// GetRegion returns the Region field value
func (o *CentralGetDefaultCidrResponse) GetRegion() CentralCloudRegion {
	if o == nil {
		var ret CentralCloudRegion
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *CentralGetDefaultCidrResponse) GetRegionOk() (*CentralCloudRegion, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *CentralGetDefaultCidrResponse) SetRegion(v CentralCloudRegion) {
	o.Region = v
}

// GetCidr returns the Cidr field value
func (o *CentralGetDefaultCidrResponse) GetCidr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value
// and a boolean to check if the value has been set.
func (o *CentralGetDefaultCidrResponse) GetCidrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cidr, true
}

// SetCidr sets field value
func (o *CentralGetDefaultCidrResponse) SetCidr(v string) {
	o.Cidr = v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *CentralGetDefaultCidrResponse) GetProjectId() string {
	if o == nil || IsNil(o.ProjectId) {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CentralGetDefaultCidrResponse) GetProjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *CentralGetDefaultCidrResponse) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *CentralGetDefaultCidrResponse) SetProjectId(v string) {
	o.ProjectId = &v
}

// GetBaseResp returns the BaseResp field value
func (o *CentralGetDefaultCidrResponse) GetBaseResp() CentralBaseResp {
	if o == nil {
		var ret CentralBaseResp
		return ret
	}

	return o.BaseResp
}

// GetBaseRespOk returns a tuple with the BaseResp field value
// and a boolean to check if the value has been set.
func (o *CentralGetDefaultCidrResponse) GetBaseRespOk() (*CentralBaseResp, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseResp, true
}

// SetBaseResp sets field value
func (o *CentralGetDefaultCidrResponse) SetBaseResp(v CentralBaseResp) {
	o.BaseResp = v
}

func (o CentralGetDefaultCidrResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CentralGetDefaultCidrResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["provider"] = o.Provider
	toSerialize["region"] = o.Region
	toSerialize["cidr"] = o.Cidr
	if !IsNil(o.ProjectId) {
		toSerialize["project_id"] = o.ProjectId
	}
	toSerialize["base_resp"] = o.BaseResp
	return toSerialize, nil
}

func (o *CentralGetDefaultCidrResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"provider",
		"region",
		"cidr",
		"base_resp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCentralGetDefaultCidrResponse := _CentralGetDefaultCidrResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCentralGetDefaultCidrResponse)

	if err != nil {
		return err
	}

	*o = CentralGetDefaultCidrResponse(varCentralGetDefaultCidrResponse)

	return err
}

type NullableCentralGetDefaultCidrResponse struct {
	value *CentralGetDefaultCidrResponse
	isSet bool
}

func (v NullableCentralGetDefaultCidrResponse) Get() *CentralGetDefaultCidrResponse {
	return v.value
}

func (v *NullableCentralGetDefaultCidrResponse) Set(val *CentralGetDefaultCidrResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralGetDefaultCidrResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralGetDefaultCidrResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralGetDefaultCidrResponse(val *CentralGetDefaultCidrResponse) *NullableCentralGetDefaultCidrResponse {
	return &NullableCentralGetDefaultCidrResponse{value: val, isSet: true}
}

func (v NullableCentralGetDefaultCidrResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralGetDefaultCidrResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
