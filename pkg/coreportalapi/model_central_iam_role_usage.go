/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CentralIamRoleUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CentralIamRoleUsage{}

// CentralIamRoleUsage struct for CentralIamRoleUsage
type CentralIamRoleUsage struct {
	ServiceName  string  `json:"service_name"`
	ProviderName string  `json:"provider_name"`
	Region       *string `json:"region,omitempty"`
	RegionName   string  `json:"region_name"`
}

type _CentralIamRoleUsage CentralIamRoleUsage

// NewCentralIamRoleUsage instantiates a new CentralIamRoleUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCentralIamRoleUsage(serviceName string, providerName string, regionName string) *CentralIamRoleUsage {
	this := CentralIamRoleUsage{}
	this.ServiceName = serviceName
	this.ProviderName = providerName
	this.RegionName = regionName
	return &this
}

// NewCentralIamRoleUsageWithDefaults instantiates a new CentralIamRoleUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCentralIamRoleUsageWithDefaults() *CentralIamRoleUsage {
	this := CentralIamRoleUsage{}
	return &this
}

// GetServiceName returns the ServiceName field value
func (o *CentralIamRoleUsage) GetServiceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value
// and a boolean to check if the value has been set.
func (o *CentralIamRoleUsage) GetServiceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceName, true
}

// SetServiceName sets field value
func (o *CentralIamRoleUsage) SetServiceName(v string) {
	o.ServiceName = v
}

// GetProviderName returns the ProviderName field value
func (o *CentralIamRoleUsage) GetProviderName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderName
}

// GetProviderNameOk returns a tuple with the ProviderName field value
// and a boolean to check if the value has been set.
func (o *CentralIamRoleUsage) GetProviderNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderName, true
}

// SetProviderName sets field value
func (o *CentralIamRoleUsage) SetProviderName(v string) {
	o.ProviderName = v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *CentralIamRoleUsage) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CentralIamRoleUsage) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *CentralIamRoleUsage) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *CentralIamRoleUsage) SetRegion(v string) {
	o.Region = &v
}

// GetRegionName returns the RegionName field value
func (o *CentralIamRoleUsage) GetRegionName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegionName
}

// GetRegionNameOk returns a tuple with the RegionName field value
// and a boolean to check if the value has been set.
func (o *CentralIamRoleUsage) GetRegionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegionName, true
}

// SetRegionName sets field value
func (o *CentralIamRoleUsage) SetRegionName(v string) {
	o.RegionName = v
}

func (o CentralIamRoleUsage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CentralIamRoleUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["service_name"] = o.ServiceName
	toSerialize["provider_name"] = o.ProviderName
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	toSerialize["region_name"] = o.RegionName
	return toSerialize, nil
}

func (o *CentralIamRoleUsage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"service_name",
		"provider_name",
		"region_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCentralIamRoleUsage := _CentralIamRoleUsage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCentralIamRoleUsage)

	if err != nil {
		return err
	}

	*o = CentralIamRoleUsage(varCentralIamRoleUsage)

	return err
}

type NullableCentralIamRoleUsage struct {
	value *CentralIamRoleUsage
	isSet bool
}

func (v NullableCentralIamRoleUsage) Get() *CentralIamRoleUsage {
	return v.value
}

func (v *NullableCentralIamRoleUsage) Set(val *CentralIamRoleUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralIamRoleUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralIamRoleUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralIamRoleUsage(val *CentralIamRoleUsage) *NullableCentralIamRoleUsage {
	return &NullableCentralIamRoleUsage{value: val, isSet: true}
}

func (v NullableCentralIamRoleUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralIamRoleUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
