/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"encoding/json"
	"fmt"
)

// CentralPrivateEndpointStatus the model 'CentralPrivateEndpointStatus'
type CentralPrivateEndpointStatus string

// List of centralPrivateEndpointStatus
const (
	CENTRALPRIVATEENDPOINTSTATUS_NO_VPC_PEERING    CentralPrivateEndpointStatus = "NO_VPC_PEERING"
	CENTRALPRIVATEENDPOINTSTATUS_VPC_PEERING_ERROR CentralPrivateEndpointStatus = "VPC_PEERING_ERROR"
	CENTRALPRIVATEENDPOINTSTATUS_NO_DOMAIN         CentralPrivateEndpointStatus = "NO_DOMAIN"
	CENTRALPRIVATEENDPOINTSTATUS_CREATING          CentralPrivateEndpointStatus = "CREATING"
	CENTRALPRIVATEENDPOINTSTATUS_NORMAL            CentralPrivateEndpointStatus = "NORMAL"
)

// All allowed values of CentralPrivateEndpointStatus enum
var AllowedCentralPrivateEndpointStatusEnumValues = []CentralPrivateEndpointStatus{
	"NO_VPC_PEERING",
	"VPC_PEERING_ERROR",
	"NO_DOMAIN",
	"CREATING",
	"NORMAL",
}

func (v *CentralPrivateEndpointStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CentralPrivateEndpointStatus(value)
	for _, existing := range AllowedCentralPrivateEndpointStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CentralPrivateEndpointStatus", value)
}

// NewCentralPrivateEndpointStatusFromValue returns a pointer to a valid CentralPrivateEndpointStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCentralPrivateEndpointStatusFromValue(v string) (*CentralPrivateEndpointStatus, error) {
	ev := CentralPrivateEndpointStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CentralPrivateEndpointStatus: valid values are %v", v, AllowedCentralPrivateEndpointStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CentralPrivateEndpointStatus) IsValid() bool {
	for _, existing := range AllowedCentralPrivateEndpointStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to centralPrivateEndpointStatus value
func (v CentralPrivateEndpointStatus) Ptr() *CentralPrivateEndpointStatus {
	return &v
}

type NullableCentralPrivateEndpointStatus struct {
	value *CentralPrivateEndpointStatus
	isSet bool
}

func (v NullableCentralPrivateEndpointStatus) Get() *CentralPrivateEndpointStatus {
	return v.value
}

func (v *NullableCentralPrivateEndpointStatus) Set(val *CentralPrivateEndpointStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralPrivateEndpointStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralPrivateEndpointStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralPrivateEndpointStatus(val *CentralPrivateEndpointStatus) *NullableCentralPrivateEndpointStatus {
	return &NullableCentralPrivateEndpointStatus{value: val, isSet: true}
}

func (v NullableCentralPrivateEndpointStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralPrivateEndpointStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
