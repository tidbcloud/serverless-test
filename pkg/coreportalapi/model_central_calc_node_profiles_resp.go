/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CentralCalcNodeProfilesResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CentralCalcNodeProfilesResp{}

// CentralCalcNodeProfilesResp struct for CentralCalcNodeProfilesResp
type CentralCalcNodeProfilesResp struct {
	NodeProfiles []CentralComponentNodeProfiles `json:"node_profiles"`
	BaseResp     CentralBaseResp                `json:"base_resp"`
}

type _CentralCalcNodeProfilesResp CentralCalcNodeProfilesResp

// NewCentralCalcNodeProfilesResp instantiates a new CentralCalcNodeProfilesResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCentralCalcNodeProfilesResp(nodeProfiles []CentralComponentNodeProfiles, baseResp CentralBaseResp) *CentralCalcNodeProfilesResp {
	this := CentralCalcNodeProfilesResp{}
	this.NodeProfiles = nodeProfiles
	this.BaseResp = baseResp
	return &this
}

// NewCentralCalcNodeProfilesRespWithDefaults instantiates a new CentralCalcNodeProfilesResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCentralCalcNodeProfilesRespWithDefaults() *CentralCalcNodeProfilesResp {
	this := CentralCalcNodeProfilesResp{}
	return &this
}

// GetNodeProfiles returns the NodeProfiles field value
func (o *CentralCalcNodeProfilesResp) GetNodeProfiles() []CentralComponentNodeProfiles {
	if o == nil {
		var ret []CentralComponentNodeProfiles
		return ret
	}

	return o.NodeProfiles
}

// GetNodeProfilesOk returns a tuple with the NodeProfiles field value
// and a boolean to check if the value has been set.
func (o *CentralCalcNodeProfilesResp) GetNodeProfilesOk() ([]CentralComponentNodeProfiles, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodeProfiles, true
}

// SetNodeProfiles sets field value
func (o *CentralCalcNodeProfilesResp) SetNodeProfiles(v []CentralComponentNodeProfiles) {
	o.NodeProfiles = v
}

// GetBaseResp returns the BaseResp field value
func (o *CentralCalcNodeProfilesResp) GetBaseResp() CentralBaseResp {
	if o == nil {
		var ret CentralBaseResp
		return ret
	}

	return o.BaseResp
}

// GetBaseRespOk returns a tuple with the BaseResp field value
// and a boolean to check if the value has been set.
func (o *CentralCalcNodeProfilesResp) GetBaseRespOk() (*CentralBaseResp, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseResp, true
}

// SetBaseResp sets field value
func (o *CentralCalcNodeProfilesResp) SetBaseResp(v CentralBaseResp) {
	o.BaseResp = v
}

func (o CentralCalcNodeProfilesResp) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CentralCalcNodeProfilesResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["node_profiles"] = o.NodeProfiles
	toSerialize["base_resp"] = o.BaseResp
	return toSerialize, nil
}

func (o *CentralCalcNodeProfilesResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"node_profiles",
		"base_resp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCentralCalcNodeProfilesResp := _CentralCalcNodeProfilesResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCentralCalcNodeProfilesResp)

	if err != nil {
		return err
	}

	*o = CentralCalcNodeProfilesResp(varCentralCalcNodeProfilesResp)

	return err
}

type NullableCentralCalcNodeProfilesResp struct {
	value *CentralCalcNodeProfilesResp
	isSet bool
}

func (v NullableCentralCalcNodeProfilesResp) Get() *CentralCalcNodeProfilesResp {
	return v.value
}

func (v *NullableCentralCalcNodeProfilesResp) Set(val *CentralCalcNodeProfilesResp) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralCalcNodeProfilesResp) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralCalcNodeProfilesResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralCalcNodeProfilesResp(val *CentralCalcNodeProfilesResp) *NullableCentralCalcNodeProfilesResp {
	return &NullableCentralCalcNodeProfilesResp{value: val, isSet: true}
}

func (v NullableCentralCalcNodeProfilesResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralCalcNodeProfilesResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
