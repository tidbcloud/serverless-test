/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"encoding/json"
	"fmt"
)

// GetClusterCACertificateTypeParameter the model 'GetClusterCACertificateTypeParameter'
type GetClusterCACertificateTypeParameter string

// List of GetClusterCACertificate_type_parameter
const (
	GETCLUSTERCACERTIFICATETYPEPARAMETER_DOWNLOAD_URL GetClusterCACertificateTypeParameter = "DOWNLOAD_URL"
	GETCLUSTERCACERTIFICATETYPEPARAMETER_PEM          GetClusterCACertificateTypeParameter = "PEM"
)

// All allowed values of GetClusterCACertificateTypeParameter enum
var AllowedGetClusterCACertificateTypeParameterEnumValues = []GetClusterCACertificateTypeParameter{
	"DOWNLOAD_URL",
	"PEM",
}

func (v *GetClusterCACertificateTypeParameter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GetClusterCACertificateTypeParameter(value)
	for _, existing := range AllowedGetClusterCACertificateTypeParameterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GetClusterCACertificateTypeParameter", value)
}

// NewGetClusterCACertificateTypeParameterFromValue returns a pointer to a valid GetClusterCACertificateTypeParameter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGetClusterCACertificateTypeParameterFromValue(v string) (*GetClusterCACertificateTypeParameter, error) {
	ev := GetClusterCACertificateTypeParameter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GetClusterCACertificateTypeParameter: valid values are %v", v, AllowedGetClusterCACertificateTypeParameterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GetClusterCACertificateTypeParameter) IsValid() bool {
	for _, existing := range AllowedGetClusterCACertificateTypeParameterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GetClusterCACertificate_type_parameter value
func (v GetClusterCACertificateTypeParameter) Ptr() *GetClusterCACertificateTypeParameter {
	return &v
}

type NullableGetClusterCACertificateTypeParameter struct {
	value *GetClusterCACertificateTypeParameter
	isSet bool
}

func (v NullableGetClusterCACertificateTypeParameter) Get() *GetClusterCACertificateTypeParameter {
	return v.value
}

func (v *NullableGetClusterCACertificateTypeParameter) Set(val *GetClusterCACertificateTypeParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableGetClusterCACertificateTypeParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableGetClusterCACertificateTypeParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetClusterCACertificateTypeParameter(val *GetClusterCACertificateTypeParameter) *NullableGetClusterCACertificateTypeParameter {
	return &NullableGetClusterCACertificateTypeParameter{value: val, isSet: true}
}

func (v NullableGetClusterCACertificateTypeParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetClusterCACertificateTypeParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
