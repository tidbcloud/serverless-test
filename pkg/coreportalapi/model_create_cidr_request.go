/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateCidrRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateCidrRequest{}

// CreateCidrRequest struct for CreateCidrRequest
type CreateCidrRequest struct {
	// Required. The CIDR setting by user.
	Cidr   string             `json:"cidr"`
	Region CentralCloudRegion `json:"region"`
	// Optional. If true, only validate the CIDR, do not create it.
	ValidateOnly *bool `json:"validate_only,omitempty"`
}

type _CreateCidrRequest CreateCidrRequest

// NewCreateCidrRequest instantiates a new CreateCidrRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateCidrRequest(cidr string, region CentralCloudRegion) *CreateCidrRequest {
	this := CreateCidrRequest{}
	this.Cidr = cidr
	this.Region = region
	return &this
}

// NewCreateCidrRequestWithDefaults instantiates a new CreateCidrRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateCidrRequestWithDefaults() *CreateCidrRequest {
	this := CreateCidrRequest{}
	return &this
}

// GetCidr returns the Cidr field value
func (o *CreateCidrRequest) GetCidr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value
// and a boolean to check if the value has been set.
func (o *CreateCidrRequest) GetCidrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cidr, true
}

// SetCidr sets field value
func (o *CreateCidrRequest) SetCidr(v string) {
	o.Cidr = v
}

// GetRegion returns the Region field value
func (o *CreateCidrRequest) GetRegion() CentralCloudRegion {
	if o == nil {
		var ret CentralCloudRegion
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *CreateCidrRequest) GetRegionOk() (*CentralCloudRegion, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *CreateCidrRequest) SetRegion(v CentralCloudRegion) {
	o.Region = v
}

// GetValidateOnly returns the ValidateOnly field value if set, zero value otherwise.
func (o *CreateCidrRequest) GetValidateOnly() bool {
	if o == nil || IsNil(o.ValidateOnly) {
		var ret bool
		return ret
	}
	return *o.ValidateOnly
}

// GetValidateOnlyOk returns a tuple with the ValidateOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCidrRequest) GetValidateOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ValidateOnly) {
		return nil, false
	}
	return o.ValidateOnly, true
}

// HasValidateOnly returns a boolean if a field has been set.
func (o *CreateCidrRequest) HasValidateOnly() bool {
	if o != nil && !IsNil(o.ValidateOnly) {
		return true
	}

	return false
}

// SetValidateOnly gets a reference to the given bool and assigns it to the ValidateOnly field.
func (o *CreateCidrRequest) SetValidateOnly(v bool) {
	o.ValidateOnly = &v
}

func (o CreateCidrRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateCidrRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cidr"] = o.Cidr
	toSerialize["region"] = o.Region
	if !IsNil(o.ValidateOnly) {
		toSerialize["validate_only"] = o.ValidateOnly
	}
	return toSerialize, nil
}

func (o *CreateCidrRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cidr",
		"region",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateCidrRequest := _CreateCidrRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateCidrRequest)

	if err != nil {
		return err
	}

	*o = CreateCidrRequest(varCreateCidrRequest)

	return err
}

type NullableCreateCidrRequest struct {
	value *CreateCidrRequest
	isSet bool
}

func (v NullableCreateCidrRequest) Get() *CreateCidrRequest {
	return v.value
}

func (v *NullableCreateCidrRequest) Set(val *CreateCidrRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateCidrRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateCidrRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateCidrRequest(val *CreateCidrRequest) *NullableCreateCidrRequest {
	return &NullableCreateCidrRequest{value: val, isSet: true}
}

func (v NullableCreateCidrRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateCidrRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
