/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"encoding/json"
	"fmt"
)

// CentralTiDBNodeType the model 'CentralTiDBNodeType'
type CentralTiDBNodeType string

// List of centralTiDBNodeType
const (
	CENTRALTIDBNODETYPE_COMPUTING CentralTiDBNodeType = "COMPUTING"
)

// All allowed values of CentralTiDBNodeType enum
var AllowedCentralTiDBNodeTypeEnumValues = []CentralTiDBNodeType{
	"COMPUTING",
}

func (v *CentralTiDBNodeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CentralTiDBNodeType(value)
	for _, existing := range AllowedCentralTiDBNodeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CentralTiDBNodeType", value)
}

// NewCentralTiDBNodeTypeFromValue returns a pointer to a valid CentralTiDBNodeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCentralTiDBNodeTypeFromValue(v string) (*CentralTiDBNodeType, error) {
	ev := CentralTiDBNodeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CentralTiDBNodeType: valid values are %v", v, AllowedCentralTiDBNodeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CentralTiDBNodeType) IsValid() bool {
	for _, existing := range AllowedCentralTiDBNodeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to centralTiDBNodeType value
func (v CentralTiDBNodeType) Ptr() *CentralTiDBNodeType {
	return &v
}

type NullableCentralTiDBNodeType struct {
	value *CentralTiDBNodeType
	isSet bool
}

func (v NullableCentralTiDBNodeType) Get() *CentralTiDBNodeType {
	return v.value
}

func (v *NullableCentralTiDBNodeType) Set(val *CentralTiDBNodeType) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralTiDBNodeType) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralTiDBNodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralTiDBNodeType(val *CentralTiDBNodeType) *NullableCentralTiDBNodeType {
	return &NullableCentralTiDBNodeType{value: val, isSet: true}
}

func (v NullableCentralTiDBNodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralTiDBNodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
