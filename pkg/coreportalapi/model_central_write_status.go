/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"encoding/json"
	"fmt"
)

// CentralWriteStatus the model 'CentralWriteStatus'
type CentralWriteStatus string

// List of centralWriteStatus
const (
	CENTRALWRITESTATUS_WRITABLE CentralWriteStatus = "WRITABLE"
	CENTRALWRITESTATUS_READONLY CentralWriteStatus = "READONLY"
)

// All allowed values of CentralWriteStatus enum
var AllowedCentralWriteStatusEnumValues = []CentralWriteStatus{
	"WRITABLE",
	"READONLY",
}

func (v *CentralWriteStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CentralWriteStatus(value)
	for _, existing := range AllowedCentralWriteStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CentralWriteStatus", value)
}

// NewCentralWriteStatusFromValue returns a pointer to a valid CentralWriteStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCentralWriteStatusFromValue(v string) (*CentralWriteStatus, error) {
	ev := CentralWriteStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CentralWriteStatus: valid values are %v", v, AllowedCentralWriteStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CentralWriteStatus) IsValid() bool {
	for _, existing := range AllowedCentralWriteStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to centralWriteStatus value
func (v CentralWriteStatus) Ptr() *CentralWriteStatus {
	return &v
}

type NullableCentralWriteStatus struct {
	value *CentralWriteStatus
	isSet bool
}

func (v NullableCentralWriteStatus) Get() *CentralWriteStatus {
	return v.value
}

func (v *NullableCentralWriteStatus) Set(val *CentralWriteStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralWriteStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralWriteStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralWriteStatus(val *CentralWriteStatus) *NullableCentralWriteStatus {
	return &NullableCentralWriteStatus{value: val, isSet: true}
}

func (v NullableCentralWriteStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralWriteStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
