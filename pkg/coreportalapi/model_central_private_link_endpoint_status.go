/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"encoding/json"
	"fmt"
)

// CentralPrivateLinkEndpointStatus the model 'CentralPrivateLinkEndpointStatus'
type CentralPrivateLinkEndpointStatus string

// List of centralPrivateLinkEndpointStatus
const (
	CENTRALPRIVATELINKENDPOINTSTATUS_NOT_CONFIGURE CentralPrivateLinkEndpointStatus = "NOT_CONFIGURE"
	CENTRALPRIVATELINKENDPOINTSTATUS_PENDING       CentralPrivateLinkEndpointStatus = "PENDING"
	CENTRALPRIVATELINKENDPOINTSTATUS_ACTIVE        CentralPrivateLinkEndpointStatus = "ACTIVE"
	CENTRALPRIVATELINKENDPOINTSTATUS_DELETING      CentralPrivateLinkEndpointStatus = "DELETING"
	CENTRALPRIVATELINKENDPOINTSTATUS_FAILED        CentralPrivateLinkEndpointStatus = "FAILED"
)

// All allowed values of CentralPrivateLinkEndpointStatus enum
var AllowedCentralPrivateLinkEndpointStatusEnumValues = []CentralPrivateLinkEndpointStatus{
	"NOT_CONFIGURE",
	"PENDING",
	"ACTIVE",
	"DELETING",
	"FAILED",
}

func (v *CentralPrivateLinkEndpointStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CentralPrivateLinkEndpointStatus(value)
	for _, existing := range AllowedCentralPrivateLinkEndpointStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CentralPrivateLinkEndpointStatus", value)
}

// NewCentralPrivateLinkEndpointStatusFromValue returns a pointer to a valid CentralPrivateLinkEndpointStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCentralPrivateLinkEndpointStatusFromValue(v string) (*CentralPrivateLinkEndpointStatus, error) {
	ev := CentralPrivateLinkEndpointStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CentralPrivateLinkEndpointStatus: valid values are %v", v, AllowedCentralPrivateLinkEndpointStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CentralPrivateLinkEndpointStatus) IsValid() bool {
	for _, existing := range AllowedCentralPrivateLinkEndpointStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to centralPrivateLinkEndpointStatus value
func (v CentralPrivateLinkEndpointStatus) Ptr() *CentralPrivateLinkEndpointStatus {
	return &v
}

type NullableCentralPrivateLinkEndpointStatus struct {
	value *CentralPrivateLinkEndpointStatus
	isSet bool
}

func (v NullableCentralPrivateLinkEndpointStatus) Get() *CentralPrivateLinkEndpointStatus {
	return v.value
}

func (v *NullableCentralPrivateLinkEndpointStatus) Set(val *CentralPrivateLinkEndpointStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralPrivateLinkEndpointStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralPrivateLinkEndpointStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralPrivateLinkEndpointStatus(val *CentralPrivateLinkEndpointStatus) *NullableCentralPrivateLinkEndpointStatus {
	return &NullableCentralPrivateLinkEndpointStatus{value: val, isSet: true}
}

func (v NullableCentralPrivateLinkEndpointStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralPrivateLinkEndpointStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
