/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CentralGenClusterNameResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CentralGenClusterNameResp{}

// CentralGenClusterNameResp struct for CentralGenClusterNameResp
type CentralGenClusterNameResp struct {
	Name     string          `json:"name"`
	BaseResp CentralBaseResp `json:"base_resp"`
}

type _CentralGenClusterNameResp CentralGenClusterNameResp

// NewCentralGenClusterNameResp instantiates a new CentralGenClusterNameResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCentralGenClusterNameResp(name string, baseResp CentralBaseResp) *CentralGenClusterNameResp {
	this := CentralGenClusterNameResp{}
	this.Name = name
	this.BaseResp = baseResp
	return &this
}

// NewCentralGenClusterNameRespWithDefaults instantiates a new CentralGenClusterNameResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCentralGenClusterNameRespWithDefaults() *CentralGenClusterNameResp {
	this := CentralGenClusterNameResp{}
	return &this
}

// GetName returns the Name field value
func (o *CentralGenClusterNameResp) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CentralGenClusterNameResp) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CentralGenClusterNameResp) SetName(v string) {
	o.Name = v
}

// GetBaseResp returns the BaseResp field value
func (o *CentralGenClusterNameResp) GetBaseResp() CentralBaseResp {
	if o == nil {
		var ret CentralBaseResp
		return ret
	}

	return o.BaseResp
}

// GetBaseRespOk returns a tuple with the BaseResp field value
// and a boolean to check if the value has been set.
func (o *CentralGenClusterNameResp) GetBaseRespOk() (*CentralBaseResp, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseResp, true
}

// SetBaseResp sets field value
func (o *CentralGenClusterNameResp) SetBaseResp(v CentralBaseResp) {
	o.BaseResp = v
}

func (o CentralGenClusterNameResp) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CentralGenClusterNameResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["base_resp"] = o.BaseResp
	return toSerialize, nil
}

func (o *CentralGenClusterNameResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"base_resp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCentralGenClusterNameResp := _CentralGenClusterNameResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCentralGenClusterNameResp)

	if err != nil {
		return err
	}

	*o = CentralGenClusterNameResp(varCentralGenClusterNameResp)

	return err
}

type NullableCentralGenClusterNameResp struct {
	value *CentralGenClusterNameResp
	isSet bool
}

func (v NullableCentralGenClusterNameResp) Get() *CentralGenClusterNameResp {
	return v.value
}

func (v *NullableCentralGenClusterNameResp) Set(val *CentralGenClusterNameResp) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralGenClusterNameResp) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralGenClusterNameResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralGenClusterNameResp(val *CentralGenClusterNameResp) *NullableCentralGenClusterNameResp {
	return &NullableCentralGenClusterNameResp{value: val, isSet: true}
}

func (v NullableCentralGenClusterNameResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralGenClusterNameResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
