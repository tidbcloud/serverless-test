/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CentralProjectCIDR type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CentralProjectCIDR{}

// CentralProjectCIDR struct for CentralProjectCIDR
type CentralProjectCIDR struct {
	Cidr       string `json:"cidr"`
	IsDefault  bool   `json:"is_default"`
	RegionCidr string `json:"region_cidr"`
}

type _CentralProjectCIDR CentralProjectCIDR

// NewCentralProjectCIDR instantiates a new CentralProjectCIDR object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCentralProjectCIDR(cidr string, isDefault bool, regionCidr string) *CentralProjectCIDR {
	this := CentralProjectCIDR{}
	this.Cidr = cidr
	this.IsDefault = isDefault
	this.RegionCidr = regionCidr
	return &this
}

// NewCentralProjectCIDRWithDefaults instantiates a new CentralProjectCIDR object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCentralProjectCIDRWithDefaults() *CentralProjectCIDR {
	this := CentralProjectCIDR{}
	return &this
}

// GetCidr returns the Cidr field value
func (o *CentralProjectCIDR) GetCidr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value
// and a boolean to check if the value has been set.
func (o *CentralProjectCIDR) GetCidrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cidr, true
}

// SetCidr sets field value
func (o *CentralProjectCIDR) SetCidr(v string) {
	o.Cidr = v
}

// GetIsDefault returns the IsDefault field value
func (o *CentralProjectCIDR) GetIsDefault() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value
// and a boolean to check if the value has been set.
func (o *CentralProjectCIDR) GetIsDefaultOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsDefault, true
}

// SetIsDefault sets field value
func (o *CentralProjectCIDR) SetIsDefault(v bool) {
	o.IsDefault = v
}

// GetRegionCidr returns the RegionCidr field value
func (o *CentralProjectCIDR) GetRegionCidr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegionCidr
}

// GetRegionCidrOk returns a tuple with the RegionCidr field value
// and a boolean to check if the value has been set.
func (o *CentralProjectCIDR) GetRegionCidrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegionCidr, true
}

// SetRegionCidr sets field value
func (o *CentralProjectCIDR) SetRegionCidr(v string) {
	o.RegionCidr = v
}

func (o CentralProjectCIDR) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CentralProjectCIDR) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cidr"] = o.Cidr
	toSerialize["is_default"] = o.IsDefault
	toSerialize["region_cidr"] = o.RegionCidr
	return toSerialize, nil
}

func (o *CentralProjectCIDR) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cidr",
		"is_default",
		"region_cidr",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCentralProjectCIDR := _CentralProjectCIDR{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCentralProjectCIDR)

	if err != nil {
		return err
	}

	*o = CentralProjectCIDR(varCentralProjectCIDR)

	return err
}

type NullableCentralProjectCIDR struct {
	value *CentralProjectCIDR
	isSet bool
}

func (v NullableCentralProjectCIDR) Get() *CentralProjectCIDR {
	return v.value
}

func (v *NullableCentralProjectCIDR) Set(val *CentralProjectCIDR) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralProjectCIDR) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralProjectCIDR) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralProjectCIDR(val *CentralProjectCIDR) *NullableCentralProjectCIDR {
	return &NullableCentralProjectCIDR{value: val, isSet: true}
}

func (v NullableCentralProjectCIDR) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralProjectCIDR) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
