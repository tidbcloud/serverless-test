/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CentralAccesspoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CentralAccesspoint{}

// CentralAccesspoint struct for CentralAccesspoint
type CentralAccesspoint struct {
	Id          string `json:"id"`
	ProjectId   string `json:"project_id"`
	ClusterId   string `json:"cluster_id"`
	DisplayName string `json:"display_name"`
}

type _CentralAccesspoint CentralAccesspoint

// NewCentralAccesspoint instantiates a new CentralAccesspoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCentralAccesspoint(id string, projectId string, clusterId string, displayName string) *CentralAccesspoint {
	this := CentralAccesspoint{}
	this.Id = id
	this.ProjectId = projectId
	this.ClusterId = clusterId
	this.DisplayName = displayName
	return &this
}

// NewCentralAccesspointWithDefaults instantiates a new CentralAccesspoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCentralAccesspointWithDefaults() *CentralAccesspoint {
	this := CentralAccesspoint{}
	return &this
}

// GetId returns the Id field value
func (o *CentralAccesspoint) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CentralAccesspoint) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CentralAccesspoint) SetId(v string) {
	o.Id = v
}

// GetProjectId returns the ProjectId field value
func (o *CentralAccesspoint) GetProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *CentralAccesspoint) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *CentralAccesspoint) SetProjectId(v string) {
	o.ProjectId = v
}

// GetClusterId returns the ClusterId field value
func (o *CentralAccesspoint) GetClusterId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value
// and a boolean to check if the value has been set.
func (o *CentralAccesspoint) GetClusterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterId, true
}

// SetClusterId sets field value
func (o *CentralAccesspoint) SetClusterId(v string) {
	o.ClusterId = v
}

// GetDisplayName returns the DisplayName field value
func (o *CentralAccesspoint) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *CentralAccesspoint) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *CentralAccesspoint) SetDisplayName(v string) {
	o.DisplayName = v
}

func (o CentralAccesspoint) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CentralAccesspoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["project_id"] = o.ProjectId
	toSerialize["cluster_id"] = o.ClusterId
	toSerialize["display_name"] = o.DisplayName
	return toSerialize, nil
}

func (o *CentralAccesspoint) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"project_id",
		"cluster_id",
		"display_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCentralAccesspoint := _CentralAccesspoint{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCentralAccesspoint)

	if err != nil {
		return err
	}

	*o = CentralAccesspoint(varCentralAccesspoint)

	return err
}

type NullableCentralAccesspoint struct {
	value *CentralAccesspoint
	isSet bool
}

func (v NullableCentralAccesspoint) Get() *CentralAccesspoint {
	return v.value
}

func (v *NullableCentralAccesspoint) Set(val *CentralAccesspoint) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralAccesspoint) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralAccesspoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralAccesspoint(val *CentralAccesspoint) *NullableCentralAccesspoint {
	return &NullableCentralAccesspoint{value: val, isSet: true}
}

func (v NullableCentralAccesspoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralAccesspoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
