/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"encoding/json"
	"fmt"
)

// CentralTiKVNodeStatus the model 'CentralTiKVNodeStatus'
type CentralTiKVNodeStatus string

// List of centralTiKVNodeStatus
const (
	CENTRALTIKVNODESTATUS_AVAILABLE   CentralTiKVNodeStatus = "AVAILABLE"
	CENTRALTIKVNODESTATUS_CREATING    CentralTiKVNodeStatus = "CREATING"
	CENTRALTIKVNODESTATUS_UNAVAILABLE CentralTiKVNodeStatus = "UNAVAILABLE"
	CENTRALTIKVNODESTATUS_DELETING    CentralTiKVNodeStatus = "DELETING"
)

// All allowed values of CentralTiKVNodeStatus enum
var AllowedCentralTiKVNodeStatusEnumValues = []CentralTiKVNodeStatus{
	"AVAILABLE",
	"CREATING",
	"UNAVAILABLE",
	"DELETING",
}

func (v *CentralTiKVNodeStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CentralTiKVNodeStatus(value)
	for _, existing := range AllowedCentralTiKVNodeStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CentralTiKVNodeStatus", value)
}

// NewCentralTiKVNodeStatusFromValue returns a pointer to a valid CentralTiKVNodeStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCentralTiKVNodeStatusFromValue(v string) (*CentralTiKVNodeStatus, error) {
	ev := CentralTiKVNodeStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CentralTiKVNodeStatus: valid values are %v", v, AllowedCentralTiKVNodeStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CentralTiKVNodeStatus) IsValid() bool {
	for _, existing := range AllowedCentralTiKVNodeStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to centralTiKVNodeStatus value
func (v CentralTiKVNodeStatus) Ptr() *CentralTiKVNodeStatus {
	return &v
}

type NullableCentralTiKVNodeStatus struct {
	value *CentralTiKVNodeStatus
	isSet bool
}

func (v NullableCentralTiKVNodeStatus) Get() *CentralTiKVNodeStatus {
	return v.value
}

func (v *NullableCentralTiKVNodeStatus) Set(val *CentralTiKVNodeStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralTiKVNodeStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralTiKVNodeStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralTiKVNodeStatus(val *CentralTiKVNodeStatus) *NullableCentralTiKVNodeStatus {
	return &NullableCentralTiKVNodeStatus{value: val, isSet: true}
}

func (v NullableCentralTiKVNodeStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralTiKVNodeStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
