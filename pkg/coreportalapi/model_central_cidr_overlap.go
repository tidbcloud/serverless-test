/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"encoding/json"
)

// checks if the CentralCidrOverlap type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CentralCidrOverlap{}

// CentralCidrOverlap struct for CentralCidrOverlap
type CentralCidrOverlap struct {
	// The list of regions that their CIDRs overlap with the CIDR to be created.
	Regions []CentralCloudRegion `json:"regions,omitempty"`
	// The ID of the project that the CIDR overlaps with.
	ProjectId *string `json:"project_id,omitempty"`
}

// NewCentralCidrOverlap instantiates a new CentralCidrOverlap object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCentralCidrOverlap() *CentralCidrOverlap {
	this := CentralCidrOverlap{}
	return &this
}

// NewCentralCidrOverlapWithDefaults instantiates a new CentralCidrOverlap object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCentralCidrOverlapWithDefaults() *CentralCidrOverlap {
	this := CentralCidrOverlap{}
	return &this
}

// GetRegions returns the Regions field value if set, zero value otherwise.
func (o *CentralCidrOverlap) GetRegions() []CentralCloudRegion {
	if o == nil || IsNil(o.Regions) {
		var ret []CentralCloudRegion
		return ret
	}
	return o.Regions
}

// GetRegionsOk returns a tuple with the Regions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CentralCidrOverlap) GetRegionsOk() ([]CentralCloudRegion, bool) {
	if o == nil || IsNil(o.Regions) {
		return nil, false
	}
	return o.Regions, true
}

// HasRegions returns a boolean if a field has been set.
func (o *CentralCidrOverlap) HasRegions() bool {
	if o != nil && !IsNil(o.Regions) {
		return true
	}

	return false
}

// SetRegions gets a reference to the given []CentralCloudRegion and assigns it to the Regions field.
func (o *CentralCidrOverlap) SetRegions(v []CentralCloudRegion) {
	o.Regions = v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *CentralCidrOverlap) GetProjectId() string {
	if o == nil || IsNil(o.ProjectId) {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CentralCidrOverlap) GetProjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *CentralCidrOverlap) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *CentralCidrOverlap) SetProjectId(v string) {
	o.ProjectId = &v
}

func (o CentralCidrOverlap) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CentralCidrOverlap) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Regions) {
		toSerialize["regions"] = o.Regions
	}
	if !IsNil(o.ProjectId) {
		toSerialize["project_id"] = o.ProjectId
	}
	return toSerialize, nil
}

type NullableCentralCidrOverlap struct {
	value *CentralCidrOverlap
	isSet bool
}

func (v NullableCentralCidrOverlap) Get() *CentralCidrOverlap {
	return v.value
}

func (v *NullableCentralCidrOverlap) Set(val *CentralCidrOverlap) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralCidrOverlap) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralCidrOverlap) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralCidrOverlap(val *CentralCidrOverlap) *NullableCentralCidrOverlap {
	return &NullableCentralCidrOverlap{value: val, isSet: true}
}

func (v NullableCentralCidrOverlap) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralCidrOverlap) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
