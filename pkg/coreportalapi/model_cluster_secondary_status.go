/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"encoding/json"
	"fmt"
)

// ClusterSecondaryStatus the model 'ClusterSecondaryStatus'
type ClusterSecondaryStatus string

// List of ClusterSecondaryStatus
const (
	CLUSTERSECONDARYSTATUS_HEALTHY   ClusterSecondaryStatus = "HEALTHY"
	CLUSTERSECONDARYSTATUS_UNHEALTHY ClusterSecondaryStatus = "UNHEALTHY"
)

// All allowed values of ClusterSecondaryStatus enum
var AllowedClusterSecondaryStatusEnumValues = []ClusterSecondaryStatus{
	"HEALTHY",
	"UNHEALTHY",
}

func (v *ClusterSecondaryStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ClusterSecondaryStatus(value)
	for _, existing := range AllowedClusterSecondaryStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ClusterSecondaryStatus", value)
}

// NewClusterSecondaryStatusFromValue returns a pointer to a valid ClusterSecondaryStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewClusterSecondaryStatusFromValue(v string) (*ClusterSecondaryStatus, error) {
	ev := ClusterSecondaryStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ClusterSecondaryStatus: valid values are %v", v, AllowedClusterSecondaryStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ClusterSecondaryStatus) IsValid() bool {
	for _, existing := range AllowedClusterSecondaryStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ClusterSecondaryStatus value
func (v ClusterSecondaryStatus) Ptr() *ClusterSecondaryStatus {
	return &v
}

type NullableClusterSecondaryStatus struct {
	value *ClusterSecondaryStatus
	isSet bool
}

func (v NullableClusterSecondaryStatus) Get() *ClusterSecondaryStatus {
	return v.value
}

func (v *NullableClusterSecondaryStatus) Set(val *ClusterSecondaryStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterSecondaryStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterSecondaryStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterSecondaryStatus(val *ClusterSecondaryStatus) *NullableClusterSecondaryStatus {
	return &NullableClusterSecondaryStatus{value: val, isSet: true}
}

func (v NullableClusterSecondaryStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterSecondaryStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
