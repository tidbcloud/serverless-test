/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"encoding/json"
	"fmt"
)

// CentralInfraErrorCode the model 'CentralInfraErrorCode'
type CentralInfraErrorCode string

// List of centralInfraErrorCode
const (
	CENTRALINFRAERRORCODE_INFRA_RESOURCES_DEPLETED CentralInfraErrorCode = "INFRA_RESOURCES_DEPLETED"
)

// All allowed values of CentralInfraErrorCode enum
var AllowedCentralInfraErrorCodeEnumValues = []CentralInfraErrorCode{
	"INFRA_RESOURCES_DEPLETED",
}

func (v *CentralInfraErrorCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CentralInfraErrorCode(value)
	for _, existing := range AllowedCentralInfraErrorCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CentralInfraErrorCode", value)
}

// NewCentralInfraErrorCodeFromValue returns a pointer to a valid CentralInfraErrorCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCentralInfraErrorCodeFromValue(v string) (*CentralInfraErrorCode, error) {
	ev := CentralInfraErrorCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CentralInfraErrorCode: valid values are %v", v, AllowedCentralInfraErrorCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CentralInfraErrorCode) IsValid() bool {
	for _, existing := range AllowedCentralInfraErrorCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to centralInfraErrorCode value
func (v CentralInfraErrorCode) Ptr() *CentralInfraErrorCode {
	return &v
}

type NullableCentralInfraErrorCode struct {
	value *CentralInfraErrorCode
	isSet bool
}

func (v NullableCentralInfraErrorCode) Get() *CentralInfraErrorCode {
	return v.value
}

func (v *NullableCentralInfraErrorCode) Set(val *CentralInfraErrorCode) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralInfraErrorCode) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralInfraErrorCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralInfraErrorCode(val *CentralInfraErrorCode) *NullableCentralInfraErrorCode {
	return &NullableCentralInfraErrorCode{value: val, isSet: true}
}

func (v NullableCentralInfraErrorCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralInfraErrorCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
