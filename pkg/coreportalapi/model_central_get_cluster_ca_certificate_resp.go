/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CentralGetClusterCACertificateResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CentralGetClusterCACertificateResp{}

// CentralGetClusterCACertificateResp struct for CentralGetClusterCACertificateResp
type CentralGetClusterCACertificateResp struct {
	Certificate string          `json:"certificate" validate:"regexp=^(?:[A-Za-z0-9+\\/]{4})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$"`
	DownloadUrl *string         `json:"download_url,omitempty"`
	BaseResp    CentralBaseResp `json:"base_resp"`
}

type _CentralGetClusterCACertificateResp CentralGetClusterCACertificateResp

// NewCentralGetClusterCACertificateResp instantiates a new CentralGetClusterCACertificateResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCentralGetClusterCACertificateResp(certificate string, baseResp CentralBaseResp) *CentralGetClusterCACertificateResp {
	this := CentralGetClusterCACertificateResp{}
	this.Certificate = certificate
	this.BaseResp = baseResp
	return &this
}

// NewCentralGetClusterCACertificateRespWithDefaults instantiates a new CentralGetClusterCACertificateResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCentralGetClusterCACertificateRespWithDefaults() *CentralGetClusterCACertificateResp {
	this := CentralGetClusterCACertificateResp{}
	return &this
}

// GetCertificate returns the Certificate field value
func (o *CentralGetClusterCACertificateResp) GetCertificate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value
// and a boolean to check if the value has been set.
func (o *CentralGetClusterCACertificateResp) GetCertificateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Certificate, true
}

// SetCertificate sets field value
func (o *CentralGetClusterCACertificateResp) SetCertificate(v string) {
	o.Certificate = v
}

// GetDownloadUrl returns the DownloadUrl field value if set, zero value otherwise.
func (o *CentralGetClusterCACertificateResp) GetDownloadUrl() string {
	if o == nil || IsNil(o.DownloadUrl) {
		var ret string
		return ret
	}
	return *o.DownloadUrl
}

// GetDownloadUrlOk returns a tuple with the DownloadUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CentralGetClusterCACertificateResp) GetDownloadUrlOk() (*string, bool) {
	if o == nil || IsNil(o.DownloadUrl) {
		return nil, false
	}
	return o.DownloadUrl, true
}

// HasDownloadUrl returns a boolean if a field has been set.
func (o *CentralGetClusterCACertificateResp) HasDownloadUrl() bool {
	if o != nil && !IsNil(o.DownloadUrl) {
		return true
	}

	return false
}

// SetDownloadUrl gets a reference to the given string and assigns it to the DownloadUrl field.
func (o *CentralGetClusterCACertificateResp) SetDownloadUrl(v string) {
	o.DownloadUrl = &v
}

// GetBaseResp returns the BaseResp field value
func (o *CentralGetClusterCACertificateResp) GetBaseResp() CentralBaseResp {
	if o == nil {
		var ret CentralBaseResp
		return ret
	}

	return o.BaseResp
}

// GetBaseRespOk returns a tuple with the BaseResp field value
// and a boolean to check if the value has been set.
func (o *CentralGetClusterCACertificateResp) GetBaseRespOk() (*CentralBaseResp, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseResp, true
}

// SetBaseResp sets field value
func (o *CentralGetClusterCACertificateResp) SetBaseResp(v CentralBaseResp) {
	o.BaseResp = v
}

func (o CentralGetClusterCACertificateResp) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CentralGetClusterCACertificateResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["certificate"] = o.Certificate
	if !IsNil(o.DownloadUrl) {
		toSerialize["download_url"] = o.DownloadUrl
	}
	toSerialize["base_resp"] = o.BaseResp
	return toSerialize, nil
}

func (o *CentralGetClusterCACertificateResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"certificate",
		"base_resp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCentralGetClusterCACertificateResp := _CentralGetClusterCACertificateResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCentralGetClusterCACertificateResp)

	if err != nil {
		return err
	}

	*o = CentralGetClusterCACertificateResp(varCentralGetClusterCACertificateResp)

	return err
}

type NullableCentralGetClusterCACertificateResp struct {
	value *CentralGetClusterCACertificateResp
	isSet bool
}

func (v NullableCentralGetClusterCACertificateResp) Get() *CentralGetClusterCACertificateResp {
	return v.value
}

func (v *NullableCentralGetClusterCACertificateResp) Set(val *CentralGetClusterCACertificateResp) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralGetClusterCACertificateResp) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralGetClusterCACertificateResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralGetClusterCACertificateResp(val *CentralGetClusterCACertificateResp) *NullableCentralGetClusterCACertificateResp {
	return &NullableCentralGetClusterCACertificateResp{value: val, isSet: true}
}

func (v NullableCentralGetClusterCACertificateResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralGetClusterCACertificateResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
