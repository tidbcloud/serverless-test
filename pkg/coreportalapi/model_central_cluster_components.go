/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CentralClusterComponents type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CentralClusterComponents{}

// CentralClusterComponents struct for CentralClusterComponents
type CentralClusterComponents struct {
	Tikv    CentralComponent `json:"tikv"`
	Tidb    CentralComponent `json:"tidb"`
	Tiflash CentralComponent `json:"tiflash"`
}

type _CentralClusterComponents CentralClusterComponents

// NewCentralClusterComponents instantiates a new CentralClusterComponents object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCentralClusterComponents(tikv CentralComponent, tidb CentralComponent, tiflash CentralComponent) *CentralClusterComponents {
	this := CentralClusterComponents{}
	this.Tikv = tikv
	this.Tidb = tidb
	this.Tiflash = tiflash
	return &this
}

// NewCentralClusterComponentsWithDefaults instantiates a new CentralClusterComponents object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCentralClusterComponentsWithDefaults() *CentralClusterComponents {
	this := CentralClusterComponents{}
	return &this
}

// GetTikv returns the Tikv field value
func (o *CentralClusterComponents) GetTikv() CentralComponent {
	if o == nil {
		var ret CentralComponent
		return ret
	}

	return o.Tikv
}

// GetTikvOk returns a tuple with the Tikv field value
// and a boolean to check if the value has been set.
func (o *CentralClusterComponents) GetTikvOk() (*CentralComponent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tikv, true
}

// SetTikv sets field value
func (o *CentralClusterComponents) SetTikv(v CentralComponent) {
	o.Tikv = v
}

// GetTidb returns the Tidb field value
func (o *CentralClusterComponents) GetTidb() CentralComponent {
	if o == nil {
		var ret CentralComponent
		return ret
	}

	return o.Tidb
}

// GetTidbOk returns a tuple with the Tidb field value
// and a boolean to check if the value has been set.
func (o *CentralClusterComponents) GetTidbOk() (*CentralComponent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tidb, true
}

// SetTidb sets field value
func (o *CentralClusterComponents) SetTidb(v CentralComponent) {
	o.Tidb = v
}

// GetTiflash returns the Tiflash field value
func (o *CentralClusterComponents) GetTiflash() CentralComponent {
	if o == nil {
		var ret CentralComponent
		return ret
	}

	return o.Tiflash
}

// GetTiflashOk returns a tuple with the Tiflash field value
// and a boolean to check if the value has been set.
func (o *CentralClusterComponents) GetTiflashOk() (*CentralComponent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tiflash, true
}

// SetTiflash sets field value
func (o *CentralClusterComponents) SetTiflash(v CentralComponent) {
	o.Tiflash = v
}

func (o CentralClusterComponents) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CentralClusterComponents) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tikv"] = o.Tikv
	toSerialize["tidb"] = o.Tidb
	toSerialize["tiflash"] = o.Tiflash
	return toSerialize, nil
}

func (o *CentralClusterComponents) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tikv",
		"tidb",
		"tiflash",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCentralClusterComponents := _CentralClusterComponents{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCentralClusterComponents)

	if err != nil {
		return err
	}

	*o = CentralClusterComponents(varCentralClusterComponents)

	return err
}

type NullableCentralClusterComponents struct {
	value *CentralClusterComponents
	isSet bool
}

func (v NullableCentralClusterComponents) Get() *CentralClusterComponents {
	return v.value
}

func (v *NullableCentralClusterComponents) Set(val *CentralClusterComponents) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralClusterComponents) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralClusterComponents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralClusterComponents(val *CentralClusterComponents) *NullableCentralClusterComponents {
	return &NullableCentralClusterComponents{value: val, isSet: true}
}

func (v NullableCentralClusterComponents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralClusterComponents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
