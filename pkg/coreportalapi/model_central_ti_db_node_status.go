/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"encoding/json"
	"fmt"
)

// CentralTiDBNodeStatus the model 'CentralTiDBNodeStatus'
type CentralTiDBNodeStatus string

// List of centralTiDBNodeStatus
const (
	CENTRALTIDBNODESTATUS_AVAILABLE   CentralTiDBNodeStatus = "AVAILABLE"
	CENTRALTIDBNODESTATUS_CREATING    CentralTiDBNodeStatus = "CREATING"
	CENTRALTIDBNODESTATUS_UNAVAILABLE CentralTiDBNodeStatus = "UNAVAILABLE"
	CENTRALTIDBNODESTATUS_DELETING    CentralTiDBNodeStatus = "DELETING"
)

// All allowed values of CentralTiDBNodeStatus enum
var AllowedCentralTiDBNodeStatusEnumValues = []CentralTiDBNodeStatus{
	"AVAILABLE",
	"CREATING",
	"UNAVAILABLE",
	"DELETING",
}

func (v *CentralTiDBNodeStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CentralTiDBNodeStatus(value)
	for _, existing := range AllowedCentralTiDBNodeStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CentralTiDBNodeStatus", value)
}

// NewCentralTiDBNodeStatusFromValue returns a pointer to a valid CentralTiDBNodeStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCentralTiDBNodeStatusFromValue(v string) (*CentralTiDBNodeStatus, error) {
	ev := CentralTiDBNodeStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CentralTiDBNodeStatus: valid values are %v", v, AllowedCentralTiDBNodeStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CentralTiDBNodeStatus) IsValid() bool {
	for _, existing := range AllowedCentralTiDBNodeStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to centralTiDBNodeStatus value
func (v CentralTiDBNodeStatus) Ptr() *CentralTiDBNodeStatus {
	return &v
}

type NullableCentralTiDBNodeStatus struct {
	value *CentralTiDBNodeStatus
	isSet bool
}

func (v NullableCentralTiDBNodeStatus) Get() *CentralTiDBNodeStatus {
	return v.value
}

func (v *NullableCentralTiDBNodeStatus) Set(val *CentralTiDBNodeStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralTiDBNodeStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralTiDBNodeStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralTiDBNodeStatus(val *CentralTiDBNodeStatus) *NullableCentralTiDBNodeStatus {
	return &NullableCentralTiDBNodeStatus{value: val, isSet: true}
}

func (v NullableCentralTiDBNodeStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralTiDBNodeStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
