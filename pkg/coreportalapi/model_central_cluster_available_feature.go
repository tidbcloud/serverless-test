/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"encoding/json"
	"fmt"
)

// CentralClusterAvailableFeature the model 'CentralClusterAvailableFeature'
type CentralClusterAvailableFeature string

// List of centralClusterAvailableFeature
const (
	CENTRALCLUSTERAVAILABLEFEATURE_DISABLE_PUBLIC_LB CentralClusterAvailableFeature = "DISABLE_PUBLIC_LB"
	CENTRALCLUSTERAVAILABLEFEATURE_PRIVATELINK       CentralClusterAvailableFeature = "PRIVATELINK"
	CENTRALCLUSTERAVAILABLEFEATURE_DELEGATE_USER     CentralClusterAvailableFeature = "DELEGATE_USER"
	CENTRALCLUSTERAVAILABLEFEATURE_VECTOR_TYPE       CentralClusterAvailableFeature = "VECTOR_TYPE"
)

// All allowed values of CentralClusterAvailableFeature enum
var AllowedCentralClusterAvailableFeatureEnumValues = []CentralClusterAvailableFeature{
	"DISABLE_PUBLIC_LB",
	"PRIVATELINK",
	"DELEGATE_USER",
	"VECTOR_TYPE",
}

func (v *CentralClusterAvailableFeature) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CentralClusterAvailableFeature(value)
	for _, existing := range AllowedCentralClusterAvailableFeatureEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CentralClusterAvailableFeature", value)
}

// NewCentralClusterAvailableFeatureFromValue returns a pointer to a valid CentralClusterAvailableFeature
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCentralClusterAvailableFeatureFromValue(v string) (*CentralClusterAvailableFeature, error) {
	ev := CentralClusterAvailableFeature(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CentralClusterAvailableFeature: valid values are %v", v, AllowedCentralClusterAvailableFeatureEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CentralClusterAvailableFeature) IsValid() bool {
	for _, existing := range AllowedCentralClusterAvailableFeatureEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to centralClusterAvailableFeature value
func (v CentralClusterAvailableFeature) Ptr() *CentralClusterAvailableFeature {
	return &v
}

type NullableCentralClusterAvailableFeature struct {
	value *CentralClusterAvailableFeature
	isSet bool
}

func (v NullableCentralClusterAvailableFeature) Get() *CentralClusterAvailableFeature {
	return v.value
}

func (v *NullableCentralClusterAvailableFeature) Set(val *CentralClusterAvailableFeature) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralClusterAvailableFeature) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralClusterAvailableFeature) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralClusterAvailableFeature(val *CentralClusterAvailableFeature) *NullableCentralClusterAvailableFeature {
	return &NullableCentralClusterAvailableFeature{value: val, isSet: true}
}

func (v NullableCentralClusterAvailableFeature) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralClusterAvailableFeature) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
