/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"encoding/json"
	"fmt"
)

// ClusterCreateProgress the model 'ClusterCreateProgress'
type ClusterCreateProgress string

// List of ClusterCreateProgress
const (
	CLUSTERCREATEPROGRESS_INITIALIZING          ClusterCreateProgress = "INITIALIZING"
	CLUSTERCREATEPROGRESS_PREPARING             ClusterCreateProgress = "PREPARING"
	CLUSTERCREATEPROGRESS_LAUNCHING             ClusterCreateProgress = "LAUNCHING"
	CLUSTERCREATEPROGRESS_COMPLETED             ClusterCreateProgress = "COMPLETED"
	CLUSTERCREATEPROGRESS_BACKUPING             ClusterCreateProgress = "BACKUPING"
	CLUSTERCREATEPROGRESS_RESTORING             ClusterCreateProgress = "RESTORING"
	CLUSTERCREATEPROGRESS_REPLICATION_PREPARING ClusterCreateProgress = "REPLICATION_PREPARING"
	CLUSTERCREATEPROGRESS_HIBERNATED            ClusterCreateProgress = "HIBERNATED"
)

// All allowed values of ClusterCreateProgress enum
var AllowedClusterCreateProgressEnumValues = []ClusterCreateProgress{
	"INITIALIZING",
	"PREPARING",
	"LAUNCHING",
	"COMPLETED",
	"BACKUPING",
	"RESTORING",
	"REPLICATION_PREPARING",
	"HIBERNATED",
}

func (v *ClusterCreateProgress) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ClusterCreateProgress(value)
	for _, existing := range AllowedClusterCreateProgressEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ClusterCreateProgress", value)
}

// NewClusterCreateProgressFromValue returns a pointer to a valid ClusterCreateProgress
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewClusterCreateProgressFromValue(v string) (*ClusterCreateProgress, error) {
	ev := ClusterCreateProgress(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ClusterCreateProgress: valid values are %v", v, AllowedClusterCreateProgressEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ClusterCreateProgress) IsValid() bool {
	for _, existing := range AllowedClusterCreateProgressEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ClusterCreateProgress value
func (v ClusterCreateProgress) Ptr() *ClusterCreateProgress {
	return &v
}

type NullableClusterCreateProgress struct {
	value *ClusterCreateProgress
	isSet bool
}

func (v NullableClusterCreateProgress) Get() *ClusterCreateProgress {
	return v.value
}

func (v *NullableClusterCreateProgress) Set(val *ClusterCreateProgress) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterCreateProgress) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterCreateProgress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterCreateProgress(val *ClusterCreateProgress) *NullableClusterCreateProgress {
	return &NullableClusterCreateProgress{value: val, isSet: true}
}

func (v NullableClusterCreateProgress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterCreateProgress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
