/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ChangeClusterNameRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangeClusterNameRequest{}

// ChangeClusterNameRequest struct for ChangeClusterNameRequest
type ChangeClusterNameRequest struct {
	ClusterName string `json:"cluster_name"`
}

type _ChangeClusterNameRequest ChangeClusterNameRequest

// NewChangeClusterNameRequest instantiates a new ChangeClusterNameRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeClusterNameRequest(clusterName string) *ChangeClusterNameRequest {
	this := ChangeClusterNameRequest{}
	this.ClusterName = clusterName
	return &this
}

// NewChangeClusterNameRequestWithDefaults instantiates a new ChangeClusterNameRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeClusterNameRequestWithDefaults() *ChangeClusterNameRequest {
	this := ChangeClusterNameRequest{}
	return &this
}

// GetClusterName returns the ClusterName field value
func (o *ChangeClusterNameRequest) GetClusterName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterName
}

// GetClusterNameOk returns a tuple with the ClusterName field value
// and a boolean to check if the value has been set.
func (o *ChangeClusterNameRequest) GetClusterNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterName, true
}

// SetClusterName sets field value
func (o *ChangeClusterNameRequest) SetClusterName(v string) {
	o.ClusterName = v
}

func (o ChangeClusterNameRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangeClusterNameRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cluster_name"] = o.ClusterName
	return toSerialize, nil
}

func (o *ChangeClusterNameRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cluster_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChangeClusterNameRequest := _ChangeClusterNameRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChangeClusterNameRequest)

	if err != nil {
		return err
	}

	*o = ChangeClusterNameRequest(varChangeClusterNameRequest)

	return err
}

type NullableChangeClusterNameRequest struct {
	value *ChangeClusterNameRequest
	isSet bool
}

func (v NullableChangeClusterNameRequest) Get() *ChangeClusterNameRequest {
	return v.value
}

func (v *NullableChangeClusterNameRequest) Set(val *ChangeClusterNameRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeClusterNameRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeClusterNameRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeClusterNameRequest(val *ChangeClusterNameRequest) *NullableChangeClusterNameRequest {
	return &NullableChangeClusterNameRequest{value: val, isSet: true}
}

func (v NullableChangeClusterNameRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeClusterNameRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
