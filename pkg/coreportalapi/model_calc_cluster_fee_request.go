/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CalcClusterFeeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CalcClusterFeeRequest{}

// CalcClusterFeeRequest struct for CalcClusterFeeRequest
type CalcClusterFeeRequest struct {
	Provider        string                    `json:"provider"`
	Region          string                    `json:"region"`
	IsDevTier       bool                      `json:"is_dev_tier"`
	Components      []CentralClusterComponent `json:"components"`
	IsClusterPaused *bool                     `json:"is_cluster_paused,omitempty"`
}

type _CalcClusterFeeRequest CalcClusterFeeRequest

// NewCalcClusterFeeRequest instantiates a new CalcClusterFeeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCalcClusterFeeRequest(provider string, region string, isDevTier bool, components []CentralClusterComponent) *CalcClusterFeeRequest {
	this := CalcClusterFeeRequest{}
	this.Provider = provider
	this.Region = region
	this.IsDevTier = isDevTier
	this.Components = components
	return &this
}

// NewCalcClusterFeeRequestWithDefaults instantiates a new CalcClusterFeeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCalcClusterFeeRequestWithDefaults() *CalcClusterFeeRequest {
	this := CalcClusterFeeRequest{}
	return &this
}

// GetProvider returns the Provider field value
func (o *CalcClusterFeeRequest) GetProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *CalcClusterFeeRequest) GetProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *CalcClusterFeeRequest) SetProvider(v string) {
	o.Provider = v
}

// GetRegion returns the Region field value
func (o *CalcClusterFeeRequest) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *CalcClusterFeeRequest) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *CalcClusterFeeRequest) SetRegion(v string) {
	o.Region = v
}

// GetIsDevTier returns the IsDevTier field value
func (o *CalcClusterFeeRequest) GetIsDevTier() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsDevTier
}

// GetIsDevTierOk returns a tuple with the IsDevTier field value
// and a boolean to check if the value has been set.
func (o *CalcClusterFeeRequest) GetIsDevTierOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsDevTier, true
}

// SetIsDevTier sets field value
func (o *CalcClusterFeeRequest) SetIsDevTier(v bool) {
	o.IsDevTier = v
}

// GetComponents returns the Components field value
func (o *CalcClusterFeeRequest) GetComponents() []CentralClusterComponent {
	if o == nil {
		var ret []CentralClusterComponent
		return ret
	}

	return o.Components
}

// GetComponentsOk returns a tuple with the Components field value
// and a boolean to check if the value has been set.
func (o *CalcClusterFeeRequest) GetComponentsOk() ([]CentralClusterComponent, bool) {
	if o == nil {
		return nil, false
	}
	return o.Components, true
}

// SetComponents sets field value
func (o *CalcClusterFeeRequest) SetComponents(v []CentralClusterComponent) {
	o.Components = v
}

// GetIsClusterPaused returns the IsClusterPaused field value if set, zero value otherwise.
func (o *CalcClusterFeeRequest) GetIsClusterPaused() bool {
	if o == nil || IsNil(o.IsClusterPaused) {
		var ret bool
		return ret
	}
	return *o.IsClusterPaused
}

// GetIsClusterPausedOk returns a tuple with the IsClusterPaused field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalcClusterFeeRequest) GetIsClusterPausedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsClusterPaused) {
		return nil, false
	}
	return o.IsClusterPaused, true
}

// HasIsClusterPaused returns a boolean if a field has been set.
func (o *CalcClusterFeeRequest) HasIsClusterPaused() bool {
	if o != nil && !IsNil(o.IsClusterPaused) {
		return true
	}

	return false
}

// SetIsClusterPaused gets a reference to the given bool and assigns it to the IsClusterPaused field.
func (o *CalcClusterFeeRequest) SetIsClusterPaused(v bool) {
	o.IsClusterPaused = &v
}

func (o CalcClusterFeeRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CalcClusterFeeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["provider"] = o.Provider
	toSerialize["region"] = o.Region
	toSerialize["is_dev_tier"] = o.IsDevTier
	toSerialize["components"] = o.Components
	if !IsNil(o.IsClusterPaused) {
		toSerialize["is_cluster_paused"] = o.IsClusterPaused
	}
	return toSerialize, nil
}

func (o *CalcClusterFeeRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"provider",
		"region",
		"is_dev_tier",
		"components",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCalcClusterFeeRequest := _CalcClusterFeeRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCalcClusterFeeRequest)

	if err != nil {
		return err
	}

	*o = CalcClusterFeeRequest(varCalcClusterFeeRequest)

	return err
}

type NullableCalcClusterFeeRequest struct {
	value *CalcClusterFeeRequest
	isSet bool
}

func (v NullableCalcClusterFeeRequest) Get() *CalcClusterFeeRequest {
	return v.value
}

func (v *NullableCalcClusterFeeRequest) Set(val *CalcClusterFeeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCalcClusterFeeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCalcClusterFeeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalcClusterFeeRequest(val *CalcClusterFeeRequest) *NullableCalcClusterFeeRequest {
	return &NullableCalcClusterFeeRequest{value: val, isSet: true}
}

func (v NullableCalcClusterFeeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalcClusterFeeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
