/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CentralCloudProviders type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CentralCloudProviders{}

// CentralCloudProviders struct for CentralCloudProviders
type CentralCloudProviders struct {
	CloudProviders []CentralCloudProvider `json:"cloud_providers"`
	BaseResp       CentralBaseResp        `json:"base_resp"`
}

type _CentralCloudProviders CentralCloudProviders

// NewCentralCloudProviders instantiates a new CentralCloudProviders object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCentralCloudProviders(cloudProviders []CentralCloudProvider, baseResp CentralBaseResp) *CentralCloudProviders {
	this := CentralCloudProviders{}
	this.CloudProviders = cloudProviders
	this.BaseResp = baseResp
	return &this
}

// NewCentralCloudProvidersWithDefaults instantiates a new CentralCloudProviders object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCentralCloudProvidersWithDefaults() *CentralCloudProviders {
	this := CentralCloudProviders{}
	return &this
}

// GetCloudProviders returns the CloudProviders field value
func (o *CentralCloudProviders) GetCloudProviders() []CentralCloudProvider {
	if o == nil {
		var ret []CentralCloudProvider
		return ret
	}

	return o.CloudProviders
}

// GetCloudProvidersOk returns a tuple with the CloudProviders field value
// and a boolean to check if the value has been set.
func (o *CentralCloudProviders) GetCloudProvidersOk() ([]CentralCloudProvider, bool) {
	if o == nil {
		return nil, false
	}
	return o.CloudProviders, true
}

// SetCloudProviders sets field value
func (o *CentralCloudProviders) SetCloudProviders(v []CentralCloudProvider) {
	o.CloudProviders = v
}

// GetBaseResp returns the BaseResp field value
func (o *CentralCloudProviders) GetBaseResp() CentralBaseResp {
	if o == nil {
		var ret CentralBaseResp
		return ret
	}

	return o.BaseResp
}

// GetBaseRespOk returns a tuple with the BaseResp field value
// and a boolean to check if the value has been set.
func (o *CentralCloudProviders) GetBaseRespOk() (*CentralBaseResp, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseResp, true
}

// SetBaseResp sets field value
func (o *CentralCloudProviders) SetBaseResp(v CentralBaseResp) {
	o.BaseResp = v
}

func (o CentralCloudProviders) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CentralCloudProviders) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cloud_providers"] = o.CloudProviders
	toSerialize["base_resp"] = o.BaseResp
	return toSerialize, nil
}

func (o *CentralCloudProviders) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cloud_providers",
		"base_resp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCentralCloudProviders := _CentralCloudProviders{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCentralCloudProviders)

	if err != nil {
		return err
	}

	*o = CentralCloudProviders(varCentralCloudProviders)

	return err
}

type NullableCentralCloudProviders struct {
	value *CentralCloudProviders
	isSet bool
}

func (v NullableCentralCloudProviders) Get() *CentralCloudProviders {
	return v.value
}

func (v *NullableCentralCloudProviders) Set(val *CentralCloudProviders) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralCloudProviders) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralCloudProviders) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralCloudProviders(val *CentralCloudProviders) *NullableCentralCloudProviders {
	return &NullableCentralCloudProviders{value: val, isSet: true}
}

func (v NullableCentralCloudProviders) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralCloudProviders) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
