/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CentralCreateGcpVpcPeeringResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CentralCreateGcpVpcPeeringResp{}

// CentralCreateGcpVpcPeeringResp struct for CentralCreateGcpVpcPeeringResp
type CentralCreateGcpVpcPeeringResp struct {
	ProjectId   string           `json:"project_id"`
	NetworkName string           `json:"network_name"`
	Region      string           `json:"region"`
	Id          string           `json:"id"`
	BaseResp    *CentralBaseResp `json:"base_resp,omitempty"`
}

type _CentralCreateGcpVpcPeeringResp CentralCreateGcpVpcPeeringResp

// NewCentralCreateGcpVpcPeeringResp instantiates a new CentralCreateGcpVpcPeeringResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCentralCreateGcpVpcPeeringResp(projectId string, networkName string, region string, id string) *CentralCreateGcpVpcPeeringResp {
	this := CentralCreateGcpVpcPeeringResp{}
	this.ProjectId = projectId
	this.NetworkName = networkName
	this.Region = region
	this.Id = id
	return &this
}

// NewCentralCreateGcpVpcPeeringRespWithDefaults instantiates a new CentralCreateGcpVpcPeeringResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCentralCreateGcpVpcPeeringRespWithDefaults() *CentralCreateGcpVpcPeeringResp {
	this := CentralCreateGcpVpcPeeringResp{}
	return &this
}

// GetProjectId returns the ProjectId field value
func (o *CentralCreateGcpVpcPeeringResp) GetProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *CentralCreateGcpVpcPeeringResp) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *CentralCreateGcpVpcPeeringResp) SetProjectId(v string) {
	o.ProjectId = v
}

// GetNetworkName returns the NetworkName field value
func (o *CentralCreateGcpVpcPeeringResp) GetNetworkName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NetworkName
}

// GetNetworkNameOk returns a tuple with the NetworkName field value
// and a boolean to check if the value has been set.
func (o *CentralCreateGcpVpcPeeringResp) GetNetworkNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkName, true
}

// SetNetworkName sets field value
func (o *CentralCreateGcpVpcPeeringResp) SetNetworkName(v string) {
	o.NetworkName = v
}

// GetRegion returns the Region field value
func (o *CentralCreateGcpVpcPeeringResp) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *CentralCreateGcpVpcPeeringResp) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *CentralCreateGcpVpcPeeringResp) SetRegion(v string) {
	o.Region = v
}

// GetId returns the Id field value
func (o *CentralCreateGcpVpcPeeringResp) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CentralCreateGcpVpcPeeringResp) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CentralCreateGcpVpcPeeringResp) SetId(v string) {
	o.Id = v
}

// GetBaseResp returns the BaseResp field value if set, zero value otherwise.
func (o *CentralCreateGcpVpcPeeringResp) GetBaseResp() CentralBaseResp {
	if o == nil || IsNil(o.BaseResp) {
		var ret CentralBaseResp
		return ret
	}
	return *o.BaseResp
}

// GetBaseRespOk returns a tuple with the BaseResp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CentralCreateGcpVpcPeeringResp) GetBaseRespOk() (*CentralBaseResp, bool) {
	if o == nil || IsNil(o.BaseResp) {
		return nil, false
	}
	return o.BaseResp, true
}

// HasBaseResp returns a boolean if a field has been set.
func (o *CentralCreateGcpVpcPeeringResp) HasBaseResp() bool {
	if o != nil && !IsNil(o.BaseResp) {
		return true
	}

	return false
}

// SetBaseResp gets a reference to the given CentralBaseResp and assigns it to the BaseResp field.
func (o *CentralCreateGcpVpcPeeringResp) SetBaseResp(v CentralBaseResp) {
	o.BaseResp = &v
}

func (o CentralCreateGcpVpcPeeringResp) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CentralCreateGcpVpcPeeringResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["project_id"] = o.ProjectId
	toSerialize["network_name"] = o.NetworkName
	toSerialize["region"] = o.Region
	toSerialize["id"] = o.Id
	if !IsNil(o.BaseResp) {
		toSerialize["base_resp"] = o.BaseResp
	}
	return toSerialize, nil
}

func (o *CentralCreateGcpVpcPeeringResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"project_id",
		"network_name",
		"region",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCentralCreateGcpVpcPeeringResp := _CentralCreateGcpVpcPeeringResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCentralCreateGcpVpcPeeringResp)

	if err != nil {
		return err
	}

	*o = CentralCreateGcpVpcPeeringResp(varCentralCreateGcpVpcPeeringResp)

	return err
}

type NullableCentralCreateGcpVpcPeeringResp struct {
	value *CentralCreateGcpVpcPeeringResp
	isSet bool
}

func (v NullableCentralCreateGcpVpcPeeringResp) Get() *CentralCreateGcpVpcPeeringResp {
	return v.value
}

func (v *NullableCentralCreateGcpVpcPeeringResp) Set(val *CentralCreateGcpVpcPeeringResp) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralCreateGcpVpcPeeringResp) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralCreateGcpVpcPeeringResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralCreateGcpVpcPeeringResp(val *CentralCreateGcpVpcPeeringResp) *NullableCentralCreateGcpVpcPeeringResp {
	return &NullableCentralCreateGcpVpcPeeringResp{value: val, isSet: true}
}

func (v NullableCentralCreateGcpVpcPeeringResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralCreateGcpVpcPeeringResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
