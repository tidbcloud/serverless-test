/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CentralUpdateCidrResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CentralUpdateCidrResponse{}

// CentralUpdateCidrResponse struct for CentralUpdateCidrResponse
type CentralUpdateCidrResponse struct {
	Overlaps []CentralCidrOverlap `json:"overlaps,omitempty"`
	// The max node IP of the CIDR.
	MaxNodeIp int64           `json:"max_node_ip"`
	BaseResp  CentralBaseResp `json:"base_resp"`
}

type _CentralUpdateCidrResponse CentralUpdateCidrResponse

// NewCentralUpdateCidrResponse instantiates a new CentralUpdateCidrResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCentralUpdateCidrResponse(maxNodeIp int64, baseResp CentralBaseResp) *CentralUpdateCidrResponse {
	this := CentralUpdateCidrResponse{}
	this.MaxNodeIp = maxNodeIp
	this.BaseResp = baseResp
	return &this
}

// NewCentralUpdateCidrResponseWithDefaults instantiates a new CentralUpdateCidrResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCentralUpdateCidrResponseWithDefaults() *CentralUpdateCidrResponse {
	this := CentralUpdateCidrResponse{}
	return &this
}

// GetOverlaps returns the Overlaps field value if set, zero value otherwise.
func (o *CentralUpdateCidrResponse) GetOverlaps() []CentralCidrOverlap {
	if o == nil || IsNil(o.Overlaps) {
		var ret []CentralCidrOverlap
		return ret
	}
	return o.Overlaps
}

// GetOverlapsOk returns a tuple with the Overlaps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CentralUpdateCidrResponse) GetOverlapsOk() ([]CentralCidrOverlap, bool) {
	if o == nil || IsNil(o.Overlaps) {
		return nil, false
	}
	return o.Overlaps, true
}

// HasOverlaps returns a boolean if a field has been set.
func (o *CentralUpdateCidrResponse) HasOverlaps() bool {
	if o != nil && !IsNil(o.Overlaps) {
		return true
	}

	return false
}

// SetOverlaps gets a reference to the given []CentralCidrOverlap and assigns it to the Overlaps field.
func (o *CentralUpdateCidrResponse) SetOverlaps(v []CentralCidrOverlap) {
	o.Overlaps = v
}

// GetMaxNodeIp returns the MaxNodeIp field value
func (o *CentralUpdateCidrResponse) GetMaxNodeIp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MaxNodeIp
}

// GetMaxNodeIpOk returns a tuple with the MaxNodeIp field value
// and a boolean to check if the value has been set.
func (o *CentralUpdateCidrResponse) GetMaxNodeIpOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxNodeIp, true
}

// SetMaxNodeIp sets field value
func (o *CentralUpdateCidrResponse) SetMaxNodeIp(v int64) {
	o.MaxNodeIp = v
}

// GetBaseResp returns the BaseResp field value
func (o *CentralUpdateCidrResponse) GetBaseResp() CentralBaseResp {
	if o == nil {
		var ret CentralBaseResp
		return ret
	}

	return o.BaseResp
}

// GetBaseRespOk returns a tuple with the BaseResp field value
// and a boolean to check if the value has been set.
func (o *CentralUpdateCidrResponse) GetBaseRespOk() (*CentralBaseResp, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseResp, true
}

// SetBaseResp sets field value
func (o *CentralUpdateCidrResponse) SetBaseResp(v CentralBaseResp) {
	o.BaseResp = v
}

func (o CentralUpdateCidrResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CentralUpdateCidrResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Overlaps) {
		toSerialize["overlaps"] = o.Overlaps
	}
	toSerialize["max_node_ip"] = o.MaxNodeIp
	toSerialize["base_resp"] = o.BaseResp
	return toSerialize, nil
}

func (o *CentralUpdateCidrResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"max_node_ip",
		"base_resp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCentralUpdateCidrResponse := _CentralUpdateCidrResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCentralUpdateCidrResponse)

	if err != nil {
		return err
	}

	*o = CentralUpdateCidrResponse(varCentralUpdateCidrResponse)

	return err
}

type NullableCentralUpdateCidrResponse struct {
	value *CentralUpdateCidrResponse
	isSet bool
}

func (v NullableCentralUpdateCidrResponse) Get() *CentralUpdateCidrResponse {
	return v.value
}

func (v *NullableCentralUpdateCidrResponse) Set(val *CentralUpdateCidrResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralUpdateCidrResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralUpdateCidrResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralUpdateCidrResponse(val *CentralUpdateCidrResponse) *NullableCentralUpdateCidrResponse {
	return &NullableCentralUpdateCidrResponse{value: val, isSet: true}
}

func (v NullableCentralUpdateCidrResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralUpdateCidrResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
