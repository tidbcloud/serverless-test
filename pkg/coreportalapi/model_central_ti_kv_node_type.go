/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"encoding/json"
	"fmt"
)

// CentralTiKVNodeType the model 'CentralTiKVNodeType'
type CentralTiKVNodeType string

// List of centralTiKVNodeType
const (
	CENTRALTIKVNODETYPE_STORAGE CentralTiKVNodeType = "STORAGE"
)

// All allowed values of CentralTiKVNodeType enum
var AllowedCentralTiKVNodeTypeEnumValues = []CentralTiKVNodeType{
	"STORAGE",
}

func (v *CentralTiKVNodeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CentralTiKVNodeType(value)
	for _, existing := range AllowedCentralTiKVNodeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CentralTiKVNodeType", value)
}

// NewCentralTiKVNodeTypeFromValue returns a pointer to a valid CentralTiKVNodeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCentralTiKVNodeTypeFromValue(v string) (*CentralTiKVNodeType, error) {
	ev := CentralTiKVNodeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CentralTiKVNodeType: valid values are %v", v, AllowedCentralTiKVNodeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CentralTiKVNodeType) IsValid() bool {
	for _, existing := range AllowedCentralTiKVNodeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to centralTiKVNodeType value
func (v CentralTiKVNodeType) Ptr() *CentralTiKVNodeType {
	return &v
}

type NullableCentralTiKVNodeType struct {
	value *CentralTiKVNodeType
	isSet bool
}

func (v NullableCentralTiKVNodeType) Get() *CentralTiKVNodeType {
	return v.value
}

func (v *NullableCentralTiKVNodeType) Set(val *CentralTiKVNodeType) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralTiKVNodeType) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralTiKVNodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralTiKVNodeType(val *CentralTiKVNodeType) *NullableCentralTiKVNodeType {
	return &NullableCentralTiKVNodeType{value: val, isSet: true}
}

func (v NullableCentralTiKVNodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralTiKVNodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
