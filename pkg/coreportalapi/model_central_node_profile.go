/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CentralNodeProfile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CentralNodeProfile{}

// CentralNodeProfile struct for CentralNodeProfile
type CentralNodeProfile struct {
	Compute     CentralCompute `json:"compute"`
	StorageGi   int64          `json:"storage_gi"`
	Name        string         `json:"name"`
	DisplayName string         `json:"display_name"`
}

type _CentralNodeProfile CentralNodeProfile

// NewCentralNodeProfile instantiates a new CentralNodeProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCentralNodeProfile(compute CentralCompute, storageGi int64, name string, displayName string) *CentralNodeProfile {
	this := CentralNodeProfile{}
	this.Compute = compute
	this.StorageGi = storageGi
	this.Name = name
	this.DisplayName = displayName
	return &this
}

// NewCentralNodeProfileWithDefaults instantiates a new CentralNodeProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCentralNodeProfileWithDefaults() *CentralNodeProfile {
	this := CentralNodeProfile{}
	return &this
}

// GetCompute returns the Compute field value
func (o *CentralNodeProfile) GetCompute() CentralCompute {
	if o == nil {
		var ret CentralCompute
		return ret
	}

	return o.Compute
}

// GetComputeOk returns a tuple with the Compute field value
// and a boolean to check if the value has been set.
func (o *CentralNodeProfile) GetComputeOk() (*CentralCompute, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Compute, true
}

// SetCompute sets field value
func (o *CentralNodeProfile) SetCompute(v CentralCompute) {
	o.Compute = v
}

// GetStorageGi returns the StorageGi field value
func (o *CentralNodeProfile) GetStorageGi() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.StorageGi
}

// GetStorageGiOk returns a tuple with the StorageGi field value
// and a boolean to check if the value has been set.
func (o *CentralNodeProfile) GetStorageGiOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorageGi, true
}

// SetStorageGi sets field value
func (o *CentralNodeProfile) SetStorageGi(v int64) {
	o.StorageGi = v
}

// GetName returns the Name field value
func (o *CentralNodeProfile) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CentralNodeProfile) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CentralNodeProfile) SetName(v string) {
	o.Name = v
}

// GetDisplayName returns the DisplayName field value
func (o *CentralNodeProfile) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *CentralNodeProfile) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *CentralNodeProfile) SetDisplayName(v string) {
	o.DisplayName = v
}

func (o CentralNodeProfile) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CentralNodeProfile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["compute"] = o.Compute
	toSerialize["storage_gi"] = o.StorageGi
	toSerialize["name"] = o.Name
	toSerialize["display_name"] = o.DisplayName
	return toSerialize, nil
}

func (o *CentralNodeProfile) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"compute",
		"storage_gi",
		"name",
		"display_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCentralNodeProfile := _CentralNodeProfile{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCentralNodeProfile)

	if err != nil {
		return err
	}

	*o = CentralNodeProfile(varCentralNodeProfile)

	return err
}

type NullableCentralNodeProfile struct {
	value *CentralNodeProfile
	isSet bool
}

func (v NullableCentralNodeProfile) Get() *CentralNodeProfile {
	return v.value
}

func (v *NullableCentralNodeProfile) Set(val *CentralNodeProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralNodeProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralNodeProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralNodeProfile(val *CentralNodeProfile) *NullableCentralNodeProfile {
	return &NullableCentralNodeProfile{value: val, isSet: true}
}

func (v NullableCentralNodeProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralNodeProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
