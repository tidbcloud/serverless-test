/*
gRPC for our DBaaS central service

notably uses gRPC-Gateway with OpenAPI

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreportalapi

import (
	"encoding/json"
	"fmt"
)

// CentralCloudRegionCloudProvider Enum for cloud providers for the region.   - CLOUD_PROVIDER_UNSPECIFIED: Unspecified cloud provider.  - AWS: Amazon Web Services.  - GCP: Google Cloud Platform.
type CentralCloudRegionCloudProvider string

// List of centralCloudRegionCloudProvider
const (
	CENTRALCLOUDREGIONCLOUDPROVIDER_CLOUD_PROVIDER_UNSPECIFIED CentralCloudRegionCloudProvider = "CLOUD_PROVIDER_UNSPECIFIED"
	CENTRALCLOUDREGIONCLOUDPROVIDER_AWS                        CentralCloudRegionCloudProvider = "AWS"
	CENTRALCLOUDREGIONCLOUDPROVIDER_GCP                        CentralCloudRegionCloudProvider = "GCP"
)

// All allowed values of CentralCloudRegionCloudProvider enum
var AllowedCentralCloudRegionCloudProviderEnumValues = []CentralCloudRegionCloudProvider{
	"CLOUD_PROVIDER_UNSPECIFIED",
	"AWS",
	"GCP",
}

func (v *CentralCloudRegionCloudProvider) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CentralCloudRegionCloudProvider(value)
	for _, existing := range AllowedCentralCloudRegionCloudProviderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CentralCloudRegionCloudProvider", value)
}

// NewCentralCloudRegionCloudProviderFromValue returns a pointer to a valid CentralCloudRegionCloudProvider
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCentralCloudRegionCloudProviderFromValue(v string) (*CentralCloudRegionCloudProvider, error) {
	ev := CentralCloudRegionCloudProvider(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CentralCloudRegionCloudProvider: valid values are %v", v, AllowedCentralCloudRegionCloudProviderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CentralCloudRegionCloudProvider) IsValid() bool {
	for _, existing := range AllowedCentralCloudRegionCloudProviderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to centralCloudRegionCloudProvider value
func (v CentralCloudRegionCloudProvider) Ptr() *CentralCloudRegionCloudProvider {
	return &v
}

type NullableCentralCloudRegionCloudProvider struct {
	value *CentralCloudRegionCloudProvider
	isSet bool
}

func (v NullableCentralCloudRegionCloudProvider) Get() *CentralCloudRegionCloudProvider {
	return v.value
}

func (v *NullableCentralCloudRegionCloudProvider) Set(val *CentralCloudRegionCloudProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralCloudRegionCloudProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralCloudRegionCloudProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralCloudRegionCloudProvider(val *CentralCloudRegionCloudProvider) *NullableCentralCloudRegionCloudProvider {
	return &NullableCentralCloudRegionCloudProvider{value: val, isSet: true}
}

func (v NullableCentralCloudRegionCloudProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralCloudRegionCloudProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
